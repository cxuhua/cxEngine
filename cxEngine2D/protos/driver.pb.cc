// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: driver.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "driver.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ttmall {
class SignInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SignInfo> {
} _SignInfo_default_instance_;
class DeliveryGoodsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DeliveryGoods> {
} _DeliveryGoods_default_instance_;
class DeliveryNodeDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DeliveryNode> {
} _DeliveryNode_default_instance_;
class WareGroupDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<WareGroup> {
} _WareGroup_default_instance_;
class ListDeliveryTaskReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ListDeliveryTaskReq> {
} _ListDeliveryTaskReq_default_instance_;
class ListDeliveryTaskRepDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ListDeliveryTaskRep> {
} _ListDeliveryTaskRep_default_instance_;
class WorkOptReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<WorkOptReq> {
} _WorkOptReq_default_instance_;
class WorkOptRepDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<WorkOptRep> {
} _WorkOptRep_default_instance_;
class DriverInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DriverInfo> {
} _DriverInfo_default_instance_;
class DriverLoginReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DriverLoginReq> {
} _DriverLoginReq_default_instance_;
class DriverLoginRepDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DriverLoginRep> {
} _DriverLoginRep_default_instance_;
class DriverRegisterReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DriverRegisterReq> {
} _DriverRegisterReq_default_instance_;
class DriverRegisterRepDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DriverRegisterRep> {
} _DriverRegisterRep_default_instance_;
class SubmitAuthInfoReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SubmitAuthInfoReq> {
} _SubmitAuthInfoReq_default_instance_;
class SubmitAuthInfoRepDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SubmitAuthInfoRep> {
} _SubmitAuthInfoRep_default_instance_;
class GetDriverInfoReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetDriverInfoReq> {
} _GetDriverInfoReq_default_instance_;
class GetDriverInfoRepDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetDriverInfoRep> {
} _GetDriverInfoRep_default_instance_;
class UpdateDriverStateReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<UpdateDriverStateReq> {
} _UpdateDriverStateReq_default_instance_;
class UpdateDriverStateRepDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<UpdateDriverStateRep> {
} _UpdateDriverStateRep_default_instance_;
class DeliveryOrderInfoReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DeliveryOrderInfoReq> {
} _DeliveryOrderInfoReq_default_instance_;
class DeliveryOrderInfoRepDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DeliveryOrderInfoRep> {
} _DeliveryOrderInfoRep_default_instance_;
class ConfirmDeliveryReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ConfirmDeliveryReq> {
} _ConfirmDeliveryReq_default_instance_;
class ConfirmDeliveryRepDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ConfirmDeliveryRep> {
} _ConfirmDeliveryRep_default_instance_;
class ListDriverOrderReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ListDriverOrderReq> {
} _ListDriverOrderReq_default_instance_;
class ListDriverOrderRepDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ListDriverOrderRep> {
} _ListDriverOrderRep_default_instance_;
class SignReceivingReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SignReceivingReq> {
} _SignReceivingReq_default_instance_;
class SignReceivingRepDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SignReceivingRep> {
} _SignReceivingRep_default_instance_;
class UpdateDriverPassReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<UpdateDriverPassReq> {
} _UpdateDriverPassReq_default_instance_;
class UpdateDriverPassRepDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<UpdateDriverPassRep> {
} _UpdateDriverPassRep_default_instance_;
class UpdateDriverMobileReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<UpdateDriverMobileReq> {
} _UpdateDriverMobileReq_default_instance_;
class UpdateDriverMobileRepDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<UpdateDriverMobileRep> {
} _UpdateDriverMobileRep_default_instance_;

namespace protobuf_driver_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[31];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[3];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignInfo, is_exp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignInfo, exp_desc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignInfo, suggest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignInfo, mark_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignInfo, images_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignInfo, time_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeliveryGoods, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeliveryGoods, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeliveryGoods, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeliveryGoods, count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeliveryGoods, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeliveryGoods, images_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeliveryGoods, specs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeliveryGoods, unit_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeliveryNode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeliveryNode, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeliveryNode, ware_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeliveryNode, address_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeliveryNode, user_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeliveryNode, user_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeliveryNode, user_level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeliveryNode, user_images_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeliveryNode, brife_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeliveryNode, count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeliveryNode, state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeliveryNode, sign_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeliveryNode, goods_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WareGroup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WareGroup, ware_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WareGroup, items_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListDeliveryTaskReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListDeliveryTaskReq, token_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListDeliveryTaskReq, coord_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListDeliveryTaskRep, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListDeliveryTaskRep, groups_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListDeliveryTaskRep, total_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkOptReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkOptReq, token_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkOptReq, type_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkOptRep, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkOptRep, type_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DriverInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DriverInfo, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DriverInfo, mobile_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DriverInfo, is_pass_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DriverInfo, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DriverInfo, id_number_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DriverInfo, driving_date_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DriverInfo, driving_photos_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DriverInfo, regions_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DriverInfo, car_licences_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DriverInfo, gen_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DriverInfo, auditing_msg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DriverInfo, car_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DriverInfo, car_number_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DriverInfo, car_owner_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DriverInfo, work_opt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DriverInfo, is_indep_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DriverLoginReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DriverLoginReq, mobile_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DriverLoginReq, pass_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DriverLoginReq, platform_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DriverLoginRep, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DriverLoginRep, token_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DriverLoginRep, info_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DriverRegisterReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DriverRegisterReq, token_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DriverRegisterReq, mobile_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DriverRegisterReq, pass_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DriverRegisterReq, code_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DriverRegisterRep, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DriverRegisterRep, token_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmitAuthInfoReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmitAuthInfoReq, token_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmitAuthInfoReq, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmitAuthInfoReq, id_number_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmitAuthInfoReq, driving_date_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmitAuthInfoReq, driving_photos_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmitAuthInfoReq, regions_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmitAuthInfoReq, car_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmitAuthInfoReq, car_number_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmitAuthInfoReq, car_owner_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmitAuthInfoReq, car_licences_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmitAuthInfoReq, is_indep_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmitAuthInfoRep, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmitAuthInfoRep, info_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDriverInfoReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDriverInfoReq, token_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDriverInfoRep, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDriverInfoRep, info_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateDriverStateReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateDriverStateReq, token_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateDriverStateReq, coord_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateDriverStateRep, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeliveryOrderInfoReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeliveryOrderInfoReq, token_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeliveryOrderInfoReq, ware_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeliveryOrderInfoRep, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeliveryOrderInfoRep, items_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeliveryOrderInfoRep, order_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeliveryOrderInfoRep, user_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeliveryOrderInfoRep, goods_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeliveryOrderInfoRep, is_trans_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfirmDeliveryReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfirmDeliveryReq, token_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfirmDeliveryReq, ware_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfirmDeliveryRep, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListDriverOrderReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListDriverOrderReq, token_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListDriverOrderReq, opt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListDriverOrderReq, skip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListDriverOrderReq, limit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListDriverOrderReq, beg_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListDriverOrderReq, end_time_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListDriverOrderRep, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListDriverOrderRep, items_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignReceivingReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignReceivingReq, token_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignReceivingReq, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignReceivingReq, is_exp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignReceivingReq, exp_desc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignReceivingReq, suggest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignReceivingReq, mark_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignReceivingReq, images_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignReceivingRep, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignReceivingRep, id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateDriverPassReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateDriverPassReq, token_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateDriverPassReq, code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateDriverPassReq, pass_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateDriverPassRep, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateDriverPassRep, info_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateDriverMobileReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateDriverMobileReq, login_token_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateDriverMobileReq, login_pass_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateDriverMobileReq, mobile_token_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateDriverMobileReq, mobile_code_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateDriverMobileRep, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateDriverMobileRep, info_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(SignInfo)},
  { 11, -1, sizeof(DeliveryGoods)},
  { 23, -1, sizeof(DeliveryNode)},
  { 40, -1, sizeof(WareGroup)},
  { 47, -1, sizeof(ListDeliveryTaskReq)},
  { 54, -1, sizeof(ListDeliveryTaskRep)},
  { 61, -1, sizeof(WorkOptReq)},
  { 68, -1, sizeof(WorkOptRep)},
  { 74, -1, sizeof(DriverInfo)},
  { 95, -1, sizeof(DriverLoginReq)},
  { 103, -1, sizeof(DriverLoginRep)},
  { 110, -1, sizeof(DriverRegisterReq)},
  { 119, -1, sizeof(DriverRegisterRep)},
  { 125, -1, sizeof(SubmitAuthInfoReq)},
  { 141, -1, sizeof(SubmitAuthInfoRep)},
  { 147, -1, sizeof(GetDriverInfoReq)},
  { 153, -1, sizeof(GetDriverInfoRep)},
  { 159, -1, sizeof(UpdateDriverStateReq)},
  { 166, -1, sizeof(UpdateDriverStateRep)},
  { 171, -1, sizeof(DeliveryOrderInfoReq)},
  { 178, -1, sizeof(DeliveryOrderInfoRep)},
  { 188, -1, sizeof(ConfirmDeliveryReq)},
  { 195, -1, sizeof(ConfirmDeliveryRep)},
  { 200, -1, sizeof(ListDriverOrderReq)},
  { 211, -1, sizeof(ListDriverOrderRep)},
  { 217, -1, sizeof(SignReceivingReq)},
  { 229, -1, sizeof(SignReceivingRep)},
  { 235, -1, sizeof(UpdateDriverPassReq)},
  { 243, -1, sizeof(UpdateDriverPassRep)},
  { 249, -1, sizeof(UpdateDriverMobileReq)},
  { 258, -1, sizeof(UpdateDriverMobileRep)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_SignInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DeliveryGoods_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DeliveryNode_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_WareGroup_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ListDeliveryTaskReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ListDeliveryTaskRep_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_WorkOptReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_WorkOptRep_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DriverInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DriverLoginReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DriverLoginRep_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DriverRegisterReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DriverRegisterRep_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SubmitAuthInfoReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SubmitAuthInfoRep_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetDriverInfoReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetDriverInfoRep_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_UpdateDriverStateReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_UpdateDriverStateRep_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DeliveryOrderInfoReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DeliveryOrderInfoRep_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ConfirmDeliveryReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ConfirmDeliveryRep_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ListDriverOrderReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ListDriverOrderRep_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SignReceivingReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SignReceivingRep_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_UpdateDriverPassReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_UpdateDriverPassRep_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_UpdateDriverMobileReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_UpdateDriverMobileRep_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "driver.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 31);
}

}  // namespace

void TableStruct::Shutdown() {
  _SignInfo_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _DeliveryGoods_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _DeliveryNode_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _WareGroup_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _ListDeliveryTaskReq_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _ListDeliveryTaskRep_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _WorkOptReq_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _WorkOptRep_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
  _DriverInfo_default_instance_.Shutdown();
  delete file_level_metadata[8].reflection;
  _DriverLoginReq_default_instance_.Shutdown();
  delete file_level_metadata[9].reflection;
  _DriverLoginRep_default_instance_.Shutdown();
  delete file_level_metadata[10].reflection;
  _DriverRegisterReq_default_instance_.Shutdown();
  delete file_level_metadata[11].reflection;
  _DriverRegisterRep_default_instance_.Shutdown();
  delete file_level_metadata[12].reflection;
  _SubmitAuthInfoReq_default_instance_.Shutdown();
  delete file_level_metadata[13].reflection;
  _SubmitAuthInfoRep_default_instance_.Shutdown();
  delete file_level_metadata[14].reflection;
  _GetDriverInfoReq_default_instance_.Shutdown();
  delete file_level_metadata[15].reflection;
  _GetDriverInfoRep_default_instance_.Shutdown();
  delete file_level_metadata[16].reflection;
  _UpdateDriverStateReq_default_instance_.Shutdown();
  delete file_level_metadata[17].reflection;
  _UpdateDriverStateRep_default_instance_.Shutdown();
  delete file_level_metadata[18].reflection;
  _DeliveryOrderInfoReq_default_instance_.Shutdown();
  delete file_level_metadata[19].reflection;
  _DeliveryOrderInfoRep_default_instance_.Shutdown();
  delete file_level_metadata[20].reflection;
  _ConfirmDeliveryReq_default_instance_.Shutdown();
  delete file_level_metadata[21].reflection;
  _ConfirmDeliveryRep_default_instance_.Shutdown();
  delete file_level_metadata[22].reflection;
  _ListDriverOrderReq_default_instance_.Shutdown();
  delete file_level_metadata[23].reflection;
  _ListDriverOrderRep_default_instance_.Shutdown();
  delete file_level_metadata[24].reflection;
  _SignReceivingReq_default_instance_.Shutdown();
  delete file_level_metadata[25].reflection;
  _SignReceivingRep_default_instance_.Shutdown();
  delete file_level_metadata[26].reflection;
  _UpdateDriverPassReq_default_instance_.Shutdown();
  delete file_level_metadata[27].reflection;
  _UpdateDriverPassRep_default_instance_.Shutdown();
  delete file_level_metadata[28].reflection;
  _UpdateDriverMobileReq_default_instance_.Shutdown();
  delete file_level_metadata[29].reflection;
  _UpdateDriverMobileRep_default_instance_.Shutdown();
  delete file_level_metadata[30].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::ttmall::protobuf_public_2eproto::InitDefaults();
  _SignInfo_default_instance_.DefaultConstruct();
  _DeliveryGoods_default_instance_.DefaultConstruct();
  _DeliveryNode_default_instance_.DefaultConstruct();
  _WareGroup_default_instance_.DefaultConstruct();
  _ListDeliveryTaskReq_default_instance_.DefaultConstruct();
  _ListDeliveryTaskRep_default_instance_.DefaultConstruct();
  _WorkOptReq_default_instance_.DefaultConstruct();
  _WorkOptRep_default_instance_.DefaultConstruct();
  _DriverInfo_default_instance_.DefaultConstruct();
  _DriverLoginReq_default_instance_.DefaultConstruct();
  _DriverLoginRep_default_instance_.DefaultConstruct();
  _DriverRegisterReq_default_instance_.DefaultConstruct();
  _DriverRegisterRep_default_instance_.DefaultConstruct();
  _SubmitAuthInfoReq_default_instance_.DefaultConstruct();
  _SubmitAuthInfoRep_default_instance_.DefaultConstruct();
  _GetDriverInfoReq_default_instance_.DefaultConstruct();
  _GetDriverInfoRep_default_instance_.DefaultConstruct();
  _UpdateDriverStateReq_default_instance_.DefaultConstruct();
  _UpdateDriverStateRep_default_instance_.DefaultConstruct();
  _DeliveryOrderInfoReq_default_instance_.DefaultConstruct();
  _DeliveryOrderInfoRep_default_instance_.DefaultConstruct();
  _ConfirmDeliveryReq_default_instance_.DefaultConstruct();
  _ConfirmDeliveryRep_default_instance_.DefaultConstruct();
  _ListDriverOrderReq_default_instance_.DefaultConstruct();
  _ListDriverOrderRep_default_instance_.DefaultConstruct();
  _SignReceivingReq_default_instance_.DefaultConstruct();
  _SignReceivingRep_default_instance_.DefaultConstruct();
  _UpdateDriverPassReq_default_instance_.DefaultConstruct();
  _UpdateDriverPassRep_default_instance_.DefaultConstruct();
  _UpdateDriverMobileReq_default_instance_.DefaultConstruct();
  _UpdateDriverMobileRep_default_instance_.DefaultConstruct();
  _DeliveryNode_default_instance_.get_mutable()->ware_info_ = const_cast< ::ttmall::WareInfo*>(
      ::ttmall::WareInfo::internal_default_instance());
  _DeliveryNode_default_instance_.get_mutable()->address_ = const_cast< ::ttmall::AddressInfo*>(
      ::ttmall::AddressInfo::internal_default_instance());
  _DeliveryNode_default_instance_.get_mutable()->sign_info_ = const_cast< ::ttmall::SignInfo*>(
      ::ttmall::SignInfo::internal_default_instance());
  _WareGroup_default_instance_.get_mutable()->ware_info_ = const_cast< ::ttmall::WareInfo*>(
      ::ttmall::WareInfo::internal_default_instance());
  _ListDeliveryTaskReq_default_instance_.get_mutable()->coord_ = const_cast< ::ttmall::CoordInfo*>(
      ::ttmall::CoordInfo::internal_default_instance());
  _DriverInfo_default_instance_.get_mutable()->car_info_ = const_cast< ::ttmall::CarInfo*>(
      ::ttmall::CarInfo::internal_default_instance());
  _DriverLoginRep_default_instance_.get_mutable()->info_ = const_cast< ::ttmall::DriverInfo*>(
      ::ttmall::DriverInfo::internal_default_instance());
  _SubmitAuthInfoRep_default_instance_.get_mutable()->info_ = const_cast< ::ttmall::DriverInfo*>(
      ::ttmall::DriverInfo::internal_default_instance());
  _GetDriverInfoRep_default_instance_.get_mutable()->info_ = const_cast< ::ttmall::DriverInfo*>(
      ::ttmall::DriverInfo::internal_default_instance());
  _UpdateDriverStateReq_default_instance_.get_mutable()->coord_ = const_cast< ::ttmall::CoordInfo*>(
      ::ttmall::CoordInfo::internal_default_instance());
  _UpdateDriverPassRep_default_instance_.get_mutable()->info_ = const_cast< ::ttmall::DriverInfo*>(
      ::ttmall::DriverInfo::internal_default_instance());
  _UpdateDriverMobileRep_default_instance_.get_mutable()->info_ = const_cast< ::ttmall::DriverInfo*>(
      ::ttmall::DriverInfo::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\014driver.proto\022\006ttmall\032\014public.proto\"|\n\010"
      "SignInfo\022\016\n\006is_exp\030\001 \001(\010\022\020\n\010exp_desc\030\002 \001"
      "(\t\022\017\n\007suggest\030\003 \001(\t\022\014\n\004mark\030\004 \001(\t\022!\n\006ima"
      "ges\030\005 \003(\0132\021.ttmall.ImageInfo\022\014\n\004time\030\006 \001"
      "(\003\"\205\001\n\rDeliveryGoods\022\n\n\002id\030\001 \001(\t\022\013\n\003key\030"
      "\002 \001(\t\022\r\n\005count\030\003 \001(\005\022\014\n\004name\030\004 \001(\t\022!\n\006im"
      "ages\030\005 \003(\0132\021.ttmall.ImageInfo\022\r\n\005specs\030\006"
      " \003(\t\022\014\n\004unit\030\007 \001(\t\"\324\002\n\014DeliveryNode\022\n\n\002i"
      "d\030\001 \001(\t\022#\n\tware_info\030\002 \001(\0132\020.ttmall.Ware"
      "Info\022$\n\007address\030\003 \001(\0132\023.ttmall.AddressIn"
      "fo\022\017\n\007user_id\030\004 \001(\t\022\021\n\tuser_name\030\005 \001(\t\022\022"
      "\n\nuser_level\030\006 \001(\005\022&\n\013user_images\030\007 \003(\0132"
      "\021.ttmall.ImageInfo\022\r\n\005brife\030\010 \001(\t\022\r\n\005cou"
      "nt\030\t \001(\005\022$\n\005state\030\n \001(\0162\025.ttmall.Deliver"
      "yState\022#\n\tsign_info\030\013 \001(\0132\020.ttmall.SignI"
      "nfo\022$\n\005goods\030\014 \003(\0132\025.ttmall.DeliveryGood"
      "s\"U\n\tWareGroup\022#\n\tware_info\030\001 \001(\0132\020.ttma"
      "ll.WareInfo\022#\n\005items\030\002 \003(\0132\024.ttmall.Deli"
      "veryNode\"F\n\023ListDeliveryTaskReq\022\r\n\005token"
      "\030\001 \001(\t\022 \n\005coord\030\002 \001(\0132\021.ttmall.CoordInfo"
      "\"G\n\023ListDeliveryTaskRep\022!\n\006groups\030\001 \003(\0132"
      "\021.ttmall.WareGroup\022\r\n\005total\030\002 \001(\005\">\n\nWor"
      "kOptReq\022\r\n\005token\030\001 \001(\t\022!\n\004type\030\002 \001(\0162\023.t"
      "tmall.WorkOptType\"/\n\nWorkOptRep\022!\n\004type\030"
      "\001 \001(\0162\023.ttmall.WorkOptType\"\231\003\n\nDriverInf"
      "o\022\n\n\002id\030\001 \001(\t\022\016\n\006mobile\030\002 \001(\t\022\017\n\007is_pass"
      "\030\003 \001(\010\022\014\n\004name\030\004 \001(\t\022\021\n\tid_number\030\005 \001(\t\022"
      "\024\n\014driving_date\030\006 \001(\t\022)\n\016driving_photos\030"
      "\007 \003(\0132\021.ttmall.ImageInfo\022(\n\014regions_info"
      "\030\010 \003(\0132\022.ttmall.RegionInfo\022\'\n\014car_licenc"
      "es\030\t \003(\0132\021.ttmall.ImageInfo\022\020\n\010gen_time\030"
      "\n \001(\003\022\024\n\014auditing_msg\030\013 \003(\t\022!\n\010car_info\030"
      "\014 \001(\0132\017.ttmall.CarInfo\022\022\n\ncar_number\030\r \001"
      "(\t\022\021\n\tcar_owner\030\016 \001(\t\022%\n\010work_opt\030\017 \001(\0162"
      "\023.ttmall.WorkOptType\022\020\n\010is_indep\030\020 \001(\010\"@"
      "\n\016DriverLoginReq\022\016\n\006mobile\030\001 \001(\t\022\014\n\004pass"
      "\030\002 \001(\t\022\020\n\010platform\030\003 \001(\t\"A\n\016DriverLoginR"
      "ep\022\r\n\005token\030\001 \001(\t\022 \n\004info\030\002 \001(\0132\022.ttmall"
      ".DriverInfo\"N\n\021DriverRegisterReq\022\r\n\005toke"
      "n\030\001 \001(\t\022\016\n\006mobile\030\002 \001(\t\022\014\n\004pass\030\003 \001(\t\022\014\n"
      "\004code\030\004 \001(\t\"\"\n\021DriverRegisterRep\022\r\n\005toke"
      "n\030\001 \001(\t\"\344\001\n\021SubmitAuthInfoReq\022\r\n\005token\030\001"
      " \001(\t\022\014\n\004name\030\002 \001(\t\022\021\n\tid_number\030\003 \001(\t\022\024\n"
      "\014driving_date\030\004 \001(\t\022\026\n\016driving_photos\030\005 "
      "\003(\014\022\022\n\nregions_id\030\006 \003(\t\022\016\n\006car_id\030\007 \001(\t\022"
      "\022\n\ncar_number\030\010 \001(\t\022\021\n\tcar_owner\030\t \001(\t\022\024"
      "\n\014car_licences\030\n \003(\014\022\020\n\010is_indep\030\013 \001(\010\"5"
      "\n\021SubmitAuthInfoRep\022 \n\004info\030\001 \001(\0132\022.ttma"
      "ll.DriverInfo\"!\n\020GetDriverInfoReq\022\r\n\005tok"
      "en\030\001 \001(\t\"4\n\020GetDriverInfoRep\022 \n\004info\030\001 \001"
      "(\0132\022.ttmall.DriverInfo\"G\n\024UpdateDriverSt"
      "ateReq\022\r\n\005token\030\001 \001(\t\022 \n\005coord\030\003 \001(\0132\021.t"
      "tmall.CoordInfo\"\026\n\024UpdateDriverStateRep\""
      "6\n\024DeliveryOrderInfoReq\022\r\n\005token\030\001 \001(\t\022\017"
      "\n\007ware_id\030\002 \001(\t\"\214\001\n\024DeliveryOrderInfoRep"
      "\022$\n\005items\030\001 \003(\0132\025.ttmall.DeliveryGoods\022\023"
      "\n\013order_count\030\002 \001(\005\022\022\n\nuser_count\030\003 \001(\005\022"
      "\023\n\013goods_count\030\004 \001(\005\022\020\n\010is_trans\030\005 \001(\010\"4"
      "\n\022ConfirmDeliveryReq\022\r\n\005token\030\001 \001(\t\022\017\n\007w"
      "are_id\030\002 \001(\t\"\024\n\022ConfirmDeliveryRep\"\215\001\n\022L"
      "istDriverOrderReq\022\r\n\005token\030\001 \001(\t\022\'\n\003opt\030"
      "\002 \001(\0162\032.ttmall.ListDriverOrderOpt\022\014\n\004ski"
      "p\030\003 \001(\005\022\r\n\005limit\030\004 \001(\005\022\020\n\010beg_time\030\005 \001(\003"
      "\022\020\n\010end_time\030\006 \001(\003\"9\n\022ListDriverOrderRep"
      "\022#\n\005items\030\001 \003(\0132\024.ttmall.DeliveryNode\"~\n"
      "\020SignReceivingReq\022\r\n\005token\030\001 \001(\t\022\n\n\002id\030\002"
      " \001(\t\022\016\n\006is_exp\030\003 \001(\010\022\020\n\010exp_desc\030\004 \001(\t\022\017"
      "\n\007suggest\030\005 \001(\t\022\014\n\004mark\030\006 \001(\t\022\016\n\006images\030"
      "\007 \003(\014\"\036\n\020SignReceivingRep\022\n\n\002id\030\001 \001(\t\"@\n"
      "\023UpdateDriverPassReq\022\r\n\005token\030\001 \001(\t\022\014\n\004c"
      "ode\030\002 \001(\t\022\014\n\004pass\030\003 \001(\t\"7\n\023UpdateDriverP"
      "assRep\022 \n\004info\030\001 \001(\0132\022.ttmall.DriverInfo"
      "\"k\n\025UpdateDriverMobileReq\022\023\n\013login_token"
      "\030\001 \001(\t\022\022\n\nlogin_pass\030\002 \001(\t\022\024\n\014mobile_tok"
      "en\030\003 \001(\t\022\023\n\013mobile_code\030\004 \001(\t\"9\n\025UpdateD"
      "riverMobileRep\022 \n\004info\030\001 \001(\0132\022.ttmall.Dr"
      "iverInfo*w\n\rDeliveryState\022\021\n\rDELIVERY_NO"
      "NE\020\000\022\020\n\014DELIVERY_NEW\020\001\022\024\n\020DELIVERY_LOADI"
      "NG\020\002\022\024\n\020DELIVERY_TRNSING\020\003\022\025\n\021DELIVERY_F"
      "INISHED\020\004*J\n\013WorkOptType\022\022\n\016WOTK_TYPE_NO"
      "NE\020\000\022\023\n\017WOTK_TYPE_START\020\001\022\022\n\016WOTK_TYPE_S"
      "TOP\020\002*\253\001\n\022ListDriverOrderOpt\022\030\n\024DRIVER_O"
      "RDER_OPT_ALL\020\000\022\034\n\030DRIVER_ORDER_OPT_LOADI"
      "NG\020\001\022\035\n\031DRIVER_ORDER_OPT_TRANSING\020\002\022\035\n\031D"
      "RIVER_ORDER_OPT_FINISHED\020\003\022\037\n\033DRIVER_ORD"
      "ER_OPT_EXPCEPTION\020\0042\336\n\n\rDriverService\022\?\n"
      "\013SetDeviceId\022\026.ttmall.SetDeviceIdReq\032\026.t"
      "tmall.SetDeviceIdRep\"\000\022T\n\022UpdateDriverMo"
      "bile\022\035.ttmall.UpdateDriverMobileReq\032\035.tt"
      "mall.UpdateDriverMobileRep\"\000\022E\n\rGetNewMe"
      "ssage\022\030.ttmall.GetNewMessageReq\032\030.ttmall"
      ".GetNewMessageRep\"\000\022H\n\016SetMessageRead\022\031."
      "ttmall.SetMessageReadReq\032\031.ttmall.SetMes"
      "sageReadRep\"\000\022E\n\rDeleteMessage\022\030.ttmall."
      "DeleteMessageReq\032\030.ttmall.DeleteMessageR"
      "ep\"\000\022\?\n\013ListMessage\022\026.ttmall.ListMessage"
      "Req\032\026.ttmall.ListMessageRep\"\000\022E\n\rSignRec"
      "eiving\022\030.ttmall.SignReceivingReq\032\030.ttmal"
      "l.SignReceivingRep\"\000\022K\n\017ListDriverOrder\022"
      "\032.ttmall.ListDriverOrderReq\032\032.ttmall.Lis"
      "tDriverOrderRep\"\000\022K\n\017ConfirmDelivery\022\032.t"
      "tmall.ConfirmDeliveryReq\032\032.ttmall.Confir"
      "mDeliveryRep\"\000\022Q\n\021DeliveryOrderInfo\022\034.tt"
      "mall.DeliveryOrderInfoReq\032\034.ttmall.Deliv"
      "eryOrderInfoRep\"\000\022N\n\020ListDeliveryTask\022\033."
      "ttmall.ListDeliveryTaskReq\032\033.ttmall.List"
      "DeliveryTaskRep\"\000\022K\n\013UpdateState\022\034.ttmal"
      "l.UpdateDriverStateReq\032\034.ttmall.UpdateDr"
      "iverStateRep\"\000\022E\n\rGetDriverInfo\022\030.ttmall"
      ".GetDriverInfoReq\032\030.ttmall.GetDriverInfo"
      "Rep\"\000\0226\n\nSetWorkOpt\022\022.ttmall.WorkOptReq\032"
      "\022.ttmall.WorkOptRep\"\000\022H\n\nUpdatePass\022\033.tt"
      "mall.UpdateDriverPassReq\032\033.ttmall.Update"
      "DriverPassRep\"\000\022:\n\014SendAuthCode\022\023.ttmall"
      ".SendAuthReq\032\023.ttmall.SendAuthRep\"\000\0229\n\005L"
      "ogin\022\026.ttmall.DriverLoginReq\032\026.ttmall.Dr"
      "iverLoginRep\"\000\022B\n\010Register\022\031.ttmall.Driv"
      "erRegisterReq\032\031.ttmall.DriverRegisterRep"
      "\"\000\022H\n\016SubmitAuthInfo\022\031.ttmall.SubmitAuth"
      "InfoReq\032\031.ttmall.SubmitAuthInfoRep\"\000b\006pr"
      "oto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 4804);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "driver.proto", &protobuf_RegisterTypes);
  ::ttmall::protobuf_public_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_driver_2eproto

const ::google::protobuf::EnumDescriptor* DeliveryState_descriptor() {
  protobuf_driver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_driver_2eproto::file_level_enum_descriptors[0];
}
bool DeliveryState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* WorkOptType_descriptor() {
  protobuf_driver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_driver_2eproto::file_level_enum_descriptors[1];
}
bool WorkOptType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ListDriverOrderOpt_descriptor() {
  protobuf_driver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_driver_2eproto::file_level_enum_descriptors[2];
}
bool ListDriverOrderOpt_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SignInfo::kIsExpFieldNumber;
const int SignInfo::kExpDescFieldNumber;
const int SignInfo::kSuggestFieldNumber;
const int SignInfo::kMarkFieldNumber;
const int SignInfo::kImagesFieldNumber;
const int SignInfo::kTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SignInfo::SignInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_driver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ttmall.SignInfo)
}
SignInfo::SignInfo(const SignInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      images_(from.images_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  exp_desc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.exp_desc().size() > 0) {
    exp_desc_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exp_desc_);
  }
  suggest_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.suggest().size() > 0) {
    suggest_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.suggest_);
  }
  mark_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.mark().size() > 0) {
    mark_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mark_);
  }
  ::memcpy(&time_, &from.time_,
    reinterpret_cast<char*>(&is_exp_) -
    reinterpret_cast<char*>(&time_) + sizeof(is_exp_));
  // @@protoc_insertion_point(copy_constructor:ttmall.SignInfo)
}

void SignInfo::SharedCtor() {
  exp_desc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  suggest_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mark_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&time_, 0, reinterpret_cast<char*>(&is_exp_) -
    reinterpret_cast<char*>(&time_) + sizeof(is_exp_));
  _cached_size_ = 0;
}

SignInfo::~SignInfo() {
  // @@protoc_insertion_point(destructor:ttmall.SignInfo)
  SharedDtor();
}

void SignInfo::SharedDtor() {
  exp_desc_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  suggest_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mark_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SignInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SignInfo::descriptor() {
  protobuf_driver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_driver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SignInfo& SignInfo::default_instance() {
  protobuf_driver_2eproto::InitDefaults();
  return *internal_default_instance();
}

SignInfo* SignInfo::New(::google::protobuf::Arena* arena) const {
  SignInfo* n = new SignInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SignInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:ttmall.SignInfo)
  images_.Clear();
  exp_desc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  suggest_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mark_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&time_, 0, reinterpret_cast<char*>(&is_exp_) -
    reinterpret_cast<char*>(&time_) + sizeof(is_exp_));
}

bool SignInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ttmall.SignInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool is_exp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_exp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string exp_desc = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exp_desc()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->exp_desc().data(), this->exp_desc().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ttmall.SignInfo.exp_desc"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string suggest = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_suggest()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->suggest().data(), this->suggest().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ttmall.SignInfo.suggest"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string mark = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mark()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->mark().data(), this->mark().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ttmall.SignInfo.mark"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ttmall.ImageInfo images = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_images()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 time = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ttmall.SignInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ttmall.SignInfo)
  return false;
#undef DO_
}

void SignInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ttmall.SignInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_exp = 1;
  if (this->is_exp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_exp(), output);
  }

  // string exp_desc = 2;
  if (this->exp_desc().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->exp_desc().data(), this->exp_desc().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ttmall.SignInfo.exp_desc");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->exp_desc(), output);
  }

  // string suggest = 3;
  if (this->suggest().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->suggest().data(), this->suggest().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ttmall.SignInfo.suggest");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->suggest(), output);
  }

  // string mark = 4;
  if (this->mark().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->mark().data(), this->mark().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ttmall.SignInfo.mark");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->mark(), output);
  }

  // repeated .ttmall.ImageInfo images = 5;
  for (unsigned int i = 0, n = this->images_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->images(i), output);
  }

  // int64 time = 6;
  if (this->time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->time(), output);
  }

  // @@protoc_insertion_point(serialize_end:ttmall.SignInfo)
}

::google::protobuf::uint8* SignInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ttmall.SignInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_exp = 1;
  if (this->is_exp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_exp(), target);
  }

  // string exp_desc = 2;
  if (this->exp_desc().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->exp_desc().data(), this->exp_desc().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ttmall.SignInfo.exp_desc");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->exp_desc(), target);
  }

  // string suggest = 3;
  if (this->suggest().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->suggest().data(), this->suggest().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ttmall.SignInfo.suggest");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->suggest(), target);
  }

  // string mark = 4;
  if (this->mark().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->mark().data(), this->mark().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ttmall.SignInfo.mark");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->mark(), target);
  }

  // repeated .ttmall.ImageInfo images = 5;
  for (unsigned int i = 0, n = this->images_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->images(i), deterministic, target);
  }

  // int64 time = 6;
  if (this->time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->time(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ttmall.SignInfo)
  return target;
}

size_t SignInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ttmall.SignInfo)
  size_t total_size = 0;

  // repeated .ttmall.ImageInfo images = 5;
  {
    unsigned int count = this->images_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->images(i));
    }
  }

  // string exp_desc = 2;
  if (this->exp_desc().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->exp_desc());
  }

  // string suggest = 3;
  if (this->suggest().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->suggest());
  }

  // string mark = 4;
  if (this->mark().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->mark());
  }

  // int64 time = 6;
  if (this->time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->time());
  }

  // bool is_exp = 1;
  if (this->is_exp() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SignInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ttmall.SignInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SignInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SignInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ttmall.SignInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ttmall.SignInfo)
    MergeFrom(*source);
  }
}

void SignInfo::MergeFrom(const SignInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ttmall.SignInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  images_.MergeFrom(from.images_);
  if (from.exp_desc().size() > 0) {

    exp_desc_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exp_desc_);
  }
  if (from.suggest().size() > 0) {

    suggest_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.suggest_);
  }
  if (from.mark().size() > 0) {

    mark_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mark_);
  }
  if (from.time() != 0) {
    set_time(from.time());
  }
  if (from.is_exp() != 0) {
    set_is_exp(from.is_exp());
  }
}

void SignInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ttmall.SignInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SignInfo::CopyFrom(const SignInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ttmall.SignInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignInfo::IsInitialized() const {
  return true;
}

void SignInfo::Swap(SignInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SignInfo::InternalSwap(SignInfo* other) {
  images_.InternalSwap(&other->images_);
  exp_desc_.Swap(&other->exp_desc_);
  suggest_.Swap(&other->suggest_);
  mark_.Swap(&other->mark_);
  std::swap(time_, other->time_);
  std::swap(is_exp_, other->is_exp_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SignInfo::GetMetadata() const {
  protobuf_driver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_driver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SignInfo

// bool is_exp = 1;
void SignInfo::clear_is_exp() {
  is_exp_ = false;
}
bool SignInfo::is_exp() const {
  // @@protoc_insertion_point(field_get:ttmall.SignInfo.is_exp)
  return is_exp_;
}
void SignInfo::set_is_exp(bool value) {
  
  is_exp_ = value;
  // @@protoc_insertion_point(field_set:ttmall.SignInfo.is_exp)
}

// string exp_desc = 2;
void SignInfo::clear_exp_desc() {
  exp_desc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SignInfo::exp_desc() const {
  // @@protoc_insertion_point(field_get:ttmall.SignInfo.exp_desc)
  return exp_desc_.GetNoArena();
}
void SignInfo::set_exp_desc(const ::std::string& value) {
  
  exp_desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ttmall.SignInfo.exp_desc)
}
#if LANG_CXX11
void SignInfo::set_exp_desc(::std::string&& value) {
  
  exp_desc_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ttmall.SignInfo.exp_desc)
}
#endif
void SignInfo::set_exp_desc(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  exp_desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ttmall.SignInfo.exp_desc)
}
void SignInfo::set_exp_desc(const char* value, size_t size) {
  
  exp_desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ttmall.SignInfo.exp_desc)
}
::std::string* SignInfo::mutable_exp_desc() {
  
  // @@protoc_insertion_point(field_mutable:ttmall.SignInfo.exp_desc)
  return exp_desc_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SignInfo::release_exp_desc() {
  // @@protoc_insertion_point(field_release:ttmall.SignInfo.exp_desc)
  
  return exp_desc_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SignInfo::set_allocated_exp_desc(::std::string* exp_desc) {
  if (exp_desc != NULL) {
    
  } else {
    
  }
  exp_desc_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exp_desc);
  // @@protoc_insertion_point(field_set_allocated:ttmall.SignInfo.exp_desc)
}

// string suggest = 3;
void SignInfo::clear_suggest() {
  suggest_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SignInfo::suggest() const {
  // @@protoc_insertion_point(field_get:ttmall.SignInfo.suggest)
  return suggest_.GetNoArena();
}
void SignInfo::set_suggest(const ::std::string& value) {
  
  suggest_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ttmall.SignInfo.suggest)
}
#if LANG_CXX11
void SignInfo::set_suggest(::std::string&& value) {
  
  suggest_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ttmall.SignInfo.suggest)
}
#endif
void SignInfo::set_suggest(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  suggest_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ttmall.SignInfo.suggest)
}
void SignInfo::set_suggest(const char* value, size_t size) {
  
  suggest_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ttmall.SignInfo.suggest)
}
::std::string* SignInfo::mutable_suggest() {
  
  // @@protoc_insertion_point(field_mutable:ttmall.SignInfo.suggest)
  return suggest_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SignInfo::release_suggest() {
  // @@protoc_insertion_point(field_release:ttmall.SignInfo.suggest)
  
  return suggest_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SignInfo::set_allocated_suggest(::std::string* suggest) {
  if (suggest != NULL) {
    
  } else {
    
  }
  suggest_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), suggest);
  // @@protoc_insertion_point(field_set_allocated:ttmall.SignInfo.suggest)
}

// string mark = 4;
void SignInfo::clear_mark() {
  mark_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SignInfo::mark() const {
  // @@protoc_insertion_point(field_get:ttmall.SignInfo.mark)
  return mark_.GetNoArena();
}
void SignInfo::set_mark(const ::std::string& value) {
  
  mark_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ttmall.SignInfo.mark)
}
#if LANG_CXX11
void SignInfo::set_mark(::std::string&& value) {
  
  mark_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ttmall.SignInfo.mark)
}
#endif
void SignInfo::set_mark(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  mark_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ttmall.SignInfo.mark)
}
void SignInfo::set_mark(const char* value, size_t size) {
  
  mark_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ttmall.SignInfo.mark)
}
::std::string* SignInfo::mutable_mark() {
  
  // @@protoc_insertion_point(field_mutable:ttmall.SignInfo.mark)
  return mark_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SignInfo::release_mark() {
  // @@protoc_insertion_point(field_release:ttmall.SignInfo.mark)
  
  return mark_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SignInfo::set_allocated_mark(::std::string* mark) {
  if (mark != NULL) {
    
  } else {
    
  }
  mark_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mark);
  // @@protoc_insertion_point(field_set_allocated:ttmall.SignInfo.mark)
}

// repeated .ttmall.ImageInfo images = 5;
int SignInfo::images_size() const {
  return images_.size();
}
void SignInfo::clear_images() {
  images_.Clear();
}
const ::ttmall::ImageInfo& SignInfo::images(int index) const {
  // @@protoc_insertion_point(field_get:ttmall.SignInfo.images)
  return images_.Get(index);
}
::ttmall::ImageInfo* SignInfo::mutable_images(int index) {
  // @@protoc_insertion_point(field_mutable:ttmall.SignInfo.images)
  return images_.Mutable(index);
}
::ttmall::ImageInfo* SignInfo::add_images() {
  // @@protoc_insertion_point(field_add:ttmall.SignInfo.images)
  return images_.Add();
}
::google::protobuf::RepeatedPtrField< ::ttmall::ImageInfo >*
SignInfo::mutable_images() {
  // @@protoc_insertion_point(field_mutable_list:ttmall.SignInfo.images)
  return &images_;
}
const ::google::protobuf::RepeatedPtrField< ::ttmall::ImageInfo >&
SignInfo::images() const {
  // @@protoc_insertion_point(field_list:ttmall.SignInfo.images)
  return images_;
}

// int64 time = 6;
void SignInfo::clear_time() {
  time_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 SignInfo::time() const {
  // @@protoc_insertion_point(field_get:ttmall.SignInfo.time)
  return time_;
}
void SignInfo::set_time(::google::protobuf::int64 value) {
  
  time_ = value;
  // @@protoc_insertion_point(field_set:ttmall.SignInfo.time)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeliveryGoods::kIdFieldNumber;
const int DeliveryGoods::kKeyFieldNumber;
const int DeliveryGoods::kCountFieldNumber;
const int DeliveryGoods::kNameFieldNumber;
const int DeliveryGoods::kImagesFieldNumber;
const int DeliveryGoods::kSpecsFieldNumber;
const int DeliveryGoods::kUnitFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeliveryGoods::DeliveryGoods()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_driver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ttmall.DeliveryGoods)
}
DeliveryGoods::DeliveryGoods(const DeliveryGoods& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      images_(from.images_),
      specs_(from.specs_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.id().size() > 0) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.key().size() > 0) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  unit_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.unit().size() > 0) {
    unit_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.unit_);
  }
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:ttmall.DeliveryGoods)
}

void DeliveryGoods::SharedCtor() {
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  unit_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  count_ = 0;
  _cached_size_ = 0;
}

DeliveryGoods::~DeliveryGoods() {
  // @@protoc_insertion_point(destructor:ttmall.DeliveryGoods)
  SharedDtor();
}

void DeliveryGoods::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  unit_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DeliveryGoods::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeliveryGoods::descriptor() {
  protobuf_driver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_driver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DeliveryGoods& DeliveryGoods::default_instance() {
  protobuf_driver_2eproto::InitDefaults();
  return *internal_default_instance();
}

DeliveryGoods* DeliveryGoods::New(::google::protobuf::Arena* arena) const {
  DeliveryGoods* n = new DeliveryGoods;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DeliveryGoods::Clear() {
// @@protoc_insertion_point(message_clear_start:ttmall.DeliveryGoods)
  images_.Clear();
  specs_.Clear();
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  unit_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  count_ = 0;
}

bool DeliveryGoods::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ttmall.DeliveryGoods)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ttmall.DeliveryGoods.id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string key = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ttmall.DeliveryGoods.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 count = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ttmall.DeliveryGoods.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ttmall.ImageInfo images = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_images()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string specs = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_specs()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->specs(this->specs_size() - 1).data(),
            this->specs(this->specs_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ttmall.DeliveryGoods.specs"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string unit = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_unit()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->unit().data(), this->unit().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ttmall.DeliveryGoods.unit"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ttmall.DeliveryGoods)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ttmall.DeliveryGoods)
  return false;
#undef DO_
}

void DeliveryGoods::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ttmall.DeliveryGoods)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ttmall.DeliveryGoods.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // string key = 2;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ttmall.DeliveryGoods.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->key(), output);
  }

  // int32 count = 3;
  if (this->count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->count(), output);
  }

  // string name = 4;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ttmall.DeliveryGoods.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->name(), output);
  }

  // repeated .ttmall.ImageInfo images = 5;
  for (unsigned int i = 0, n = this->images_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->images(i), output);
  }

  // repeated string specs = 6;
  for (int i = 0, n = this->specs_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->specs(i).data(), this->specs(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ttmall.DeliveryGoods.specs");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->specs(i), output);
  }

  // string unit = 7;
  if (this->unit().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->unit().data(), this->unit().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ttmall.DeliveryGoods.unit");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->unit(), output);
  }

  // @@protoc_insertion_point(serialize_end:ttmall.DeliveryGoods)
}

::google::protobuf::uint8* DeliveryGoods::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ttmall.DeliveryGoods)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ttmall.DeliveryGoods.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // string key = 2;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ttmall.DeliveryGoods.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->key(), target);
  }

  // int32 count = 3;
  if (this->count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->count(), target);
  }

  // string name = 4;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ttmall.DeliveryGoods.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->name(), target);
  }

  // repeated .ttmall.ImageInfo images = 5;
  for (unsigned int i = 0, n = this->images_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->images(i), deterministic, target);
  }

  // repeated string specs = 6;
  for (int i = 0, n = this->specs_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->specs(i).data(), this->specs(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ttmall.DeliveryGoods.specs");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(6, this->specs(i), target);
  }

  // string unit = 7;
  if (this->unit().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->unit().data(), this->unit().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ttmall.DeliveryGoods.unit");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->unit(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ttmall.DeliveryGoods)
  return target;
}

size_t DeliveryGoods::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ttmall.DeliveryGoods)
  size_t total_size = 0;

  // repeated .ttmall.ImageInfo images = 5;
  {
    unsigned int count = this->images_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->images(i));
    }
  }

  // repeated string specs = 6;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->specs_size());
  for (int i = 0, n = this->specs_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->specs(i));
  }

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  // string key = 2;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key());
  }

  // string name = 4;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string unit = 7;
  if (this->unit().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->unit());
  }

  // int32 count = 3;
  if (this->count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->count());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeliveryGoods::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ttmall.DeliveryGoods)
  GOOGLE_DCHECK_NE(&from, this);
  const DeliveryGoods* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DeliveryGoods>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ttmall.DeliveryGoods)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ttmall.DeliveryGoods)
    MergeFrom(*source);
  }
}

void DeliveryGoods::MergeFrom(const DeliveryGoods& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ttmall.DeliveryGoods)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  images_.MergeFrom(from.images_);
  specs_.MergeFrom(from.specs_);
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.unit().size() > 0) {

    unit_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.unit_);
  }
  if (from.count() != 0) {
    set_count(from.count());
  }
}

void DeliveryGoods::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ttmall.DeliveryGoods)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeliveryGoods::CopyFrom(const DeliveryGoods& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ttmall.DeliveryGoods)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeliveryGoods::IsInitialized() const {
  return true;
}

void DeliveryGoods::Swap(DeliveryGoods* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeliveryGoods::InternalSwap(DeliveryGoods* other) {
  images_.InternalSwap(&other->images_);
  specs_.InternalSwap(&other->specs_);
  id_.Swap(&other->id_);
  key_.Swap(&other->key_);
  name_.Swap(&other->name_);
  unit_.Swap(&other->unit_);
  std::swap(count_, other->count_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DeliveryGoods::GetMetadata() const {
  protobuf_driver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_driver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DeliveryGoods

// string id = 1;
void DeliveryGoods::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DeliveryGoods::id() const {
  // @@protoc_insertion_point(field_get:ttmall.DeliveryGoods.id)
  return id_.GetNoArena();
}
void DeliveryGoods::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ttmall.DeliveryGoods.id)
}
#if LANG_CXX11
void DeliveryGoods::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ttmall.DeliveryGoods.id)
}
#endif
void DeliveryGoods::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ttmall.DeliveryGoods.id)
}
void DeliveryGoods::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ttmall.DeliveryGoods.id)
}
::std::string* DeliveryGoods::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:ttmall.DeliveryGoods.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DeliveryGoods::release_id() {
  // @@protoc_insertion_point(field_release:ttmall.DeliveryGoods.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DeliveryGoods::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:ttmall.DeliveryGoods.id)
}

// string key = 2;
void DeliveryGoods::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DeliveryGoods::key() const {
  // @@protoc_insertion_point(field_get:ttmall.DeliveryGoods.key)
  return key_.GetNoArena();
}
void DeliveryGoods::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ttmall.DeliveryGoods.key)
}
#if LANG_CXX11
void DeliveryGoods::set_key(::std::string&& value) {
  
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ttmall.DeliveryGoods.key)
}
#endif
void DeliveryGoods::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ttmall.DeliveryGoods.key)
}
void DeliveryGoods::set_key(const char* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ttmall.DeliveryGoods.key)
}
::std::string* DeliveryGoods::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:ttmall.DeliveryGoods.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DeliveryGoods::release_key() {
  // @@protoc_insertion_point(field_release:ttmall.DeliveryGoods.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DeliveryGoods::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:ttmall.DeliveryGoods.key)
}

// int32 count = 3;
void DeliveryGoods::clear_count() {
  count_ = 0;
}
::google::protobuf::int32 DeliveryGoods::count() const {
  // @@protoc_insertion_point(field_get:ttmall.DeliveryGoods.count)
  return count_;
}
void DeliveryGoods::set_count(::google::protobuf::int32 value) {
  
  count_ = value;
  // @@protoc_insertion_point(field_set:ttmall.DeliveryGoods.count)
}

// string name = 4;
void DeliveryGoods::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DeliveryGoods::name() const {
  // @@protoc_insertion_point(field_get:ttmall.DeliveryGoods.name)
  return name_.GetNoArena();
}
void DeliveryGoods::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ttmall.DeliveryGoods.name)
}
#if LANG_CXX11
void DeliveryGoods::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ttmall.DeliveryGoods.name)
}
#endif
void DeliveryGoods::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ttmall.DeliveryGoods.name)
}
void DeliveryGoods::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ttmall.DeliveryGoods.name)
}
::std::string* DeliveryGoods::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:ttmall.DeliveryGoods.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DeliveryGoods::release_name() {
  // @@protoc_insertion_point(field_release:ttmall.DeliveryGoods.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DeliveryGoods::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:ttmall.DeliveryGoods.name)
}

// repeated .ttmall.ImageInfo images = 5;
int DeliveryGoods::images_size() const {
  return images_.size();
}
void DeliveryGoods::clear_images() {
  images_.Clear();
}
const ::ttmall::ImageInfo& DeliveryGoods::images(int index) const {
  // @@protoc_insertion_point(field_get:ttmall.DeliveryGoods.images)
  return images_.Get(index);
}
::ttmall::ImageInfo* DeliveryGoods::mutable_images(int index) {
  // @@protoc_insertion_point(field_mutable:ttmall.DeliveryGoods.images)
  return images_.Mutable(index);
}
::ttmall::ImageInfo* DeliveryGoods::add_images() {
  // @@protoc_insertion_point(field_add:ttmall.DeliveryGoods.images)
  return images_.Add();
}
::google::protobuf::RepeatedPtrField< ::ttmall::ImageInfo >*
DeliveryGoods::mutable_images() {
  // @@protoc_insertion_point(field_mutable_list:ttmall.DeliveryGoods.images)
  return &images_;
}
const ::google::protobuf::RepeatedPtrField< ::ttmall::ImageInfo >&
DeliveryGoods::images() const {
  // @@protoc_insertion_point(field_list:ttmall.DeliveryGoods.images)
  return images_;
}

// repeated string specs = 6;
int DeliveryGoods::specs_size() const {
  return specs_.size();
}
void DeliveryGoods::clear_specs() {
  specs_.Clear();
}
const ::std::string& DeliveryGoods::specs(int index) const {
  // @@protoc_insertion_point(field_get:ttmall.DeliveryGoods.specs)
  return specs_.Get(index);
}
::std::string* DeliveryGoods::mutable_specs(int index) {
  // @@protoc_insertion_point(field_mutable:ttmall.DeliveryGoods.specs)
  return specs_.Mutable(index);
}
void DeliveryGoods::set_specs(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ttmall.DeliveryGoods.specs)
  specs_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void DeliveryGoods::set_specs(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ttmall.DeliveryGoods.specs)
  specs_.Mutable(index)->assign(std::move(value));
}
#endif
void DeliveryGoods::set_specs(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  specs_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ttmall.DeliveryGoods.specs)
}
void DeliveryGoods::set_specs(int index, const char* value, size_t size) {
  specs_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ttmall.DeliveryGoods.specs)
}
::std::string* DeliveryGoods::add_specs() {
  // @@protoc_insertion_point(field_add_mutable:ttmall.DeliveryGoods.specs)
  return specs_.Add();
}
void DeliveryGoods::add_specs(const ::std::string& value) {
  specs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ttmall.DeliveryGoods.specs)
}
#if LANG_CXX11
void DeliveryGoods::add_specs(::std::string&& value) {
  specs_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ttmall.DeliveryGoods.specs)
}
#endif
void DeliveryGoods::add_specs(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  specs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ttmall.DeliveryGoods.specs)
}
void DeliveryGoods::add_specs(const char* value, size_t size) {
  specs_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ttmall.DeliveryGoods.specs)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
DeliveryGoods::specs() const {
  // @@protoc_insertion_point(field_list:ttmall.DeliveryGoods.specs)
  return specs_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
DeliveryGoods::mutable_specs() {
  // @@protoc_insertion_point(field_mutable_list:ttmall.DeliveryGoods.specs)
  return &specs_;
}

// string unit = 7;
void DeliveryGoods::clear_unit() {
  unit_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DeliveryGoods::unit() const {
  // @@protoc_insertion_point(field_get:ttmall.DeliveryGoods.unit)
  return unit_.GetNoArena();
}
void DeliveryGoods::set_unit(const ::std::string& value) {
  
  unit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ttmall.DeliveryGoods.unit)
}
#if LANG_CXX11
void DeliveryGoods::set_unit(::std::string&& value) {
  
  unit_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ttmall.DeliveryGoods.unit)
}
#endif
void DeliveryGoods::set_unit(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  unit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ttmall.DeliveryGoods.unit)
}
void DeliveryGoods::set_unit(const char* value, size_t size) {
  
  unit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ttmall.DeliveryGoods.unit)
}
::std::string* DeliveryGoods::mutable_unit() {
  
  // @@protoc_insertion_point(field_mutable:ttmall.DeliveryGoods.unit)
  return unit_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DeliveryGoods::release_unit() {
  // @@protoc_insertion_point(field_release:ttmall.DeliveryGoods.unit)
  
  return unit_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DeliveryGoods::set_allocated_unit(::std::string* unit) {
  if (unit != NULL) {
    
  } else {
    
  }
  unit_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), unit);
  // @@protoc_insertion_point(field_set_allocated:ttmall.DeliveryGoods.unit)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeliveryNode::kIdFieldNumber;
const int DeliveryNode::kWareInfoFieldNumber;
const int DeliveryNode::kAddressFieldNumber;
const int DeliveryNode::kUserIdFieldNumber;
const int DeliveryNode::kUserNameFieldNumber;
const int DeliveryNode::kUserLevelFieldNumber;
const int DeliveryNode::kUserImagesFieldNumber;
const int DeliveryNode::kBrifeFieldNumber;
const int DeliveryNode::kCountFieldNumber;
const int DeliveryNode::kStateFieldNumber;
const int DeliveryNode::kSignInfoFieldNumber;
const int DeliveryNode::kGoodsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeliveryNode::DeliveryNode()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_driver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ttmall.DeliveryNode)
}
DeliveryNode::DeliveryNode(const DeliveryNode& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      user_images_(from.user_images_),
      goods_(from.goods_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.id().size() > 0) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.user_id().size() > 0) {
    user_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_id_);
  }
  user_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.user_name().size() > 0) {
    user_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_name_);
  }
  brife_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.brife().size() > 0) {
    brife_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.brife_);
  }
  if (from.has_ware_info()) {
    ware_info_ = new ::ttmall::WareInfo(*from.ware_info_);
  } else {
    ware_info_ = NULL;
  }
  if (from.has_address()) {
    address_ = new ::ttmall::AddressInfo(*from.address_);
  } else {
    address_ = NULL;
  }
  if (from.has_sign_info()) {
    sign_info_ = new ::ttmall::SignInfo(*from.sign_info_);
  } else {
    sign_info_ = NULL;
  }
  ::memcpy(&user_level_, &from.user_level_,
    reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&user_level_) + sizeof(state_));
  // @@protoc_insertion_point(copy_constructor:ttmall.DeliveryNode)
}

void DeliveryNode::SharedCtor() {
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  brife_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&ware_info_, 0, reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&ware_info_) + sizeof(state_));
  _cached_size_ = 0;
}

DeliveryNode::~DeliveryNode() {
  // @@protoc_insertion_point(destructor:ttmall.DeliveryNode)
  SharedDtor();
}

void DeliveryNode::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  brife_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete ware_info_;
  }
  if (this != internal_default_instance()) {
    delete address_;
  }
  if (this != internal_default_instance()) {
    delete sign_info_;
  }
}

void DeliveryNode::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeliveryNode::descriptor() {
  protobuf_driver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_driver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DeliveryNode& DeliveryNode::default_instance() {
  protobuf_driver_2eproto::InitDefaults();
  return *internal_default_instance();
}

DeliveryNode* DeliveryNode::New(::google::protobuf::Arena* arena) const {
  DeliveryNode* n = new DeliveryNode;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DeliveryNode::Clear() {
// @@protoc_insertion_point(message_clear_start:ttmall.DeliveryNode)
  user_images_.Clear();
  goods_.Clear();
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  brife_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && ware_info_ != NULL) {
    delete ware_info_;
  }
  ware_info_ = NULL;
  if (GetArenaNoVirtual() == NULL && address_ != NULL) {
    delete address_;
  }
  address_ = NULL;
  if (GetArenaNoVirtual() == NULL && sign_info_ != NULL) {
    delete sign_info_;
  }
  sign_info_ = NULL;
  ::memset(&user_level_, 0, reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&user_level_) + sizeof(state_));
}

bool DeliveryNode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ttmall.DeliveryNode)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ttmall.DeliveryNode.id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ttmall.WareInfo ware_info = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ware_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ttmall.AddressInfo address = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_address()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string user_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->user_id().data(), this->user_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ttmall.DeliveryNode.user_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string user_name = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->user_name().data(), this->user_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ttmall.DeliveryNode.user_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 user_level = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &user_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ttmall.ImageInfo user_images = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_user_images()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string brife = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_brife()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->brife().data(), this->brife().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ttmall.DeliveryNode.brife"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 count = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ttmall.DeliveryState state = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_state(static_cast< ::ttmall::DeliveryState >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ttmall.SignInfo sign_info = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sign_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ttmall.DeliveryGoods goods = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_goods()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ttmall.DeliveryNode)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ttmall.DeliveryNode)
  return false;
#undef DO_
}

void DeliveryNode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ttmall.DeliveryNode)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ttmall.DeliveryNode.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // .ttmall.WareInfo ware_info = 2;
  if (this->has_ware_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->ware_info_, output);
  }

  // .ttmall.AddressInfo address = 3;
  if (this->has_address()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->address_, output);
  }

  // string user_id = 4;
  if (this->user_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_id().data(), this->user_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ttmall.DeliveryNode.user_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->user_id(), output);
  }

  // string user_name = 5;
  if (this->user_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ttmall.DeliveryNode.user_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->user_name(), output);
  }

  // int32 user_level = 6;
  if (this->user_level() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->user_level(), output);
  }

  // repeated .ttmall.ImageInfo user_images = 7;
  for (unsigned int i = 0, n = this->user_images_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->user_images(i), output);
  }

  // string brife = 8;
  if (this->brife().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->brife().data(), this->brife().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ttmall.DeliveryNode.brife");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->brife(), output);
  }

  // int32 count = 9;
  if (this->count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->count(), output);
  }

  // .ttmall.DeliveryState state = 10;
  if (this->state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->state(), output);
  }

  // .ttmall.SignInfo sign_info = 11;
  if (this->has_sign_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *this->sign_info_, output);
  }

  // repeated .ttmall.DeliveryGoods goods = 12;
  for (unsigned int i = 0, n = this->goods_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->goods(i), output);
  }

  // @@protoc_insertion_point(serialize_end:ttmall.DeliveryNode)
}

::google::protobuf::uint8* DeliveryNode::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ttmall.DeliveryNode)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ttmall.DeliveryNode.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // .ttmall.WareInfo ware_info = 2;
  if (this->has_ware_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->ware_info_, deterministic, target);
  }

  // .ttmall.AddressInfo address = 3;
  if (this->has_address()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->address_, deterministic, target);
  }

  // string user_id = 4;
  if (this->user_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_id().data(), this->user_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ttmall.DeliveryNode.user_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->user_id(), target);
  }

  // string user_name = 5;
  if (this->user_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ttmall.DeliveryNode.user_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->user_name(), target);
  }

  // int32 user_level = 6;
  if (this->user_level() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->user_level(), target);
  }

  // repeated .ttmall.ImageInfo user_images = 7;
  for (unsigned int i = 0, n = this->user_images_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, this->user_images(i), deterministic, target);
  }

  // string brife = 8;
  if (this->brife().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->brife().data(), this->brife().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ttmall.DeliveryNode.brife");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->brife(), target);
  }

  // int32 count = 9;
  if (this->count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->count(), target);
  }

  // .ttmall.DeliveryState state = 10;
  if (this->state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->state(), target);
  }

  // .ttmall.SignInfo sign_info = 11;
  if (this->has_sign_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        11, *this->sign_info_, deterministic, target);
  }

  // repeated .ttmall.DeliveryGoods goods = 12;
  for (unsigned int i = 0, n = this->goods_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        12, this->goods(i), deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ttmall.DeliveryNode)
  return target;
}

size_t DeliveryNode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ttmall.DeliveryNode)
  size_t total_size = 0;

  // repeated .ttmall.ImageInfo user_images = 7;
  {
    unsigned int count = this->user_images_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user_images(i));
    }
  }

  // repeated .ttmall.DeliveryGoods goods = 12;
  {
    unsigned int count = this->goods_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->goods(i));
    }
  }

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  // string user_id = 4;
  if (this->user_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user_id());
  }

  // string user_name = 5;
  if (this->user_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user_name());
  }

  // string brife = 8;
  if (this->brife().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->brife());
  }

  // .ttmall.WareInfo ware_info = 2;
  if (this->has_ware_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->ware_info_);
  }

  // .ttmall.AddressInfo address = 3;
  if (this->has_address()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->address_);
  }

  // .ttmall.SignInfo sign_info = 11;
  if (this->has_sign_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->sign_info_);
  }

  // int32 user_level = 6;
  if (this->user_level() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->user_level());
  }

  // int32 count = 9;
  if (this->count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->count());
  }

  // .ttmall.DeliveryState state = 10;
  if (this->state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeliveryNode::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ttmall.DeliveryNode)
  GOOGLE_DCHECK_NE(&from, this);
  const DeliveryNode* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DeliveryNode>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ttmall.DeliveryNode)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ttmall.DeliveryNode)
    MergeFrom(*source);
  }
}

void DeliveryNode::MergeFrom(const DeliveryNode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ttmall.DeliveryNode)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  user_images_.MergeFrom(from.user_images_);
  goods_.MergeFrom(from.goods_);
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.user_id().size() > 0) {

    user_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_id_);
  }
  if (from.user_name().size() > 0) {

    user_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_name_);
  }
  if (from.brife().size() > 0) {

    brife_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.brife_);
  }
  if (from.has_ware_info()) {
    mutable_ware_info()->::ttmall::WareInfo::MergeFrom(from.ware_info());
  }
  if (from.has_address()) {
    mutable_address()->::ttmall::AddressInfo::MergeFrom(from.address());
  }
  if (from.has_sign_info()) {
    mutable_sign_info()->::ttmall::SignInfo::MergeFrom(from.sign_info());
  }
  if (from.user_level() != 0) {
    set_user_level(from.user_level());
  }
  if (from.count() != 0) {
    set_count(from.count());
  }
  if (from.state() != 0) {
    set_state(from.state());
  }
}

void DeliveryNode::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ttmall.DeliveryNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeliveryNode::CopyFrom(const DeliveryNode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ttmall.DeliveryNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeliveryNode::IsInitialized() const {
  return true;
}

void DeliveryNode::Swap(DeliveryNode* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeliveryNode::InternalSwap(DeliveryNode* other) {
  user_images_.InternalSwap(&other->user_images_);
  goods_.InternalSwap(&other->goods_);
  id_.Swap(&other->id_);
  user_id_.Swap(&other->user_id_);
  user_name_.Swap(&other->user_name_);
  brife_.Swap(&other->brife_);
  std::swap(ware_info_, other->ware_info_);
  std::swap(address_, other->address_);
  std::swap(sign_info_, other->sign_info_);
  std::swap(user_level_, other->user_level_);
  std::swap(count_, other->count_);
  std::swap(state_, other->state_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DeliveryNode::GetMetadata() const {
  protobuf_driver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_driver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DeliveryNode

// string id = 1;
void DeliveryNode::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DeliveryNode::id() const {
  // @@protoc_insertion_point(field_get:ttmall.DeliveryNode.id)
  return id_.GetNoArena();
}
void DeliveryNode::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ttmall.DeliveryNode.id)
}
#if LANG_CXX11
void DeliveryNode::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ttmall.DeliveryNode.id)
}
#endif
void DeliveryNode::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ttmall.DeliveryNode.id)
}
void DeliveryNode::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ttmall.DeliveryNode.id)
}
::std::string* DeliveryNode::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:ttmall.DeliveryNode.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DeliveryNode::release_id() {
  // @@protoc_insertion_point(field_release:ttmall.DeliveryNode.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DeliveryNode::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:ttmall.DeliveryNode.id)
}

// .ttmall.WareInfo ware_info = 2;
bool DeliveryNode::has_ware_info() const {
  return this != internal_default_instance() && ware_info_ != NULL;
}
void DeliveryNode::clear_ware_info() {
  if (GetArenaNoVirtual() == NULL && ware_info_ != NULL) delete ware_info_;
  ware_info_ = NULL;
}
const ::ttmall::WareInfo& DeliveryNode::ware_info() const {
  // @@protoc_insertion_point(field_get:ttmall.DeliveryNode.ware_info)
  return ware_info_ != NULL ? *ware_info_
                         : *::ttmall::WareInfo::internal_default_instance();
}
::ttmall::WareInfo* DeliveryNode::mutable_ware_info() {
  
  if (ware_info_ == NULL) {
    ware_info_ = new ::ttmall::WareInfo;
  }
  // @@protoc_insertion_point(field_mutable:ttmall.DeliveryNode.ware_info)
  return ware_info_;
}
::ttmall::WareInfo* DeliveryNode::release_ware_info() {
  // @@protoc_insertion_point(field_release:ttmall.DeliveryNode.ware_info)
  
  ::ttmall::WareInfo* temp = ware_info_;
  ware_info_ = NULL;
  return temp;
}
void DeliveryNode::set_allocated_ware_info(::ttmall::WareInfo* ware_info) {
  delete ware_info_;
  ware_info_ = ware_info;
  if (ware_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ttmall.DeliveryNode.ware_info)
}

// .ttmall.AddressInfo address = 3;
bool DeliveryNode::has_address() const {
  return this != internal_default_instance() && address_ != NULL;
}
void DeliveryNode::clear_address() {
  if (GetArenaNoVirtual() == NULL && address_ != NULL) delete address_;
  address_ = NULL;
}
const ::ttmall::AddressInfo& DeliveryNode::address() const {
  // @@protoc_insertion_point(field_get:ttmall.DeliveryNode.address)
  return address_ != NULL ? *address_
                         : *::ttmall::AddressInfo::internal_default_instance();
}
::ttmall::AddressInfo* DeliveryNode::mutable_address() {
  
  if (address_ == NULL) {
    address_ = new ::ttmall::AddressInfo;
  }
  // @@protoc_insertion_point(field_mutable:ttmall.DeliveryNode.address)
  return address_;
}
::ttmall::AddressInfo* DeliveryNode::release_address() {
  // @@protoc_insertion_point(field_release:ttmall.DeliveryNode.address)
  
  ::ttmall::AddressInfo* temp = address_;
  address_ = NULL;
  return temp;
}
void DeliveryNode::set_allocated_address(::ttmall::AddressInfo* address) {
  delete address_;
  address_ = address;
  if (address) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ttmall.DeliveryNode.address)
}

// string user_id = 4;
void DeliveryNode::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DeliveryNode::user_id() const {
  // @@protoc_insertion_point(field_get:ttmall.DeliveryNode.user_id)
  return user_id_.GetNoArena();
}
void DeliveryNode::set_user_id(const ::std::string& value) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ttmall.DeliveryNode.user_id)
}
#if LANG_CXX11
void DeliveryNode::set_user_id(::std::string&& value) {
  
  user_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ttmall.DeliveryNode.user_id)
}
#endif
void DeliveryNode::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ttmall.DeliveryNode.user_id)
}
void DeliveryNode::set_user_id(const char* value, size_t size) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ttmall.DeliveryNode.user_id)
}
::std::string* DeliveryNode::mutable_user_id() {
  
  // @@protoc_insertion_point(field_mutable:ttmall.DeliveryNode.user_id)
  return user_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DeliveryNode::release_user_id() {
  // @@protoc_insertion_point(field_release:ttmall.DeliveryNode.user_id)
  
  return user_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DeliveryNode::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    
  } else {
    
  }
  user_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:ttmall.DeliveryNode.user_id)
}

// string user_name = 5;
void DeliveryNode::clear_user_name() {
  user_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DeliveryNode::user_name() const {
  // @@protoc_insertion_point(field_get:ttmall.DeliveryNode.user_name)
  return user_name_.GetNoArena();
}
void DeliveryNode::set_user_name(const ::std::string& value) {
  
  user_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ttmall.DeliveryNode.user_name)
}
#if LANG_CXX11
void DeliveryNode::set_user_name(::std::string&& value) {
  
  user_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ttmall.DeliveryNode.user_name)
}
#endif
void DeliveryNode::set_user_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  user_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ttmall.DeliveryNode.user_name)
}
void DeliveryNode::set_user_name(const char* value, size_t size) {
  
  user_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ttmall.DeliveryNode.user_name)
}
::std::string* DeliveryNode::mutable_user_name() {
  
  // @@protoc_insertion_point(field_mutable:ttmall.DeliveryNode.user_name)
  return user_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DeliveryNode::release_user_name() {
  // @@protoc_insertion_point(field_release:ttmall.DeliveryNode.user_name)
  
  return user_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DeliveryNode::set_allocated_user_name(::std::string* user_name) {
  if (user_name != NULL) {
    
  } else {
    
  }
  user_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_name);
  // @@protoc_insertion_point(field_set_allocated:ttmall.DeliveryNode.user_name)
}

// int32 user_level = 6;
void DeliveryNode::clear_user_level() {
  user_level_ = 0;
}
::google::protobuf::int32 DeliveryNode::user_level() const {
  // @@protoc_insertion_point(field_get:ttmall.DeliveryNode.user_level)
  return user_level_;
}
void DeliveryNode::set_user_level(::google::protobuf::int32 value) {
  
  user_level_ = value;
  // @@protoc_insertion_point(field_set:ttmall.DeliveryNode.user_level)
}

// repeated .ttmall.ImageInfo user_images = 7;
int DeliveryNode::user_images_size() const {
  return user_images_.size();
}
void DeliveryNode::clear_user_images() {
  user_images_.Clear();
}
const ::ttmall::ImageInfo& DeliveryNode::user_images(int index) const {
  // @@protoc_insertion_point(field_get:ttmall.DeliveryNode.user_images)
  return user_images_.Get(index);
}
::ttmall::ImageInfo* DeliveryNode::mutable_user_images(int index) {
  // @@protoc_insertion_point(field_mutable:ttmall.DeliveryNode.user_images)
  return user_images_.Mutable(index);
}
::ttmall::ImageInfo* DeliveryNode::add_user_images() {
  // @@protoc_insertion_point(field_add:ttmall.DeliveryNode.user_images)
  return user_images_.Add();
}
::google::protobuf::RepeatedPtrField< ::ttmall::ImageInfo >*
DeliveryNode::mutable_user_images() {
  // @@protoc_insertion_point(field_mutable_list:ttmall.DeliveryNode.user_images)
  return &user_images_;
}
const ::google::protobuf::RepeatedPtrField< ::ttmall::ImageInfo >&
DeliveryNode::user_images() const {
  // @@protoc_insertion_point(field_list:ttmall.DeliveryNode.user_images)
  return user_images_;
}

// string brife = 8;
void DeliveryNode::clear_brife() {
  brife_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DeliveryNode::brife() const {
  // @@protoc_insertion_point(field_get:ttmall.DeliveryNode.brife)
  return brife_.GetNoArena();
}
void DeliveryNode::set_brife(const ::std::string& value) {
  
  brife_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ttmall.DeliveryNode.brife)
}
#if LANG_CXX11
void DeliveryNode::set_brife(::std::string&& value) {
  
  brife_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ttmall.DeliveryNode.brife)
}
#endif
void DeliveryNode::set_brife(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  brife_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ttmall.DeliveryNode.brife)
}
void DeliveryNode::set_brife(const char* value, size_t size) {
  
  brife_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ttmall.DeliveryNode.brife)
}
::std::string* DeliveryNode::mutable_brife() {
  
  // @@protoc_insertion_point(field_mutable:ttmall.DeliveryNode.brife)
  return brife_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DeliveryNode::release_brife() {
  // @@protoc_insertion_point(field_release:ttmall.DeliveryNode.brife)
  
  return brife_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DeliveryNode::set_allocated_brife(::std::string* brife) {
  if (brife != NULL) {
    
  } else {
    
  }
  brife_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), brife);
  // @@protoc_insertion_point(field_set_allocated:ttmall.DeliveryNode.brife)
}

// int32 count = 9;
void DeliveryNode::clear_count() {
  count_ = 0;
}
::google::protobuf::int32 DeliveryNode::count() const {
  // @@protoc_insertion_point(field_get:ttmall.DeliveryNode.count)
  return count_;
}
void DeliveryNode::set_count(::google::protobuf::int32 value) {
  
  count_ = value;
  // @@protoc_insertion_point(field_set:ttmall.DeliveryNode.count)
}

// .ttmall.DeliveryState state = 10;
void DeliveryNode::clear_state() {
  state_ = 0;
}
::ttmall::DeliveryState DeliveryNode::state() const {
  // @@protoc_insertion_point(field_get:ttmall.DeliveryNode.state)
  return static_cast< ::ttmall::DeliveryState >(state_);
}
void DeliveryNode::set_state(::ttmall::DeliveryState value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:ttmall.DeliveryNode.state)
}

// .ttmall.SignInfo sign_info = 11;
bool DeliveryNode::has_sign_info() const {
  return this != internal_default_instance() && sign_info_ != NULL;
}
void DeliveryNode::clear_sign_info() {
  if (GetArenaNoVirtual() == NULL && sign_info_ != NULL) delete sign_info_;
  sign_info_ = NULL;
}
const ::ttmall::SignInfo& DeliveryNode::sign_info() const {
  // @@protoc_insertion_point(field_get:ttmall.DeliveryNode.sign_info)
  return sign_info_ != NULL ? *sign_info_
                         : *::ttmall::SignInfo::internal_default_instance();
}
::ttmall::SignInfo* DeliveryNode::mutable_sign_info() {
  
  if (sign_info_ == NULL) {
    sign_info_ = new ::ttmall::SignInfo;
  }
  // @@protoc_insertion_point(field_mutable:ttmall.DeliveryNode.sign_info)
  return sign_info_;
}
::ttmall::SignInfo* DeliveryNode::release_sign_info() {
  // @@protoc_insertion_point(field_release:ttmall.DeliveryNode.sign_info)
  
  ::ttmall::SignInfo* temp = sign_info_;
  sign_info_ = NULL;
  return temp;
}
void DeliveryNode::set_allocated_sign_info(::ttmall::SignInfo* sign_info) {
  delete sign_info_;
  sign_info_ = sign_info;
  if (sign_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ttmall.DeliveryNode.sign_info)
}

// repeated .ttmall.DeliveryGoods goods = 12;
int DeliveryNode::goods_size() const {
  return goods_.size();
}
void DeliveryNode::clear_goods() {
  goods_.Clear();
}
const ::ttmall::DeliveryGoods& DeliveryNode::goods(int index) const {
  // @@protoc_insertion_point(field_get:ttmall.DeliveryNode.goods)
  return goods_.Get(index);
}
::ttmall::DeliveryGoods* DeliveryNode::mutable_goods(int index) {
  // @@protoc_insertion_point(field_mutable:ttmall.DeliveryNode.goods)
  return goods_.Mutable(index);
}
::ttmall::DeliveryGoods* DeliveryNode::add_goods() {
  // @@protoc_insertion_point(field_add:ttmall.DeliveryNode.goods)
  return goods_.Add();
}
::google::protobuf::RepeatedPtrField< ::ttmall::DeliveryGoods >*
DeliveryNode::mutable_goods() {
  // @@protoc_insertion_point(field_mutable_list:ttmall.DeliveryNode.goods)
  return &goods_;
}
const ::google::protobuf::RepeatedPtrField< ::ttmall::DeliveryGoods >&
DeliveryNode::goods() const {
  // @@protoc_insertion_point(field_list:ttmall.DeliveryNode.goods)
  return goods_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WareGroup::kWareInfoFieldNumber;
const int WareGroup::kItemsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WareGroup::WareGroup()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_driver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ttmall.WareGroup)
}
WareGroup::WareGroup(const WareGroup& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      items_(from.items_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_ware_info()) {
    ware_info_ = new ::ttmall::WareInfo(*from.ware_info_);
  } else {
    ware_info_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:ttmall.WareGroup)
}

void WareGroup::SharedCtor() {
  ware_info_ = NULL;
  _cached_size_ = 0;
}

WareGroup::~WareGroup() {
  // @@protoc_insertion_point(destructor:ttmall.WareGroup)
  SharedDtor();
}

void WareGroup::SharedDtor() {
  if (this != internal_default_instance()) {
    delete ware_info_;
  }
}

void WareGroup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WareGroup::descriptor() {
  protobuf_driver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_driver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const WareGroup& WareGroup::default_instance() {
  protobuf_driver_2eproto::InitDefaults();
  return *internal_default_instance();
}

WareGroup* WareGroup::New(::google::protobuf::Arena* arena) const {
  WareGroup* n = new WareGroup;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void WareGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:ttmall.WareGroup)
  items_.Clear();
  if (GetArenaNoVirtual() == NULL && ware_info_ != NULL) {
    delete ware_info_;
  }
  ware_info_ = NULL;
}

bool WareGroup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ttmall.WareGroup)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ttmall.WareInfo ware_info = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ware_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ttmall.DeliveryNode items = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ttmall.WareGroup)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ttmall.WareGroup)
  return false;
#undef DO_
}

void WareGroup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ttmall.WareGroup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ttmall.WareInfo ware_info = 1;
  if (this->has_ware_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->ware_info_, output);
  }

  // repeated .ttmall.DeliveryNode items = 2;
  for (unsigned int i = 0, n = this->items_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->items(i), output);
  }

  // @@protoc_insertion_point(serialize_end:ttmall.WareGroup)
}

::google::protobuf::uint8* WareGroup::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ttmall.WareGroup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ttmall.WareInfo ware_info = 1;
  if (this->has_ware_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->ware_info_, deterministic, target);
  }

  // repeated .ttmall.DeliveryNode items = 2;
  for (unsigned int i = 0, n = this->items_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->items(i), deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ttmall.WareGroup)
  return target;
}

size_t WareGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ttmall.WareGroup)
  size_t total_size = 0;

  // repeated .ttmall.DeliveryNode items = 2;
  {
    unsigned int count = this->items_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->items(i));
    }
  }

  // .ttmall.WareInfo ware_info = 1;
  if (this->has_ware_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->ware_info_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WareGroup::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ttmall.WareGroup)
  GOOGLE_DCHECK_NE(&from, this);
  const WareGroup* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const WareGroup>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ttmall.WareGroup)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ttmall.WareGroup)
    MergeFrom(*source);
  }
}

void WareGroup::MergeFrom(const WareGroup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ttmall.WareGroup)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  items_.MergeFrom(from.items_);
  if (from.has_ware_info()) {
    mutable_ware_info()->::ttmall::WareInfo::MergeFrom(from.ware_info());
  }
}

void WareGroup::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ttmall.WareGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WareGroup::CopyFrom(const WareGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ttmall.WareGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WareGroup::IsInitialized() const {
  return true;
}

void WareGroup::Swap(WareGroup* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WareGroup::InternalSwap(WareGroup* other) {
  items_.InternalSwap(&other->items_);
  std::swap(ware_info_, other->ware_info_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata WareGroup::GetMetadata() const {
  protobuf_driver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_driver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// WareGroup

// .ttmall.WareInfo ware_info = 1;
bool WareGroup::has_ware_info() const {
  return this != internal_default_instance() && ware_info_ != NULL;
}
void WareGroup::clear_ware_info() {
  if (GetArenaNoVirtual() == NULL && ware_info_ != NULL) delete ware_info_;
  ware_info_ = NULL;
}
const ::ttmall::WareInfo& WareGroup::ware_info() const {
  // @@protoc_insertion_point(field_get:ttmall.WareGroup.ware_info)
  return ware_info_ != NULL ? *ware_info_
                         : *::ttmall::WareInfo::internal_default_instance();
}
::ttmall::WareInfo* WareGroup::mutable_ware_info() {
  
  if (ware_info_ == NULL) {
    ware_info_ = new ::ttmall::WareInfo;
  }
  // @@protoc_insertion_point(field_mutable:ttmall.WareGroup.ware_info)
  return ware_info_;
}
::ttmall::WareInfo* WareGroup::release_ware_info() {
  // @@protoc_insertion_point(field_release:ttmall.WareGroup.ware_info)
  
  ::ttmall::WareInfo* temp = ware_info_;
  ware_info_ = NULL;
  return temp;
}
void WareGroup::set_allocated_ware_info(::ttmall::WareInfo* ware_info) {
  delete ware_info_;
  ware_info_ = ware_info;
  if (ware_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ttmall.WareGroup.ware_info)
}

// repeated .ttmall.DeliveryNode items = 2;
int WareGroup::items_size() const {
  return items_.size();
}
void WareGroup::clear_items() {
  items_.Clear();
}
const ::ttmall::DeliveryNode& WareGroup::items(int index) const {
  // @@protoc_insertion_point(field_get:ttmall.WareGroup.items)
  return items_.Get(index);
}
::ttmall::DeliveryNode* WareGroup::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:ttmall.WareGroup.items)
  return items_.Mutable(index);
}
::ttmall::DeliveryNode* WareGroup::add_items() {
  // @@protoc_insertion_point(field_add:ttmall.WareGroup.items)
  return items_.Add();
}
::google::protobuf::RepeatedPtrField< ::ttmall::DeliveryNode >*
WareGroup::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:ttmall.WareGroup.items)
  return &items_;
}
const ::google::protobuf::RepeatedPtrField< ::ttmall::DeliveryNode >&
WareGroup::items() const {
  // @@protoc_insertion_point(field_list:ttmall.WareGroup.items)
  return items_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ListDeliveryTaskReq::kTokenFieldNumber;
const int ListDeliveryTaskReq::kCoordFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ListDeliveryTaskReq::ListDeliveryTaskReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_driver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ttmall.ListDeliveryTaskReq)
}
ListDeliveryTaskReq::ListDeliveryTaskReq(const ListDeliveryTaskReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.token().size() > 0) {
    token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  if (from.has_coord()) {
    coord_ = new ::ttmall::CoordInfo(*from.coord_);
  } else {
    coord_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:ttmall.ListDeliveryTaskReq)
}

void ListDeliveryTaskReq::SharedCtor() {
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  coord_ = NULL;
  _cached_size_ = 0;
}

ListDeliveryTaskReq::~ListDeliveryTaskReq() {
  // @@protoc_insertion_point(destructor:ttmall.ListDeliveryTaskReq)
  SharedDtor();
}

void ListDeliveryTaskReq::SharedDtor() {
  token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete coord_;
  }
}

void ListDeliveryTaskReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListDeliveryTaskReq::descriptor() {
  protobuf_driver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_driver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ListDeliveryTaskReq& ListDeliveryTaskReq::default_instance() {
  protobuf_driver_2eproto::InitDefaults();
  return *internal_default_instance();
}

ListDeliveryTaskReq* ListDeliveryTaskReq::New(::google::protobuf::Arena* arena) const {
  ListDeliveryTaskReq* n = new ListDeliveryTaskReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ListDeliveryTaskReq::Clear() {
// @@protoc_insertion_point(message_clear_start:ttmall.ListDeliveryTaskReq)
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && coord_ != NULL) {
    delete coord_;
  }
  coord_ = NULL;
}

bool ListDeliveryTaskReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ttmall.ListDeliveryTaskReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string token = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ttmall.ListDeliveryTaskReq.token"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ttmall.CoordInfo coord = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_coord()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ttmall.ListDeliveryTaskReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ttmall.ListDeliveryTaskReq)
  return false;
#undef DO_
}

void ListDeliveryTaskReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ttmall.ListDeliveryTaskReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string token = 1;
  if (this->token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ttmall.ListDeliveryTaskReq.token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->token(), output);
  }

  // .ttmall.CoordInfo coord = 2;
  if (this->has_coord()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->coord_, output);
  }

  // @@protoc_insertion_point(serialize_end:ttmall.ListDeliveryTaskReq)
}

::google::protobuf::uint8* ListDeliveryTaskReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ttmall.ListDeliveryTaskReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string token = 1;
  if (this->token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ttmall.ListDeliveryTaskReq.token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->token(), target);
  }

  // .ttmall.CoordInfo coord = 2;
  if (this->has_coord()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->coord_, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ttmall.ListDeliveryTaskReq)
  return target;
}

size_t ListDeliveryTaskReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ttmall.ListDeliveryTaskReq)
  size_t total_size = 0;

  // string token = 1;
  if (this->token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->token());
  }

  // .ttmall.CoordInfo coord = 2;
  if (this->has_coord()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->coord_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListDeliveryTaskReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ttmall.ListDeliveryTaskReq)
  GOOGLE_DCHECK_NE(&from, this);
  const ListDeliveryTaskReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ListDeliveryTaskReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ttmall.ListDeliveryTaskReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ttmall.ListDeliveryTaskReq)
    MergeFrom(*source);
  }
}

void ListDeliveryTaskReq::MergeFrom(const ListDeliveryTaskReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ttmall.ListDeliveryTaskReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.token().size() > 0) {

    token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  if (from.has_coord()) {
    mutable_coord()->::ttmall::CoordInfo::MergeFrom(from.coord());
  }
}

void ListDeliveryTaskReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ttmall.ListDeliveryTaskReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListDeliveryTaskReq::CopyFrom(const ListDeliveryTaskReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ttmall.ListDeliveryTaskReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListDeliveryTaskReq::IsInitialized() const {
  return true;
}

void ListDeliveryTaskReq::Swap(ListDeliveryTaskReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ListDeliveryTaskReq::InternalSwap(ListDeliveryTaskReq* other) {
  token_.Swap(&other->token_);
  std::swap(coord_, other->coord_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ListDeliveryTaskReq::GetMetadata() const {
  protobuf_driver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_driver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ListDeliveryTaskReq

// string token = 1;
void ListDeliveryTaskReq::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ListDeliveryTaskReq::token() const {
  // @@protoc_insertion_point(field_get:ttmall.ListDeliveryTaskReq.token)
  return token_.GetNoArena();
}
void ListDeliveryTaskReq::set_token(const ::std::string& value) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ttmall.ListDeliveryTaskReq.token)
}
#if LANG_CXX11
void ListDeliveryTaskReq::set_token(::std::string&& value) {
  
  token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ttmall.ListDeliveryTaskReq.token)
}
#endif
void ListDeliveryTaskReq::set_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ttmall.ListDeliveryTaskReq.token)
}
void ListDeliveryTaskReq::set_token(const char* value, size_t size) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ttmall.ListDeliveryTaskReq.token)
}
::std::string* ListDeliveryTaskReq::mutable_token() {
  
  // @@protoc_insertion_point(field_mutable:ttmall.ListDeliveryTaskReq.token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ListDeliveryTaskReq::release_token() {
  // @@protoc_insertion_point(field_release:ttmall.ListDeliveryTaskReq.token)
  
  return token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ListDeliveryTaskReq::set_allocated_token(::std::string* token) {
  if (token != NULL) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:ttmall.ListDeliveryTaskReq.token)
}

// .ttmall.CoordInfo coord = 2;
bool ListDeliveryTaskReq::has_coord() const {
  return this != internal_default_instance() && coord_ != NULL;
}
void ListDeliveryTaskReq::clear_coord() {
  if (GetArenaNoVirtual() == NULL && coord_ != NULL) delete coord_;
  coord_ = NULL;
}
const ::ttmall::CoordInfo& ListDeliveryTaskReq::coord() const {
  // @@protoc_insertion_point(field_get:ttmall.ListDeliveryTaskReq.coord)
  return coord_ != NULL ? *coord_
                         : *::ttmall::CoordInfo::internal_default_instance();
}
::ttmall::CoordInfo* ListDeliveryTaskReq::mutable_coord() {
  
  if (coord_ == NULL) {
    coord_ = new ::ttmall::CoordInfo;
  }
  // @@protoc_insertion_point(field_mutable:ttmall.ListDeliveryTaskReq.coord)
  return coord_;
}
::ttmall::CoordInfo* ListDeliveryTaskReq::release_coord() {
  // @@protoc_insertion_point(field_release:ttmall.ListDeliveryTaskReq.coord)
  
  ::ttmall::CoordInfo* temp = coord_;
  coord_ = NULL;
  return temp;
}
void ListDeliveryTaskReq::set_allocated_coord(::ttmall::CoordInfo* coord) {
  delete coord_;
  coord_ = coord;
  if (coord) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ttmall.ListDeliveryTaskReq.coord)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ListDeliveryTaskRep::kGroupsFieldNumber;
const int ListDeliveryTaskRep::kTotalFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ListDeliveryTaskRep::ListDeliveryTaskRep()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_driver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ttmall.ListDeliveryTaskRep)
}
ListDeliveryTaskRep::ListDeliveryTaskRep(const ListDeliveryTaskRep& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      groups_(from.groups_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  total_ = from.total_;
  // @@protoc_insertion_point(copy_constructor:ttmall.ListDeliveryTaskRep)
}

void ListDeliveryTaskRep::SharedCtor() {
  total_ = 0;
  _cached_size_ = 0;
}

ListDeliveryTaskRep::~ListDeliveryTaskRep() {
  // @@protoc_insertion_point(destructor:ttmall.ListDeliveryTaskRep)
  SharedDtor();
}

void ListDeliveryTaskRep::SharedDtor() {
}

void ListDeliveryTaskRep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListDeliveryTaskRep::descriptor() {
  protobuf_driver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_driver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ListDeliveryTaskRep& ListDeliveryTaskRep::default_instance() {
  protobuf_driver_2eproto::InitDefaults();
  return *internal_default_instance();
}

ListDeliveryTaskRep* ListDeliveryTaskRep::New(::google::protobuf::Arena* arena) const {
  ListDeliveryTaskRep* n = new ListDeliveryTaskRep;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ListDeliveryTaskRep::Clear() {
// @@protoc_insertion_point(message_clear_start:ttmall.ListDeliveryTaskRep)
  groups_.Clear();
  total_ = 0;
}

bool ListDeliveryTaskRep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ttmall.ListDeliveryTaskRep)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ttmall.WareGroup groups = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_groups()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 total = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ttmall.ListDeliveryTaskRep)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ttmall.ListDeliveryTaskRep)
  return false;
#undef DO_
}

void ListDeliveryTaskRep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ttmall.ListDeliveryTaskRep)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ttmall.WareGroup groups = 1;
  for (unsigned int i = 0, n = this->groups_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->groups(i), output);
  }

  // int32 total = 2;
  if (this->total() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->total(), output);
  }

  // @@protoc_insertion_point(serialize_end:ttmall.ListDeliveryTaskRep)
}

::google::protobuf::uint8* ListDeliveryTaskRep::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ttmall.ListDeliveryTaskRep)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ttmall.WareGroup groups = 1;
  for (unsigned int i = 0, n = this->groups_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->groups(i), deterministic, target);
  }

  // int32 total = 2;
  if (this->total() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->total(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ttmall.ListDeliveryTaskRep)
  return target;
}

size_t ListDeliveryTaskRep::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ttmall.ListDeliveryTaskRep)
  size_t total_size = 0;

  // repeated .ttmall.WareGroup groups = 1;
  {
    unsigned int count = this->groups_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->groups(i));
    }
  }

  // int32 total = 2;
  if (this->total() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->total());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListDeliveryTaskRep::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ttmall.ListDeliveryTaskRep)
  GOOGLE_DCHECK_NE(&from, this);
  const ListDeliveryTaskRep* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ListDeliveryTaskRep>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ttmall.ListDeliveryTaskRep)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ttmall.ListDeliveryTaskRep)
    MergeFrom(*source);
  }
}

void ListDeliveryTaskRep::MergeFrom(const ListDeliveryTaskRep& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ttmall.ListDeliveryTaskRep)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  groups_.MergeFrom(from.groups_);
  if (from.total() != 0) {
    set_total(from.total());
  }
}

void ListDeliveryTaskRep::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ttmall.ListDeliveryTaskRep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListDeliveryTaskRep::CopyFrom(const ListDeliveryTaskRep& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ttmall.ListDeliveryTaskRep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListDeliveryTaskRep::IsInitialized() const {
  return true;
}

void ListDeliveryTaskRep::Swap(ListDeliveryTaskRep* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ListDeliveryTaskRep::InternalSwap(ListDeliveryTaskRep* other) {
  groups_.InternalSwap(&other->groups_);
  std::swap(total_, other->total_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ListDeliveryTaskRep::GetMetadata() const {
  protobuf_driver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_driver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ListDeliveryTaskRep

// repeated .ttmall.WareGroup groups = 1;
int ListDeliveryTaskRep::groups_size() const {
  return groups_.size();
}
void ListDeliveryTaskRep::clear_groups() {
  groups_.Clear();
}
const ::ttmall::WareGroup& ListDeliveryTaskRep::groups(int index) const {
  // @@protoc_insertion_point(field_get:ttmall.ListDeliveryTaskRep.groups)
  return groups_.Get(index);
}
::ttmall::WareGroup* ListDeliveryTaskRep::mutable_groups(int index) {
  // @@protoc_insertion_point(field_mutable:ttmall.ListDeliveryTaskRep.groups)
  return groups_.Mutable(index);
}
::ttmall::WareGroup* ListDeliveryTaskRep::add_groups() {
  // @@protoc_insertion_point(field_add:ttmall.ListDeliveryTaskRep.groups)
  return groups_.Add();
}
::google::protobuf::RepeatedPtrField< ::ttmall::WareGroup >*
ListDeliveryTaskRep::mutable_groups() {
  // @@protoc_insertion_point(field_mutable_list:ttmall.ListDeliveryTaskRep.groups)
  return &groups_;
}
const ::google::protobuf::RepeatedPtrField< ::ttmall::WareGroup >&
ListDeliveryTaskRep::groups() const {
  // @@protoc_insertion_point(field_list:ttmall.ListDeliveryTaskRep.groups)
  return groups_;
}

// int32 total = 2;
void ListDeliveryTaskRep::clear_total() {
  total_ = 0;
}
::google::protobuf::int32 ListDeliveryTaskRep::total() const {
  // @@protoc_insertion_point(field_get:ttmall.ListDeliveryTaskRep.total)
  return total_;
}
void ListDeliveryTaskRep::set_total(::google::protobuf::int32 value) {
  
  total_ = value;
  // @@protoc_insertion_point(field_set:ttmall.ListDeliveryTaskRep.total)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WorkOptReq::kTokenFieldNumber;
const int WorkOptReq::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WorkOptReq::WorkOptReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_driver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ttmall.WorkOptReq)
}
WorkOptReq::WorkOptReq(const WorkOptReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.token().size() > 0) {
    token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:ttmall.WorkOptReq)
}

void WorkOptReq::SharedCtor() {
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  _cached_size_ = 0;
}

WorkOptReq::~WorkOptReq() {
  // @@protoc_insertion_point(destructor:ttmall.WorkOptReq)
  SharedDtor();
}

void WorkOptReq::SharedDtor() {
  token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void WorkOptReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WorkOptReq::descriptor() {
  protobuf_driver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_driver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const WorkOptReq& WorkOptReq::default_instance() {
  protobuf_driver_2eproto::InitDefaults();
  return *internal_default_instance();
}

WorkOptReq* WorkOptReq::New(::google::protobuf::Arena* arena) const {
  WorkOptReq* n = new WorkOptReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void WorkOptReq::Clear() {
// @@protoc_insertion_point(message_clear_start:ttmall.WorkOptReq)
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
}

bool WorkOptReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ttmall.WorkOptReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string token = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ttmall.WorkOptReq.token"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ttmall.WorkOptType type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::ttmall::WorkOptType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ttmall.WorkOptReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ttmall.WorkOptReq)
  return false;
#undef DO_
}

void WorkOptReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ttmall.WorkOptReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string token = 1;
  if (this->token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ttmall.WorkOptReq.token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->token(), output);
  }

  // .ttmall.WorkOptType type = 2;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // @@protoc_insertion_point(serialize_end:ttmall.WorkOptReq)
}

::google::protobuf::uint8* WorkOptReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ttmall.WorkOptReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string token = 1;
  if (this->token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ttmall.WorkOptReq.token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->token(), target);
  }

  // .ttmall.WorkOptType type = 2;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ttmall.WorkOptReq)
  return target;
}

size_t WorkOptReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ttmall.WorkOptReq)
  size_t total_size = 0;

  // string token = 1;
  if (this->token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->token());
  }

  // .ttmall.WorkOptType type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WorkOptReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ttmall.WorkOptReq)
  GOOGLE_DCHECK_NE(&from, this);
  const WorkOptReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const WorkOptReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ttmall.WorkOptReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ttmall.WorkOptReq)
    MergeFrom(*source);
  }
}

void WorkOptReq::MergeFrom(const WorkOptReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ttmall.WorkOptReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.token().size() > 0) {

    token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void WorkOptReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ttmall.WorkOptReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorkOptReq::CopyFrom(const WorkOptReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ttmall.WorkOptReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorkOptReq::IsInitialized() const {
  return true;
}

void WorkOptReq::Swap(WorkOptReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WorkOptReq::InternalSwap(WorkOptReq* other) {
  token_.Swap(&other->token_);
  std::swap(type_, other->type_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata WorkOptReq::GetMetadata() const {
  protobuf_driver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_driver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// WorkOptReq

// string token = 1;
void WorkOptReq::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& WorkOptReq::token() const {
  // @@protoc_insertion_point(field_get:ttmall.WorkOptReq.token)
  return token_.GetNoArena();
}
void WorkOptReq::set_token(const ::std::string& value) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ttmall.WorkOptReq.token)
}
#if LANG_CXX11
void WorkOptReq::set_token(::std::string&& value) {
  
  token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ttmall.WorkOptReq.token)
}
#endif
void WorkOptReq::set_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ttmall.WorkOptReq.token)
}
void WorkOptReq::set_token(const char* value, size_t size) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ttmall.WorkOptReq.token)
}
::std::string* WorkOptReq::mutable_token() {
  
  // @@protoc_insertion_point(field_mutable:ttmall.WorkOptReq.token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* WorkOptReq::release_token() {
  // @@protoc_insertion_point(field_release:ttmall.WorkOptReq.token)
  
  return token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void WorkOptReq::set_allocated_token(::std::string* token) {
  if (token != NULL) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:ttmall.WorkOptReq.token)
}

// .ttmall.WorkOptType type = 2;
void WorkOptReq::clear_type() {
  type_ = 0;
}
::ttmall::WorkOptType WorkOptReq::type() const {
  // @@protoc_insertion_point(field_get:ttmall.WorkOptReq.type)
  return static_cast< ::ttmall::WorkOptType >(type_);
}
void WorkOptReq::set_type(::ttmall::WorkOptType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:ttmall.WorkOptReq.type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WorkOptRep::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WorkOptRep::WorkOptRep()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_driver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ttmall.WorkOptRep)
}
WorkOptRep::WorkOptRep(const WorkOptRep& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:ttmall.WorkOptRep)
}

void WorkOptRep::SharedCtor() {
  type_ = 0;
  _cached_size_ = 0;
}

WorkOptRep::~WorkOptRep() {
  // @@protoc_insertion_point(destructor:ttmall.WorkOptRep)
  SharedDtor();
}

void WorkOptRep::SharedDtor() {
}

void WorkOptRep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WorkOptRep::descriptor() {
  protobuf_driver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_driver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const WorkOptRep& WorkOptRep::default_instance() {
  protobuf_driver_2eproto::InitDefaults();
  return *internal_default_instance();
}

WorkOptRep* WorkOptRep::New(::google::protobuf::Arena* arena) const {
  WorkOptRep* n = new WorkOptRep;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void WorkOptRep::Clear() {
// @@protoc_insertion_point(message_clear_start:ttmall.WorkOptRep)
  type_ = 0;
}

bool WorkOptRep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ttmall.WorkOptRep)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ttmall.WorkOptType type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::ttmall::WorkOptType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ttmall.WorkOptRep)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ttmall.WorkOptRep)
  return false;
#undef DO_
}

void WorkOptRep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ttmall.WorkOptRep)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ttmall.WorkOptType type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // @@protoc_insertion_point(serialize_end:ttmall.WorkOptRep)
}

::google::protobuf::uint8* WorkOptRep::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ttmall.WorkOptRep)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ttmall.WorkOptType type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ttmall.WorkOptRep)
  return target;
}

size_t WorkOptRep::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ttmall.WorkOptRep)
  size_t total_size = 0;

  // .ttmall.WorkOptType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WorkOptRep::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ttmall.WorkOptRep)
  GOOGLE_DCHECK_NE(&from, this);
  const WorkOptRep* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const WorkOptRep>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ttmall.WorkOptRep)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ttmall.WorkOptRep)
    MergeFrom(*source);
  }
}

void WorkOptRep::MergeFrom(const WorkOptRep& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ttmall.WorkOptRep)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.type() != 0) {
    set_type(from.type());
  }
}

void WorkOptRep::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ttmall.WorkOptRep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorkOptRep::CopyFrom(const WorkOptRep& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ttmall.WorkOptRep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorkOptRep::IsInitialized() const {
  return true;
}

void WorkOptRep::Swap(WorkOptRep* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WorkOptRep::InternalSwap(WorkOptRep* other) {
  std::swap(type_, other->type_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata WorkOptRep::GetMetadata() const {
  protobuf_driver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_driver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// WorkOptRep

// .ttmall.WorkOptType type = 1;
void WorkOptRep::clear_type() {
  type_ = 0;
}
::ttmall::WorkOptType WorkOptRep::type() const {
  // @@protoc_insertion_point(field_get:ttmall.WorkOptRep.type)
  return static_cast< ::ttmall::WorkOptType >(type_);
}
void WorkOptRep::set_type(::ttmall::WorkOptType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:ttmall.WorkOptRep.type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DriverInfo::kIdFieldNumber;
const int DriverInfo::kMobileFieldNumber;
const int DriverInfo::kIsPassFieldNumber;
const int DriverInfo::kNameFieldNumber;
const int DriverInfo::kIdNumberFieldNumber;
const int DriverInfo::kDrivingDateFieldNumber;
const int DriverInfo::kDrivingPhotosFieldNumber;
const int DriverInfo::kRegionsInfoFieldNumber;
const int DriverInfo::kCarLicencesFieldNumber;
const int DriverInfo::kGenTimeFieldNumber;
const int DriverInfo::kAuditingMsgFieldNumber;
const int DriverInfo::kCarInfoFieldNumber;
const int DriverInfo::kCarNumberFieldNumber;
const int DriverInfo::kCarOwnerFieldNumber;
const int DriverInfo::kWorkOptFieldNumber;
const int DriverInfo::kIsIndepFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DriverInfo::DriverInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_driver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ttmall.DriverInfo)
}
DriverInfo::DriverInfo(const DriverInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      driving_photos_(from.driving_photos_),
      regions_info_(from.regions_info_),
      car_licences_(from.car_licences_),
      auditing_msg_(from.auditing_msg_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.id().size() > 0) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  mobile_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.mobile().size() > 0) {
    mobile_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mobile_);
  }
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  id_number_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.id_number().size() > 0) {
    id_number_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_number_);
  }
  driving_date_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.driving_date().size() > 0) {
    driving_date_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.driving_date_);
  }
  car_number_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.car_number().size() > 0) {
    car_number_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.car_number_);
  }
  car_owner_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.car_owner().size() > 0) {
    car_owner_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.car_owner_);
  }
  if (from.has_car_info()) {
    car_info_ = new ::ttmall::CarInfo(*from.car_info_);
  } else {
    car_info_ = NULL;
  }
  ::memcpy(&gen_time_, &from.gen_time_,
    reinterpret_cast<char*>(&work_opt_) -
    reinterpret_cast<char*>(&gen_time_) + sizeof(work_opt_));
  // @@protoc_insertion_point(copy_constructor:ttmall.DriverInfo)
}

void DriverInfo::SharedCtor() {
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mobile_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_number_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  driving_date_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  car_number_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  car_owner_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&car_info_, 0, reinterpret_cast<char*>(&work_opt_) -
    reinterpret_cast<char*>(&car_info_) + sizeof(work_opt_));
  _cached_size_ = 0;
}

DriverInfo::~DriverInfo() {
  // @@protoc_insertion_point(destructor:ttmall.DriverInfo)
  SharedDtor();
}

void DriverInfo::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mobile_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_number_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  driving_date_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  car_number_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  car_owner_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete car_info_;
  }
}

void DriverInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DriverInfo::descriptor() {
  protobuf_driver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_driver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DriverInfo& DriverInfo::default_instance() {
  protobuf_driver_2eproto::InitDefaults();
  return *internal_default_instance();
}

DriverInfo* DriverInfo::New(::google::protobuf::Arena* arena) const {
  DriverInfo* n = new DriverInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DriverInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:ttmall.DriverInfo)
  driving_photos_.Clear();
  regions_info_.Clear();
  car_licences_.Clear();
  auditing_msg_.Clear();
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mobile_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_number_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  driving_date_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  car_number_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  car_owner_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && car_info_ != NULL) {
    delete car_info_;
  }
  car_info_ = NULL;
  ::memset(&gen_time_, 0, reinterpret_cast<char*>(&work_opt_) -
    reinterpret_cast<char*>(&gen_time_) + sizeof(work_opt_));
}

bool DriverInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ttmall.DriverInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ttmall.DriverInfo.id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string mobile = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mobile()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->mobile().data(), this->mobile().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ttmall.DriverInfo.mobile"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_pass = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_pass_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ttmall.DriverInfo.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string id_number = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id_number()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id_number().data(), this->id_number().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ttmall.DriverInfo.id_number"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string driving_date = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_driving_date()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->driving_date().data(), this->driving_date().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ttmall.DriverInfo.driving_date"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ttmall.ImageInfo driving_photos = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_driving_photos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ttmall.RegionInfo regions_info = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_regions_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ttmall.ImageInfo car_licences = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_car_licences()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 gen_time = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &gen_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string auditing_msg = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_auditing_msg()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->auditing_msg(this->auditing_msg_size() - 1).data(),
            this->auditing_msg(this->auditing_msg_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ttmall.DriverInfo.auditing_msg"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ttmall.CarInfo car_info = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_car_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string car_number = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_car_number()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->car_number().data(), this->car_number().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ttmall.DriverInfo.car_number"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string car_owner = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_car_owner()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->car_owner().data(), this->car_owner().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ttmall.DriverInfo.car_owner"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ttmall.WorkOptType work_opt = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_work_opt(static_cast< ::ttmall::WorkOptType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_indep = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_indep_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ttmall.DriverInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ttmall.DriverInfo)
  return false;
#undef DO_
}

void DriverInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ttmall.DriverInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ttmall.DriverInfo.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // string mobile = 2;
  if (this->mobile().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->mobile().data(), this->mobile().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ttmall.DriverInfo.mobile");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->mobile(), output);
  }

  // bool is_pass = 3;
  if (this->is_pass() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_pass(), output);
  }

  // string name = 4;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ttmall.DriverInfo.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->name(), output);
  }

  // string id_number = 5;
  if (this->id_number().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id_number().data(), this->id_number().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ttmall.DriverInfo.id_number");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->id_number(), output);
  }

  // string driving_date = 6;
  if (this->driving_date().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->driving_date().data(), this->driving_date().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ttmall.DriverInfo.driving_date");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->driving_date(), output);
  }

  // repeated .ttmall.ImageInfo driving_photos = 7;
  for (unsigned int i = 0, n = this->driving_photos_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->driving_photos(i), output);
  }

  // repeated .ttmall.RegionInfo regions_info = 8;
  for (unsigned int i = 0, n = this->regions_info_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->regions_info(i), output);
  }

  // repeated .ttmall.ImageInfo car_licences = 9;
  for (unsigned int i = 0, n = this->car_licences_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->car_licences(i), output);
  }

  // int64 gen_time = 10;
  if (this->gen_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->gen_time(), output);
  }

  // repeated string auditing_msg = 11;
  for (int i = 0, n = this->auditing_msg_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->auditing_msg(i).data(), this->auditing_msg(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ttmall.DriverInfo.auditing_msg");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->auditing_msg(i), output);
  }

  // .ttmall.CarInfo car_info = 12;
  if (this->has_car_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, *this->car_info_, output);
  }

  // string car_number = 13;
  if (this->car_number().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->car_number().data(), this->car_number().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ttmall.DriverInfo.car_number");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->car_number(), output);
  }

  // string car_owner = 14;
  if (this->car_owner().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->car_owner().data(), this->car_owner().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ttmall.DriverInfo.car_owner");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->car_owner(), output);
  }

  // .ttmall.WorkOptType work_opt = 15;
  if (this->work_opt() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      15, this->work_opt(), output);
  }

  // bool is_indep = 16;
  if (this->is_indep() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->is_indep(), output);
  }

  // @@protoc_insertion_point(serialize_end:ttmall.DriverInfo)
}

::google::protobuf::uint8* DriverInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ttmall.DriverInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ttmall.DriverInfo.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // string mobile = 2;
  if (this->mobile().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->mobile().data(), this->mobile().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ttmall.DriverInfo.mobile");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->mobile(), target);
  }

  // bool is_pass = 3;
  if (this->is_pass() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_pass(), target);
  }

  // string name = 4;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ttmall.DriverInfo.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->name(), target);
  }

  // string id_number = 5;
  if (this->id_number().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id_number().data(), this->id_number().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ttmall.DriverInfo.id_number");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->id_number(), target);
  }

  // string driving_date = 6;
  if (this->driving_date().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->driving_date().data(), this->driving_date().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ttmall.DriverInfo.driving_date");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->driving_date(), target);
  }

  // repeated .ttmall.ImageInfo driving_photos = 7;
  for (unsigned int i = 0, n = this->driving_photos_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, this->driving_photos(i), deterministic, target);
  }

  // repeated .ttmall.RegionInfo regions_info = 8;
  for (unsigned int i = 0, n = this->regions_info_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, this->regions_info(i), deterministic, target);
  }

  // repeated .ttmall.ImageInfo car_licences = 9;
  for (unsigned int i = 0, n = this->car_licences_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, this->car_licences(i), deterministic, target);
  }

  // int64 gen_time = 10;
  if (this->gen_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->gen_time(), target);
  }

  // repeated string auditing_msg = 11;
  for (int i = 0, n = this->auditing_msg_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->auditing_msg(i).data(), this->auditing_msg(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ttmall.DriverInfo.auditing_msg");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(11, this->auditing_msg(i), target);
  }

  // .ttmall.CarInfo car_info = 12;
  if (this->has_car_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        12, *this->car_info_, deterministic, target);
  }

  // string car_number = 13;
  if (this->car_number().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->car_number().data(), this->car_number().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ttmall.DriverInfo.car_number");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->car_number(), target);
  }

  // string car_owner = 14;
  if (this->car_owner().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->car_owner().data(), this->car_owner().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ttmall.DriverInfo.car_owner");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->car_owner(), target);
  }

  // .ttmall.WorkOptType work_opt = 15;
  if (this->work_opt() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      15, this->work_opt(), target);
  }

  // bool is_indep = 16;
  if (this->is_indep() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->is_indep(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ttmall.DriverInfo)
  return target;
}

size_t DriverInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ttmall.DriverInfo)
  size_t total_size = 0;

  // repeated .ttmall.ImageInfo driving_photos = 7;
  {
    unsigned int count = this->driving_photos_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->driving_photos(i));
    }
  }

  // repeated .ttmall.RegionInfo regions_info = 8;
  {
    unsigned int count = this->regions_info_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->regions_info(i));
    }
  }

  // repeated .ttmall.ImageInfo car_licences = 9;
  {
    unsigned int count = this->car_licences_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->car_licences(i));
    }
  }

  // repeated string auditing_msg = 11;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->auditing_msg_size());
  for (int i = 0, n = this->auditing_msg_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->auditing_msg(i));
  }

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  // string mobile = 2;
  if (this->mobile().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->mobile());
  }

  // string name = 4;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string id_number = 5;
  if (this->id_number().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id_number());
  }

  // string driving_date = 6;
  if (this->driving_date().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->driving_date());
  }

  // string car_number = 13;
  if (this->car_number().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->car_number());
  }

  // string car_owner = 14;
  if (this->car_owner().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->car_owner());
  }

  // .ttmall.CarInfo car_info = 12;
  if (this->has_car_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->car_info_);
  }

  // int64 gen_time = 10;
  if (this->gen_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->gen_time());
  }

  // bool is_pass = 3;
  if (this->is_pass() != 0) {
    total_size += 1 + 1;
  }

  // bool is_indep = 16;
  if (this->is_indep() != 0) {
    total_size += 2 + 1;
  }

  // .ttmall.WorkOptType work_opt = 15;
  if (this->work_opt() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->work_opt());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DriverInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ttmall.DriverInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const DriverInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DriverInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ttmall.DriverInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ttmall.DriverInfo)
    MergeFrom(*source);
  }
}

void DriverInfo::MergeFrom(const DriverInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ttmall.DriverInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  driving_photos_.MergeFrom(from.driving_photos_);
  regions_info_.MergeFrom(from.regions_info_);
  car_licences_.MergeFrom(from.car_licences_);
  auditing_msg_.MergeFrom(from.auditing_msg_);
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.mobile().size() > 0) {

    mobile_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mobile_);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.id_number().size() > 0) {

    id_number_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_number_);
  }
  if (from.driving_date().size() > 0) {

    driving_date_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.driving_date_);
  }
  if (from.car_number().size() > 0) {

    car_number_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.car_number_);
  }
  if (from.car_owner().size() > 0) {

    car_owner_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.car_owner_);
  }
  if (from.has_car_info()) {
    mutable_car_info()->::ttmall::CarInfo::MergeFrom(from.car_info());
  }
  if (from.gen_time() != 0) {
    set_gen_time(from.gen_time());
  }
  if (from.is_pass() != 0) {
    set_is_pass(from.is_pass());
  }
  if (from.is_indep() != 0) {
    set_is_indep(from.is_indep());
  }
  if (from.work_opt() != 0) {
    set_work_opt(from.work_opt());
  }
}

void DriverInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ttmall.DriverInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DriverInfo::CopyFrom(const DriverInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ttmall.DriverInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DriverInfo::IsInitialized() const {
  return true;
}

void DriverInfo::Swap(DriverInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DriverInfo::InternalSwap(DriverInfo* other) {
  driving_photos_.InternalSwap(&other->driving_photos_);
  regions_info_.InternalSwap(&other->regions_info_);
  car_licences_.InternalSwap(&other->car_licences_);
  auditing_msg_.InternalSwap(&other->auditing_msg_);
  id_.Swap(&other->id_);
  mobile_.Swap(&other->mobile_);
  name_.Swap(&other->name_);
  id_number_.Swap(&other->id_number_);
  driving_date_.Swap(&other->driving_date_);
  car_number_.Swap(&other->car_number_);
  car_owner_.Swap(&other->car_owner_);
  std::swap(car_info_, other->car_info_);
  std::swap(gen_time_, other->gen_time_);
  std::swap(is_pass_, other->is_pass_);
  std::swap(is_indep_, other->is_indep_);
  std::swap(work_opt_, other->work_opt_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DriverInfo::GetMetadata() const {
  protobuf_driver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_driver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DriverInfo

// string id = 1;
void DriverInfo::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DriverInfo::id() const {
  // @@protoc_insertion_point(field_get:ttmall.DriverInfo.id)
  return id_.GetNoArena();
}
void DriverInfo::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ttmall.DriverInfo.id)
}
#if LANG_CXX11
void DriverInfo::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ttmall.DriverInfo.id)
}
#endif
void DriverInfo::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ttmall.DriverInfo.id)
}
void DriverInfo::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ttmall.DriverInfo.id)
}
::std::string* DriverInfo::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:ttmall.DriverInfo.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DriverInfo::release_id() {
  // @@protoc_insertion_point(field_release:ttmall.DriverInfo.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DriverInfo::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:ttmall.DriverInfo.id)
}

// string mobile = 2;
void DriverInfo::clear_mobile() {
  mobile_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DriverInfo::mobile() const {
  // @@protoc_insertion_point(field_get:ttmall.DriverInfo.mobile)
  return mobile_.GetNoArena();
}
void DriverInfo::set_mobile(const ::std::string& value) {
  
  mobile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ttmall.DriverInfo.mobile)
}
#if LANG_CXX11
void DriverInfo::set_mobile(::std::string&& value) {
  
  mobile_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ttmall.DriverInfo.mobile)
}
#endif
void DriverInfo::set_mobile(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  mobile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ttmall.DriverInfo.mobile)
}
void DriverInfo::set_mobile(const char* value, size_t size) {
  
  mobile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ttmall.DriverInfo.mobile)
}
::std::string* DriverInfo::mutable_mobile() {
  
  // @@protoc_insertion_point(field_mutable:ttmall.DriverInfo.mobile)
  return mobile_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DriverInfo::release_mobile() {
  // @@protoc_insertion_point(field_release:ttmall.DriverInfo.mobile)
  
  return mobile_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DriverInfo::set_allocated_mobile(::std::string* mobile) {
  if (mobile != NULL) {
    
  } else {
    
  }
  mobile_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mobile);
  // @@protoc_insertion_point(field_set_allocated:ttmall.DriverInfo.mobile)
}

// bool is_pass = 3;
void DriverInfo::clear_is_pass() {
  is_pass_ = false;
}
bool DriverInfo::is_pass() const {
  // @@protoc_insertion_point(field_get:ttmall.DriverInfo.is_pass)
  return is_pass_;
}
void DriverInfo::set_is_pass(bool value) {
  
  is_pass_ = value;
  // @@protoc_insertion_point(field_set:ttmall.DriverInfo.is_pass)
}

// string name = 4;
void DriverInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DriverInfo::name() const {
  // @@protoc_insertion_point(field_get:ttmall.DriverInfo.name)
  return name_.GetNoArena();
}
void DriverInfo::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ttmall.DriverInfo.name)
}
#if LANG_CXX11
void DriverInfo::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ttmall.DriverInfo.name)
}
#endif
void DriverInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ttmall.DriverInfo.name)
}
void DriverInfo::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ttmall.DriverInfo.name)
}
::std::string* DriverInfo::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:ttmall.DriverInfo.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DriverInfo::release_name() {
  // @@protoc_insertion_point(field_release:ttmall.DriverInfo.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DriverInfo::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:ttmall.DriverInfo.name)
}

// string id_number = 5;
void DriverInfo::clear_id_number() {
  id_number_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DriverInfo::id_number() const {
  // @@protoc_insertion_point(field_get:ttmall.DriverInfo.id_number)
  return id_number_.GetNoArena();
}
void DriverInfo::set_id_number(const ::std::string& value) {
  
  id_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ttmall.DriverInfo.id_number)
}
#if LANG_CXX11
void DriverInfo::set_id_number(::std::string&& value) {
  
  id_number_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ttmall.DriverInfo.id_number)
}
#endif
void DriverInfo::set_id_number(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ttmall.DriverInfo.id_number)
}
void DriverInfo::set_id_number(const char* value, size_t size) {
  
  id_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ttmall.DriverInfo.id_number)
}
::std::string* DriverInfo::mutable_id_number() {
  
  // @@protoc_insertion_point(field_mutable:ttmall.DriverInfo.id_number)
  return id_number_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DriverInfo::release_id_number() {
  // @@protoc_insertion_point(field_release:ttmall.DriverInfo.id_number)
  
  return id_number_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DriverInfo::set_allocated_id_number(::std::string* id_number) {
  if (id_number != NULL) {
    
  } else {
    
  }
  id_number_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id_number);
  // @@protoc_insertion_point(field_set_allocated:ttmall.DriverInfo.id_number)
}

// string driving_date = 6;
void DriverInfo::clear_driving_date() {
  driving_date_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DriverInfo::driving_date() const {
  // @@protoc_insertion_point(field_get:ttmall.DriverInfo.driving_date)
  return driving_date_.GetNoArena();
}
void DriverInfo::set_driving_date(const ::std::string& value) {
  
  driving_date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ttmall.DriverInfo.driving_date)
}
#if LANG_CXX11
void DriverInfo::set_driving_date(::std::string&& value) {
  
  driving_date_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ttmall.DriverInfo.driving_date)
}
#endif
void DriverInfo::set_driving_date(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  driving_date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ttmall.DriverInfo.driving_date)
}
void DriverInfo::set_driving_date(const char* value, size_t size) {
  
  driving_date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ttmall.DriverInfo.driving_date)
}
::std::string* DriverInfo::mutable_driving_date() {
  
  // @@protoc_insertion_point(field_mutable:ttmall.DriverInfo.driving_date)
  return driving_date_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DriverInfo::release_driving_date() {
  // @@protoc_insertion_point(field_release:ttmall.DriverInfo.driving_date)
  
  return driving_date_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DriverInfo::set_allocated_driving_date(::std::string* driving_date) {
  if (driving_date != NULL) {
    
  } else {
    
  }
  driving_date_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), driving_date);
  // @@protoc_insertion_point(field_set_allocated:ttmall.DriverInfo.driving_date)
}

// repeated .ttmall.ImageInfo driving_photos = 7;
int DriverInfo::driving_photos_size() const {
  return driving_photos_.size();
}
void DriverInfo::clear_driving_photos() {
  driving_photos_.Clear();
}
const ::ttmall::ImageInfo& DriverInfo::driving_photos(int index) const {
  // @@protoc_insertion_point(field_get:ttmall.DriverInfo.driving_photos)
  return driving_photos_.Get(index);
}
::ttmall::ImageInfo* DriverInfo::mutable_driving_photos(int index) {
  // @@protoc_insertion_point(field_mutable:ttmall.DriverInfo.driving_photos)
  return driving_photos_.Mutable(index);
}
::ttmall::ImageInfo* DriverInfo::add_driving_photos() {
  // @@protoc_insertion_point(field_add:ttmall.DriverInfo.driving_photos)
  return driving_photos_.Add();
}
::google::protobuf::RepeatedPtrField< ::ttmall::ImageInfo >*
DriverInfo::mutable_driving_photos() {
  // @@protoc_insertion_point(field_mutable_list:ttmall.DriverInfo.driving_photos)
  return &driving_photos_;
}
const ::google::protobuf::RepeatedPtrField< ::ttmall::ImageInfo >&
DriverInfo::driving_photos() const {
  // @@protoc_insertion_point(field_list:ttmall.DriverInfo.driving_photos)
  return driving_photos_;
}

// repeated .ttmall.RegionInfo regions_info = 8;
int DriverInfo::regions_info_size() const {
  return regions_info_.size();
}
void DriverInfo::clear_regions_info() {
  regions_info_.Clear();
}
const ::ttmall::RegionInfo& DriverInfo::regions_info(int index) const {
  // @@protoc_insertion_point(field_get:ttmall.DriverInfo.regions_info)
  return regions_info_.Get(index);
}
::ttmall::RegionInfo* DriverInfo::mutable_regions_info(int index) {
  // @@protoc_insertion_point(field_mutable:ttmall.DriverInfo.regions_info)
  return regions_info_.Mutable(index);
}
::ttmall::RegionInfo* DriverInfo::add_regions_info() {
  // @@protoc_insertion_point(field_add:ttmall.DriverInfo.regions_info)
  return regions_info_.Add();
}
::google::protobuf::RepeatedPtrField< ::ttmall::RegionInfo >*
DriverInfo::mutable_regions_info() {
  // @@protoc_insertion_point(field_mutable_list:ttmall.DriverInfo.regions_info)
  return &regions_info_;
}
const ::google::protobuf::RepeatedPtrField< ::ttmall::RegionInfo >&
DriverInfo::regions_info() const {
  // @@protoc_insertion_point(field_list:ttmall.DriverInfo.regions_info)
  return regions_info_;
}

// repeated .ttmall.ImageInfo car_licences = 9;
int DriverInfo::car_licences_size() const {
  return car_licences_.size();
}
void DriverInfo::clear_car_licences() {
  car_licences_.Clear();
}
const ::ttmall::ImageInfo& DriverInfo::car_licences(int index) const {
  // @@protoc_insertion_point(field_get:ttmall.DriverInfo.car_licences)
  return car_licences_.Get(index);
}
::ttmall::ImageInfo* DriverInfo::mutable_car_licences(int index) {
  // @@protoc_insertion_point(field_mutable:ttmall.DriverInfo.car_licences)
  return car_licences_.Mutable(index);
}
::ttmall::ImageInfo* DriverInfo::add_car_licences() {
  // @@protoc_insertion_point(field_add:ttmall.DriverInfo.car_licences)
  return car_licences_.Add();
}
::google::protobuf::RepeatedPtrField< ::ttmall::ImageInfo >*
DriverInfo::mutable_car_licences() {
  // @@protoc_insertion_point(field_mutable_list:ttmall.DriverInfo.car_licences)
  return &car_licences_;
}
const ::google::protobuf::RepeatedPtrField< ::ttmall::ImageInfo >&
DriverInfo::car_licences() const {
  // @@protoc_insertion_point(field_list:ttmall.DriverInfo.car_licences)
  return car_licences_;
}

// int64 gen_time = 10;
void DriverInfo::clear_gen_time() {
  gen_time_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 DriverInfo::gen_time() const {
  // @@protoc_insertion_point(field_get:ttmall.DriverInfo.gen_time)
  return gen_time_;
}
void DriverInfo::set_gen_time(::google::protobuf::int64 value) {
  
  gen_time_ = value;
  // @@protoc_insertion_point(field_set:ttmall.DriverInfo.gen_time)
}

// repeated string auditing_msg = 11;
int DriverInfo::auditing_msg_size() const {
  return auditing_msg_.size();
}
void DriverInfo::clear_auditing_msg() {
  auditing_msg_.Clear();
}
const ::std::string& DriverInfo::auditing_msg(int index) const {
  // @@protoc_insertion_point(field_get:ttmall.DriverInfo.auditing_msg)
  return auditing_msg_.Get(index);
}
::std::string* DriverInfo::mutable_auditing_msg(int index) {
  // @@protoc_insertion_point(field_mutable:ttmall.DriverInfo.auditing_msg)
  return auditing_msg_.Mutable(index);
}
void DriverInfo::set_auditing_msg(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ttmall.DriverInfo.auditing_msg)
  auditing_msg_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void DriverInfo::set_auditing_msg(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ttmall.DriverInfo.auditing_msg)
  auditing_msg_.Mutable(index)->assign(std::move(value));
}
#endif
void DriverInfo::set_auditing_msg(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  auditing_msg_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ttmall.DriverInfo.auditing_msg)
}
void DriverInfo::set_auditing_msg(int index, const char* value, size_t size) {
  auditing_msg_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ttmall.DriverInfo.auditing_msg)
}
::std::string* DriverInfo::add_auditing_msg() {
  // @@protoc_insertion_point(field_add_mutable:ttmall.DriverInfo.auditing_msg)
  return auditing_msg_.Add();
}
void DriverInfo::add_auditing_msg(const ::std::string& value) {
  auditing_msg_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ttmall.DriverInfo.auditing_msg)
}
#if LANG_CXX11
void DriverInfo::add_auditing_msg(::std::string&& value) {
  auditing_msg_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ttmall.DriverInfo.auditing_msg)
}
#endif
void DriverInfo::add_auditing_msg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  auditing_msg_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ttmall.DriverInfo.auditing_msg)
}
void DriverInfo::add_auditing_msg(const char* value, size_t size) {
  auditing_msg_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ttmall.DriverInfo.auditing_msg)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
DriverInfo::auditing_msg() const {
  // @@protoc_insertion_point(field_list:ttmall.DriverInfo.auditing_msg)
  return auditing_msg_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
DriverInfo::mutable_auditing_msg() {
  // @@protoc_insertion_point(field_mutable_list:ttmall.DriverInfo.auditing_msg)
  return &auditing_msg_;
}

// .ttmall.CarInfo car_info = 12;
bool DriverInfo::has_car_info() const {
  return this != internal_default_instance() && car_info_ != NULL;
}
void DriverInfo::clear_car_info() {
  if (GetArenaNoVirtual() == NULL && car_info_ != NULL) delete car_info_;
  car_info_ = NULL;
}
const ::ttmall::CarInfo& DriverInfo::car_info() const {
  // @@protoc_insertion_point(field_get:ttmall.DriverInfo.car_info)
  return car_info_ != NULL ? *car_info_
                         : *::ttmall::CarInfo::internal_default_instance();
}
::ttmall::CarInfo* DriverInfo::mutable_car_info() {
  
  if (car_info_ == NULL) {
    car_info_ = new ::ttmall::CarInfo;
  }
  // @@protoc_insertion_point(field_mutable:ttmall.DriverInfo.car_info)
  return car_info_;
}
::ttmall::CarInfo* DriverInfo::release_car_info() {
  // @@protoc_insertion_point(field_release:ttmall.DriverInfo.car_info)
  
  ::ttmall::CarInfo* temp = car_info_;
  car_info_ = NULL;
  return temp;
}
void DriverInfo::set_allocated_car_info(::ttmall::CarInfo* car_info) {
  delete car_info_;
  car_info_ = car_info;
  if (car_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ttmall.DriverInfo.car_info)
}

// string car_number = 13;
void DriverInfo::clear_car_number() {
  car_number_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DriverInfo::car_number() const {
  // @@protoc_insertion_point(field_get:ttmall.DriverInfo.car_number)
  return car_number_.GetNoArena();
}
void DriverInfo::set_car_number(const ::std::string& value) {
  
  car_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ttmall.DriverInfo.car_number)
}
#if LANG_CXX11
void DriverInfo::set_car_number(::std::string&& value) {
  
  car_number_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ttmall.DriverInfo.car_number)
}
#endif
void DriverInfo::set_car_number(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  car_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ttmall.DriverInfo.car_number)
}
void DriverInfo::set_car_number(const char* value, size_t size) {
  
  car_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ttmall.DriverInfo.car_number)
}
::std::string* DriverInfo::mutable_car_number() {
  
  // @@protoc_insertion_point(field_mutable:ttmall.DriverInfo.car_number)
  return car_number_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DriverInfo::release_car_number() {
  // @@protoc_insertion_point(field_release:ttmall.DriverInfo.car_number)
  
  return car_number_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DriverInfo::set_allocated_car_number(::std::string* car_number) {
  if (car_number != NULL) {
    
  } else {
    
  }
  car_number_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), car_number);
  // @@protoc_insertion_point(field_set_allocated:ttmall.DriverInfo.car_number)
}

// string car_owner = 14;
void DriverInfo::clear_car_owner() {
  car_owner_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DriverInfo::car_owner() const {
  // @@protoc_insertion_point(field_get:ttmall.DriverInfo.car_owner)
  return car_owner_.GetNoArena();
}
void DriverInfo::set_car_owner(const ::std::string& value) {
  
  car_owner_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ttmall.DriverInfo.car_owner)
}
#if LANG_CXX11
void DriverInfo::set_car_owner(::std::string&& value) {
  
  car_owner_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ttmall.DriverInfo.car_owner)
}
#endif
void DriverInfo::set_car_owner(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  car_owner_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ttmall.DriverInfo.car_owner)
}
void DriverInfo::set_car_owner(const char* value, size_t size) {
  
  car_owner_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ttmall.DriverInfo.car_owner)
}
::std::string* DriverInfo::mutable_car_owner() {
  
  // @@protoc_insertion_point(field_mutable:ttmall.DriverInfo.car_owner)
  return car_owner_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DriverInfo::release_car_owner() {
  // @@protoc_insertion_point(field_release:ttmall.DriverInfo.car_owner)
  
  return car_owner_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DriverInfo::set_allocated_car_owner(::std::string* car_owner) {
  if (car_owner != NULL) {
    
  } else {
    
  }
  car_owner_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), car_owner);
  // @@protoc_insertion_point(field_set_allocated:ttmall.DriverInfo.car_owner)
}

// .ttmall.WorkOptType work_opt = 15;
void DriverInfo::clear_work_opt() {
  work_opt_ = 0;
}
::ttmall::WorkOptType DriverInfo::work_opt() const {
  // @@protoc_insertion_point(field_get:ttmall.DriverInfo.work_opt)
  return static_cast< ::ttmall::WorkOptType >(work_opt_);
}
void DriverInfo::set_work_opt(::ttmall::WorkOptType value) {
  
  work_opt_ = value;
  // @@protoc_insertion_point(field_set:ttmall.DriverInfo.work_opt)
}

// bool is_indep = 16;
void DriverInfo::clear_is_indep() {
  is_indep_ = false;
}
bool DriverInfo::is_indep() const {
  // @@protoc_insertion_point(field_get:ttmall.DriverInfo.is_indep)
  return is_indep_;
}
void DriverInfo::set_is_indep(bool value) {
  
  is_indep_ = value;
  // @@protoc_insertion_point(field_set:ttmall.DriverInfo.is_indep)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DriverLoginReq::kMobileFieldNumber;
const int DriverLoginReq::kPassFieldNumber;
const int DriverLoginReq::kPlatformFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DriverLoginReq::DriverLoginReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_driver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ttmall.DriverLoginReq)
}
DriverLoginReq::DriverLoginReq(const DriverLoginReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  mobile_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.mobile().size() > 0) {
    mobile_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mobile_);
  }
  pass_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.pass().size() > 0) {
    pass_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pass_);
  }
  platform_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.platform().size() > 0) {
    platform_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.platform_);
  }
  // @@protoc_insertion_point(copy_constructor:ttmall.DriverLoginReq)
}

void DriverLoginReq::SharedCtor() {
  mobile_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pass_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  platform_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

DriverLoginReq::~DriverLoginReq() {
  // @@protoc_insertion_point(destructor:ttmall.DriverLoginReq)
  SharedDtor();
}

void DriverLoginReq::SharedDtor() {
  mobile_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pass_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  platform_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DriverLoginReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DriverLoginReq::descriptor() {
  protobuf_driver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_driver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DriverLoginReq& DriverLoginReq::default_instance() {
  protobuf_driver_2eproto::InitDefaults();
  return *internal_default_instance();
}

DriverLoginReq* DriverLoginReq::New(::google::protobuf::Arena* arena) const {
  DriverLoginReq* n = new DriverLoginReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DriverLoginReq::Clear() {
// @@protoc_insertion_point(message_clear_start:ttmall.DriverLoginReq)
  mobile_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pass_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  platform_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool DriverLoginReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ttmall.DriverLoginReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string mobile = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mobile()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->mobile().data(), this->mobile().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ttmall.DriverLoginReq.mobile"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string pass = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pass()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->pass().data(), this->pass().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ttmall.DriverLoginReq.pass"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string platform = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_platform()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->platform().data(), this->platform().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ttmall.DriverLoginReq.platform"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ttmall.DriverLoginReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ttmall.DriverLoginReq)
  return false;
#undef DO_
}

void DriverLoginReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ttmall.DriverLoginReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string mobile = 1;
  if (this->mobile().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->mobile().data(), this->mobile().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ttmall.DriverLoginReq.mobile");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->mobile(), output);
  }

  // string pass = 2;
  if (this->pass().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->pass().data(), this->pass().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ttmall.DriverLoginReq.pass");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->pass(), output);
  }

  // string platform = 3;
  if (this->platform().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->platform().data(), this->platform().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ttmall.DriverLoginReq.platform");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->platform(), output);
  }

  // @@protoc_insertion_point(serialize_end:ttmall.DriverLoginReq)
}

::google::protobuf::uint8* DriverLoginReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ttmall.DriverLoginReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string mobile = 1;
  if (this->mobile().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->mobile().data(), this->mobile().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ttmall.DriverLoginReq.mobile");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->mobile(), target);
  }

  // string pass = 2;
  if (this->pass().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->pass().data(), this->pass().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ttmall.DriverLoginReq.pass");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->pass(), target);
  }

  // string platform = 3;
  if (this->platform().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->platform().data(), this->platform().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ttmall.DriverLoginReq.platform");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->platform(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ttmall.DriverLoginReq)
  return target;
}

size_t DriverLoginReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ttmall.DriverLoginReq)
  size_t total_size = 0;

  // string mobile = 1;
  if (this->mobile().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->mobile());
  }

  // string pass = 2;
  if (this->pass().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->pass());
  }

  // string platform = 3;
  if (this->platform().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->platform());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DriverLoginReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ttmall.DriverLoginReq)
  GOOGLE_DCHECK_NE(&from, this);
  const DriverLoginReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DriverLoginReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ttmall.DriverLoginReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ttmall.DriverLoginReq)
    MergeFrom(*source);
  }
}

void DriverLoginReq::MergeFrom(const DriverLoginReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ttmall.DriverLoginReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.mobile().size() > 0) {

    mobile_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mobile_);
  }
  if (from.pass().size() > 0) {

    pass_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pass_);
  }
  if (from.platform().size() > 0) {

    platform_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.platform_);
  }
}

void DriverLoginReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ttmall.DriverLoginReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DriverLoginReq::CopyFrom(const DriverLoginReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ttmall.DriverLoginReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DriverLoginReq::IsInitialized() const {
  return true;
}

void DriverLoginReq::Swap(DriverLoginReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DriverLoginReq::InternalSwap(DriverLoginReq* other) {
  mobile_.Swap(&other->mobile_);
  pass_.Swap(&other->pass_);
  platform_.Swap(&other->platform_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DriverLoginReq::GetMetadata() const {
  protobuf_driver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_driver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DriverLoginReq

// string mobile = 1;
void DriverLoginReq::clear_mobile() {
  mobile_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DriverLoginReq::mobile() const {
  // @@protoc_insertion_point(field_get:ttmall.DriverLoginReq.mobile)
  return mobile_.GetNoArena();
}
void DriverLoginReq::set_mobile(const ::std::string& value) {
  
  mobile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ttmall.DriverLoginReq.mobile)
}
#if LANG_CXX11
void DriverLoginReq::set_mobile(::std::string&& value) {
  
  mobile_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ttmall.DriverLoginReq.mobile)
}
#endif
void DriverLoginReq::set_mobile(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  mobile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ttmall.DriverLoginReq.mobile)
}
void DriverLoginReq::set_mobile(const char* value, size_t size) {
  
  mobile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ttmall.DriverLoginReq.mobile)
}
::std::string* DriverLoginReq::mutable_mobile() {
  
  // @@protoc_insertion_point(field_mutable:ttmall.DriverLoginReq.mobile)
  return mobile_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DriverLoginReq::release_mobile() {
  // @@protoc_insertion_point(field_release:ttmall.DriverLoginReq.mobile)
  
  return mobile_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DriverLoginReq::set_allocated_mobile(::std::string* mobile) {
  if (mobile != NULL) {
    
  } else {
    
  }
  mobile_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mobile);
  // @@protoc_insertion_point(field_set_allocated:ttmall.DriverLoginReq.mobile)
}

// string pass = 2;
void DriverLoginReq::clear_pass() {
  pass_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DriverLoginReq::pass() const {
  // @@protoc_insertion_point(field_get:ttmall.DriverLoginReq.pass)
  return pass_.GetNoArena();
}
void DriverLoginReq::set_pass(const ::std::string& value) {
  
  pass_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ttmall.DriverLoginReq.pass)
}
#if LANG_CXX11
void DriverLoginReq::set_pass(::std::string&& value) {
  
  pass_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ttmall.DriverLoginReq.pass)
}
#endif
void DriverLoginReq::set_pass(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  pass_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ttmall.DriverLoginReq.pass)
}
void DriverLoginReq::set_pass(const char* value, size_t size) {
  
  pass_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ttmall.DriverLoginReq.pass)
}
::std::string* DriverLoginReq::mutable_pass() {
  
  // @@protoc_insertion_point(field_mutable:ttmall.DriverLoginReq.pass)
  return pass_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DriverLoginReq::release_pass() {
  // @@protoc_insertion_point(field_release:ttmall.DriverLoginReq.pass)
  
  return pass_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DriverLoginReq::set_allocated_pass(::std::string* pass) {
  if (pass != NULL) {
    
  } else {
    
  }
  pass_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pass);
  // @@protoc_insertion_point(field_set_allocated:ttmall.DriverLoginReq.pass)
}

// string platform = 3;
void DriverLoginReq::clear_platform() {
  platform_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DriverLoginReq::platform() const {
  // @@protoc_insertion_point(field_get:ttmall.DriverLoginReq.platform)
  return platform_.GetNoArena();
}
void DriverLoginReq::set_platform(const ::std::string& value) {
  
  platform_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ttmall.DriverLoginReq.platform)
}
#if LANG_CXX11
void DriverLoginReq::set_platform(::std::string&& value) {
  
  platform_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ttmall.DriverLoginReq.platform)
}
#endif
void DriverLoginReq::set_platform(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  platform_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ttmall.DriverLoginReq.platform)
}
void DriverLoginReq::set_platform(const char* value, size_t size) {
  
  platform_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ttmall.DriverLoginReq.platform)
}
::std::string* DriverLoginReq::mutable_platform() {
  
  // @@protoc_insertion_point(field_mutable:ttmall.DriverLoginReq.platform)
  return platform_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DriverLoginReq::release_platform() {
  // @@protoc_insertion_point(field_release:ttmall.DriverLoginReq.platform)
  
  return platform_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DriverLoginReq::set_allocated_platform(::std::string* platform) {
  if (platform != NULL) {
    
  } else {
    
  }
  platform_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), platform);
  // @@protoc_insertion_point(field_set_allocated:ttmall.DriverLoginReq.platform)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DriverLoginRep::kTokenFieldNumber;
const int DriverLoginRep::kInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DriverLoginRep::DriverLoginRep()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_driver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ttmall.DriverLoginRep)
}
DriverLoginRep::DriverLoginRep(const DriverLoginRep& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.token().size() > 0) {
    token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  if (from.has_info()) {
    info_ = new ::ttmall::DriverInfo(*from.info_);
  } else {
    info_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:ttmall.DriverLoginRep)
}

void DriverLoginRep::SharedCtor() {
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  info_ = NULL;
  _cached_size_ = 0;
}

DriverLoginRep::~DriverLoginRep() {
  // @@protoc_insertion_point(destructor:ttmall.DriverLoginRep)
  SharedDtor();
}

void DriverLoginRep::SharedDtor() {
  token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete info_;
  }
}

void DriverLoginRep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DriverLoginRep::descriptor() {
  protobuf_driver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_driver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DriverLoginRep& DriverLoginRep::default_instance() {
  protobuf_driver_2eproto::InitDefaults();
  return *internal_default_instance();
}

DriverLoginRep* DriverLoginRep::New(::google::protobuf::Arena* arena) const {
  DriverLoginRep* n = new DriverLoginRep;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DriverLoginRep::Clear() {
// @@protoc_insertion_point(message_clear_start:ttmall.DriverLoginRep)
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && info_ != NULL) {
    delete info_;
  }
  info_ = NULL;
}

bool DriverLoginRep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ttmall.DriverLoginRep)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string token = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ttmall.DriverLoginRep.token"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ttmall.DriverInfo info = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ttmall.DriverLoginRep)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ttmall.DriverLoginRep)
  return false;
#undef DO_
}

void DriverLoginRep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ttmall.DriverLoginRep)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string token = 1;
  if (this->token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ttmall.DriverLoginRep.token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->token(), output);
  }

  // .ttmall.DriverInfo info = 2;
  if (this->has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->info_, output);
  }

  // @@protoc_insertion_point(serialize_end:ttmall.DriverLoginRep)
}

::google::protobuf::uint8* DriverLoginRep::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ttmall.DriverLoginRep)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string token = 1;
  if (this->token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ttmall.DriverLoginRep.token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->token(), target);
  }

  // .ttmall.DriverInfo info = 2;
  if (this->has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->info_, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ttmall.DriverLoginRep)
  return target;
}

size_t DriverLoginRep::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ttmall.DriverLoginRep)
  size_t total_size = 0;

  // string token = 1;
  if (this->token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->token());
  }

  // .ttmall.DriverInfo info = 2;
  if (this->has_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->info_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DriverLoginRep::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ttmall.DriverLoginRep)
  GOOGLE_DCHECK_NE(&from, this);
  const DriverLoginRep* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DriverLoginRep>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ttmall.DriverLoginRep)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ttmall.DriverLoginRep)
    MergeFrom(*source);
  }
}

void DriverLoginRep::MergeFrom(const DriverLoginRep& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ttmall.DriverLoginRep)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.token().size() > 0) {

    token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  if (from.has_info()) {
    mutable_info()->::ttmall::DriverInfo::MergeFrom(from.info());
  }
}

void DriverLoginRep::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ttmall.DriverLoginRep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DriverLoginRep::CopyFrom(const DriverLoginRep& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ttmall.DriverLoginRep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DriverLoginRep::IsInitialized() const {
  return true;
}

void DriverLoginRep::Swap(DriverLoginRep* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DriverLoginRep::InternalSwap(DriverLoginRep* other) {
  token_.Swap(&other->token_);
  std::swap(info_, other->info_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DriverLoginRep::GetMetadata() const {
  protobuf_driver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_driver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DriverLoginRep

// string token = 1;
void DriverLoginRep::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DriverLoginRep::token() const {
  // @@protoc_insertion_point(field_get:ttmall.DriverLoginRep.token)
  return token_.GetNoArena();
}
void DriverLoginRep::set_token(const ::std::string& value) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ttmall.DriverLoginRep.token)
}
#if LANG_CXX11
void DriverLoginRep::set_token(::std::string&& value) {
  
  token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ttmall.DriverLoginRep.token)
}
#endif
void DriverLoginRep::set_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ttmall.DriverLoginRep.token)
}
void DriverLoginRep::set_token(const char* value, size_t size) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ttmall.DriverLoginRep.token)
}
::std::string* DriverLoginRep::mutable_token() {
  
  // @@protoc_insertion_point(field_mutable:ttmall.DriverLoginRep.token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DriverLoginRep::release_token() {
  // @@protoc_insertion_point(field_release:ttmall.DriverLoginRep.token)
  
  return token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DriverLoginRep::set_allocated_token(::std::string* token) {
  if (token != NULL) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:ttmall.DriverLoginRep.token)
}

// .ttmall.DriverInfo info = 2;
bool DriverLoginRep::has_info() const {
  return this != internal_default_instance() && info_ != NULL;
}
void DriverLoginRep::clear_info() {
  if (GetArenaNoVirtual() == NULL && info_ != NULL) delete info_;
  info_ = NULL;
}
const ::ttmall::DriverInfo& DriverLoginRep::info() const {
  // @@protoc_insertion_point(field_get:ttmall.DriverLoginRep.info)
  return info_ != NULL ? *info_
                         : *::ttmall::DriverInfo::internal_default_instance();
}
::ttmall::DriverInfo* DriverLoginRep::mutable_info() {
  
  if (info_ == NULL) {
    info_ = new ::ttmall::DriverInfo;
  }
  // @@protoc_insertion_point(field_mutable:ttmall.DriverLoginRep.info)
  return info_;
}
::ttmall::DriverInfo* DriverLoginRep::release_info() {
  // @@protoc_insertion_point(field_release:ttmall.DriverLoginRep.info)
  
  ::ttmall::DriverInfo* temp = info_;
  info_ = NULL;
  return temp;
}
void DriverLoginRep::set_allocated_info(::ttmall::DriverInfo* info) {
  delete info_;
  info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ttmall.DriverLoginRep.info)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DriverRegisterReq::kTokenFieldNumber;
const int DriverRegisterReq::kMobileFieldNumber;
const int DriverRegisterReq::kPassFieldNumber;
const int DriverRegisterReq::kCodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DriverRegisterReq::DriverRegisterReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_driver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ttmall.DriverRegisterReq)
}
DriverRegisterReq::DriverRegisterReq(const DriverRegisterReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.token().size() > 0) {
    token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  mobile_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.mobile().size() > 0) {
    mobile_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mobile_);
  }
  pass_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.pass().size() > 0) {
    pass_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pass_);
  }
  code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.code().size() > 0) {
    code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.code_);
  }
  // @@protoc_insertion_point(copy_constructor:ttmall.DriverRegisterReq)
}

void DriverRegisterReq::SharedCtor() {
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mobile_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pass_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

DriverRegisterReq::~DriverRegisterReq() {
  // @@protoc_insertion_point(destructor:ttmall.DriverRegisterReq)
  SharedDtor();
}

void DriverRegisterReq::SharedDtor() {
  token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mobile_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pass_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DriverRegisterReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DriverRegisterReq::descriptor() {
  protobuf_driver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_driver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DriverRegisterReq& DriverRegisterReq::default_instance() {
  protobuf_driver_2eproto::InitDefaults();
  return *internal_default_instance();
}

DriverRegisterReq* DriverRegisterReq::New(::google::protobuf::Arena* arena) const {
  DriverRegisterReq* n = new DriverRegisterReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DriverRegisterReq::Clear() {
// @@protoc_insertion_point(message_clear_start:ttmall.DriverRegisterReq)
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mobile_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pass_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool DriverRegisterReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ttmall.DriverRegisterReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string token = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ttmall.DriverRegisterReq.token"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string mobile = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mobile()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->mobile().data(), this->mobile().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ttmall.DriverRegisterReq.mobile"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string pass = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pass()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->pass().data(), this->pass().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ttmall.DriverRegisterReq.pass"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string code = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_code()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->code().data(), this->code().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ttmall.DriverRegisterReq.code"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ttmall.DriverRegisterReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ttmall.DriverRegisterReq)
  return false;
#undef DO_
}

void DriverRegisterReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ttmall.DriverRegisterReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string token = 1;
  if (this->token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ttmall.DriverRegisterReq.token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->token(), output);
  }

  // string mobile = 2;
  if (this->mobile().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->mobile().data(), this->mobile().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ttmall.DriverRegisterReq.mobile");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->mobile(), output);
  }

  // string pass = 3;
  if (this->pass().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->pass().data(), this->pass().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ttmall.DriverRegisterReq.pass");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->pass(), output);
  }

  // string code = 4;
  if (this->code().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->code().data(), this->code().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ttmall.DriverRegisterReq.code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->code(), output);
  }

  // @@protoc_insertion_point(serialize_end:ttmall.DriverRegisterReq)
}

::google::protobuf::uint8* DriverRegisterReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ttmall.DriverRegisterReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string token = 1;
  if (this->token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ttmall.DriverRegisterReq.token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->token(), target);
  }

  // string mobile = 2;
  if (this->mobile().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->mobile().data(), this->mobile().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ttmall.DriverRegisterReq.mobile");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->mobile(), target);
  }

  // string pass = 3;
  if (this->pass().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->pass().data(), this->pass().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ttmall.DriverRegisterReq.pass");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->pass(), target);
  }

  // string code = 4;
  if (this->code().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->code().data(), this->code().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ttmall.DriverRegisterReq.code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->code(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ttmall.DriverRegisterReq)
  return target;
}

size_t DriverRegisterReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ttmall.DriverRegisterReq)
  size_t total_size = 0;

  // string token = 1;
  if (this->token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->token());
  }

  // string mobile = 2;
  if (this->mobile().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->mobile());
  }

  // string pass = 3;
  if (this->pass().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->pass());
  }

  // string code = 4;
  if (this->code().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->code());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DriverRegisterReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ttmall.DriverRegisterReq)
  GOOGLE_DCHECK_NE(&from, this);
  const DriverRegisterReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DriverRegisterReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ttmall.DriverRegisterReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ttmall.DriverRegisterReq)
    MergeFrom(*source);
  }
}

void DriverRegisterReq::MergeFrom(const DriverRegisterReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ttmall.DriverRegisterReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.token().size() > 0) {

    token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  if (from.mobile().size() > 0) {

    mobile_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mobile_);
  }
  if (from.pass().size() > 0) {

    pass_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pass_);
  }
  if (from.code().size() > 0) {

    code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.code_);
  }
}

void DriverRegisterReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ttmall.DriverRegisterReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DriverRegisterReq::CopyFrom(const DriverRegisterReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ttmall.DriverRegisterReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DriverRegisterReq::IsInitialized() const {
  return true;
}

void DriverRegisterReq::Swap(DriverRegisterReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DriverRegisterReq::InternalSwap(DriverRegisterReq* other) {
  token_.Swap(&other->token_);
  mobile_.Swap(&other->mobile_);
  pass_.Swap(&other->pass_);
  code_.Swap(&other->code_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DriverRegisterReq::GetMetadata() const {
  protobuf_driver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_driver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DriverRegisterReq

// string token = 1;
void DriverRegisterReq::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DriverRegisterReq::token() const {
  // @@protoc_insertion_point(field_get:ttmall.DriverRegisterReq.token)
  return token_.GetNoArena();
}
void DriverRegisterReq::set_token(const ::std::string& value) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ttmall.DriverRegisterReq.token)
}
#if LANG_CXX11
void DriverRegisterReq::set_token(::std::string&& value) {
  
  token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ttmall.DriverRegisterReq.token)
}
#endif
void DriverRegisterReq::set_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ttmall.DriverRegisterReq.token)
}
void DriverRegisterReq::set_token(const char* value, size_t size) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ttmall.DriverRegisterReq.token)
}
::std::string* DriverRegisterReq::mutable_token() {
  
  // @@protoc_insertion_point(field_mutable:ttmall.DriverRegisterReq.token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DriverRegisterReq::release_token() {
  // @@protoc_insertion_point(field_release:ttmall.DriverRegisterReq.token)
  
  return token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DriverRegisterReq::set_allocated_token(::std::string* token) {
  if (token != NULL) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:ttmall.DriverRegisterReq.token)
}

// string mobile = 2;
void DriverRegisterReq::clear_mobile() {
  mobile_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DriverRegisterReq::mobile() const {
  // @@protoc_insertion_point(field_get:ttmall.DriverRegisterReq.mobile)
  return mobile_.GetNoArena();
}
void DriverRegisterReq::set_mobile(const ::std::string& value) {
  
  mobile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ttmall.DriverRegisterReq.mobile)
}
#if LANG_CXX11
void DriverRegisterReq::set_mobile(::std::string&& value) {
  
  mobile_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ttmall.DriverRegisterReq.mobile)
}
#endif
void DriverRegisterReq::set_mobile(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  mobile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ttmall.DriverRegisterReq.mobile)
}
void DriverRegisterReq::set_mobile(const char* value, size_t size) {
  
  mobile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ttmall.DriverRegisterReq.mobile)
}
::std::string* DriverRegisterReq::mutable_mobile() {
  
  // @@protoc_insertion_point(field_mutable:ttmall.DriverRegisterReq.mobile)
  return mobile_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DriverRegisterReq::release_mobile() {
  // @@protoc_insertion_point(field_release:ttmall.DriverRegisterReq.mobile)
  
  return mobile_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DriverRegisterReq::set_allocated_mobile(::std::string* mobile) {
  if (mobile != NULL) {
    
  } else {
    
  }
  mobile_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mobile);
  // @@protoc_insertion_point(field_set_allocated:ttmall.DriverRegisterReq.mobile)
}

// string pass = 3;
void DriverRegisterReq::clear_pass() {
  pass_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DriverRegisterReq::pass() const {
  // @@protoc_insertion_point(field_get:ttmall.DriverRegisterReq.pass)
  return pass_.GetNoArena();
}
void DriverRegisterReq::set_pass(const ::std::string& value) {
  
  pass_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ttmall.DriverRegisterReq.pass)
}
#if LANG_CXX11
void DriverRegisterReq::set_pass(::std::string&& value) {
  
  pass_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ttmall.DriverRegisterReq.pass)
}
#endif
void DriverRegisterReq::set_pass(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  pass_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ttmall.DriverRegisterReq.pass)
}
void DriverRegisterReq::set_pass(const char* value, size_t size) {
  
  pass_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ttmall.DriverRegisterReq.pass)
}
::std::string* DriverRegisterReq::mutable_pass() {
  
  // @@protoc_insertion_point(field_mutable:ttmall.DriverRegisterReq.pass)
  return pass_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DriverRegisterReq::release_pass() {
  // @@protoc_insertion_point(field_release:ttmall.DriverRegisterReq.pass)
  
  return pass_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DriverRegisterReq::set_allocated_pass(::std::string* pass) {
  if (pass != NULL) {
    
  } else {
    
  }
  pass_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pass);
  // @@protoc_insertion_point(field_set_allocated:ttmall.DriverRegisterReq.pass)
}

// string code = 4;
void DriverRegisterReq::clear_code() {
  code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DriverRegisterReq::code() const {
  // @@protoc_insertion_point(field_get:ttmall.DriverRegisterReq.code)
  return code_.GetNoArena();
}
void DriverRegisterReq::set_code(const ::std::string& value) {
  
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ttmall.DriverRegisterReq.code)
}
#if LANG_CXX11
void DriverRegisterReq::set_code(::std::string&& value) {
  
  code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ttmall.DriverRegisterReq.code)
}
#endif
void DriverRegisterReq::set_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ttmall.DriverRegisterReq.code)
}
void DriverRegisterReq::set_code(const char* value, size_t size) {
  
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ttmall.DriverRegisterReq.code)
}
::std::string* DriverRegisterReq::mutable_code() {
  
  // @@protoc_insertion_point(field_mutable:ttmall.DriverRegisterReq.code)
  return code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DriverRegisterReq::release_code() {
  // @@protoc_insertion_point(field_release:ttmall.DriverRegisterReq.code)
  
  return code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DriverRegisterReq::set_allocated_code(::std::string* code) {
  if (code != NULL) {
    
  } else {
    
  }
  code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), code);
  // @@protoc_insertion_point(field_set_allocated:ttmall.DriverRegisterReq.code)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DriverRegisterRep::kTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DriverRegisterRep::DriverRegisterRep()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_driver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ttmall.DriverRegisterRep)
}
DriverRegisterRep::DriverRegisterRep(const DriverRegisterRep& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.token().size() > 0) {
    token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  // @@protoc_insertion_point(copy_constructor:ttmall.DriverRegisterRep)
}

void DriverRegisterRep::SharedCtor() {
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

DriverRegisterRep::~DriverRegisterRep() {
  // @@protoc_insertion_point(destructor:ttmall.DriverRegisterRep)
  SharedDtor();
}

void DriverRegisterRep::SharedDtor() {
  token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DriverRegisterRep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DriverRegisterRep::descriptor() {
  protobuf_driver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_driver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DriverRegisterRep& DriverRegisterRep::default_instance() {
  protobuf_driver_2eproto::InitDefaults();
  return *internal_default_instance();
}

DriverRegisterRep* DriverRegisterRep::New(::google::protobuf::Arena* arena) const {
  DriverRegisterRep* n = new DriverRegisterRep;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DriverRegisterRep::Clear() {
// @@protoc_insertion_point(message_clear_start:ttmall.DriverRegisterRep)
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool DriverRegisterRep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ttmall.DriverRegisterRep)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string token = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ttmall.DriverRegisterRep.token"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ttmall.DriverRegisterRep)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ttmall.DriverRegisterRep)
  return false;
#undef DO_
}

void DriverRegisterRep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ttmall.DriverRegisterRep)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string token = 1;
  if (this->token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ttmall.DriverRegisterRep.token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->token(), output);
  }

  // @@protoc_insertion_point(serialize_end:ttmall.DriverRegisterRep)
}

::google::protobuf::uint8* DriverRegisterRep::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ttmall.DriverRegisterRep)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string token = 1;
  if (this->token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ttmall.DriverRegisterRep.token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->token(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ttmall.DriverRegisterRep)
  return target;
}

size_t DriverRegisterRep::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ttmall.DriverRegisterRep)
  size_t total_size = 0;

  // string token = 1;
  if (this->token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->token());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DriverRegisterRep::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ttmall.DriverRegisterRep)
  GOOGLE_DCHECK_NE(&from, this);
  const DriverRegisterRep* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DriverRegisterRep>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ttmall.DriverRegisterRep)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ttmall.DriverRegisterRep)
    MergeFrom(*source);
  }
}

void DriverRegisterRep::MergeFrom(const DriverRegisterRep& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ttmall.DriverRegisterRep)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.token().size() > 0) {

    token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
}

void DriverRegisterRep::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ttmall.DriverRegisterRep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DriverRegisterRep::CopyFrom(const DriverRegisterRep& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ttmall.DriverRegisterRep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DriverRegisterRep::IsInitialized() const {
  return true;
}

void DriverRegisterRep::Swap(DriverRegisterRep* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DriverRegisterRep::InternalSwap(DriverRegisterRep* other) {
  token_.Swap(&other->token_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DriverRegisterRep::GetMetadata() const {
  protobuf_driver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_driver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DriverRegisterRep

// string token = 1;
void DriverRegisterRep::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DriverRegisterRep::token() const {
  // @@protoc_insertion_point(field_get:ttmall.DriverRegisterRep.token)
  return token_.GetNoArena();
}
void DriverRegisterRep::set_token(const ::std::string& value) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ttmall.DriverRegisterRep.token)
}
#if LANG_CXX11
void DriverRegisterRep::set_token(::std::string&& value) {
  
  token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ttmall.DriverRegisterRep.token)
}
#endif
void DriverRegisterRep::set_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ttmall.DriverRegisterRep.token)
}
void DriverRegisterRep::set_token(const char* value, size_t size) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ttmall.DriverRegisterRep.token)
}
::std::string* DriverRegisterRep::mutable_token() {
  
  // @@protoc_insertion_point(field_mutable:ttmall.DriverRegisterRep.token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DriverRegisterRep::release_token() {
  // @@protoc_insertion_point(field_release:ttmall.DriverRegisterRep.token)
  
  return token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DriverRegisterRep::set_allocated_token(::std::string* token) {
  if (token != NULL) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:ttmall.DriverRegisterRep.token)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SubmitAuthInfoReq::kTokenFieldNumber;
const int SubmitAuthInfoReq::kNameFieldNumber;
const int SubmitAuthInfoReq::kIdNumberFieldNumber;
const int SubmitAuthInfoReq::kDrivingDateFieldNumber;
const int SubmitAuthInfoReq::kDrivingPhotosFieldNumber;
const int SubmitAuthInfoReq::kRegionsIdFieldNumber;
const int SubmitAuthInfoReq::kCarIdFieldNumber;
const int SubmitAuthInfoReq::kCarNumberFieldNumber;
const int SubmitAuthInfoReq::kCarOwnerFieldNumber;
const int SubmitAuthInfoReq::kCarLicencesFieldNumber;
const int SubmitAuthInfoReq::kIsIndepFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SubmitAuthInfoReq::SubmitAuthInfoReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_driver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ttmall.SubmitAuthInfoReq)
}
SubmitAuthInfoReq::SubmitAuthInfoReq(const SubmitAuthInfoReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      driving_photos_(from.driving_photos_),
      regions_id_(from.regions_id_),
      car_licences_(from.car_licences_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.token().size() > 0) {
    token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  id_number_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.id_number().size() > 0) {
    id_number_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_number_);
  }
  driving_date_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.driving_date().size() > 0) {
    driving_date_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.driving_date_);
  }
  car_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.car_id().size() > 0) {
    car_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.car_id_);
  }
  car_number_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.car_number().size() > 0) {
    car_number_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.car_number_);
  }
  car_owner_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.car_owner().size() > 0) {
    car_owner_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.car_owner_);
  }
  is_indep_ = from.is_indep_;
  // @@protoc_insertion_point(copy_constructor:ttmall.SubmitAuthInfoReq)
}

void SubmitAuthInfoReq::SharedCtor() {
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_number_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  driving_date_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  car_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  car_number_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  car_owner_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  is_indep_ = false;
  _cached_size_ = 0;
}

SubmitAuthInfoReq::~SubmitAuthInfoReq() {
  // @@protoc_insertion_point(destructor:ttmall.SubmitAuthInfoReq)
  SharedDtor();
}

void SubmitAuthInfoReq::SharedDtor() {
  token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_number_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  driving_date_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  car_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  car_number_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  car_owner_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SubmitAuthInfoReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SubmitAuthInfoReq::descriptor() {
  protobuf_driver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_driver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SubmitAuthInfoReq& SubmitAuthInfoReq::default_instance() {
  protobuf_driver_2eproto::InitDefaults();
  return *internal_default_instance();
}

SubmitAuthInfoReq* SubmitAuthInfoReq::New(::google::protobuf::Arena* arena) const {
  SubmitAuthInfoReq* n = new SubmitAuthInfoReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SubmitAuthInfoReq::Clear() {
// @@protoc_insertion_point(message_clear_start:ttmall.SubmitAuthInfoReq)
  driving_photos_.Clear();
  regions_id_.Clear();
  car_licences_.Clear();
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_number_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  driving_date_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  car_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  car_number_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  car_owner_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  is_indep_ = false;
}

bool SubmitAuthInfoReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ttmall.SubmitAuthInfoReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string token = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ttmall.SubmitAuthInfoReq.token"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ttmall.SubmitAuthInfoReq.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string id_number = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id_number()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id_number().data(), this->id_number().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ttmall.SubmitAuthInfoReq.id_number"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string driving_date = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_driving_date()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->driving_date().data(), this->driving_date().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ttmall.SubmitAuthInfoReq.driving_date"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bytes driving_photos = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_driving_photos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string regions_id = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_regions_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->regions_id(this->regions_id_size() - 1).data(),
            this->regions_id(this->regions_id_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ttmall.SubmitAuthInfoReq.regions_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string car_id = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_car_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->car_id().data(), this->car_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ttmall.SubmitAuthInfoReq.car_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string car_number = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_car_number()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->car_number().data(), this->car_number().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ttmall.SubmitAuthInfoReq.car_number"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string car_owner = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_car_owner()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->car_owner().data(), this->car_owner().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ttmall.SubmitAuthInfoReq.car_owner"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bytes car_licences = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_car_licences()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_indep = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_indep_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ttmall.SubmitAuthInfoReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ttmall.SubmitAuthInfoReq)
  return false;
#undef DO_
}

void SubmitAuthInfoReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ttmall.SubmitAuthInfoReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string token = 1;
  if (this->token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ttmall.SubmitAuthInfoReq.token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->token(), output);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ttmall.SubmitAuthInfoReq.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // string id_number = 3;
  if (this->id_number().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id_number().data(), this->id_number().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ttmall.SubmitAuthInfoReq.id_number");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->id_number(), output);
  }

  // string driving_date = 4;
  if (this->driving_date().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->driving_date().data(), this->driving_date().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ttmall.SubmitAuthInfoReq.driving_date");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->driving_date(), output);
  }

  // repeated bytes driving_photos = 5;
  for (int i = 0, n = this->driving_photos_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->driving_photos(i), output);
  }

  // repeated string regions_id = 6;
  for (int i = 0, n = this->regions_id_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->regions_id(i).data(), this->regions_id(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ttmall.SubmitAuthInfoReq.regions_id");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->regions_id(i), output);
  }

  // string car_id = 7;
  if (this->car_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->car_id().data(), this->car_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ttmall.SubmitAuthInfoReq.car_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->car_id(), output);
  }

  // string car_number = 8;
  if (this->car_number().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->car_number().data(), this->car_number().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ttmall.SubmitAuthInfoReq.car_number");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->car_number(), output);
  }

  // string car_owner = 9;
  if (this->car_owner().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->car_owner().data(), this->car_owner().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ttmall.SubmitAuthInfoReq.car_owner");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->car_owner(), output);
  }

  // repeated bytes car_licences = 10;
  for (int i = 0, n = this->car_licences_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      10, this->car_licences(i), output);
  }

  // bool is_indep = 11;
  if (this->is_indep() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->is_indep(), output);
  }

  // @@protoc_insertion_point(serialize_end:ttmall.SubmitAuthInfoReq)
}

::google::protobuf::uint8* SubmitAuthInfoReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ttmall.SubmitAuthInfoReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string token = 1;
  if (this->token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ttmall.SubmitAuthInfoReq.token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->token(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ttmall.SubmitAuthInfoReq.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // string id_number = 3;
  if (this->id_number().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id_number().data(), this->id_number().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ttmall.SubmitAuthInfoReq.id_number");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->id_number(), target);
  }

  // string driving_date = 4;
  if (this->driving_date().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->driving_date().data(), this->driving_date().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ttmall.SubmitAuthInfoReq.driving_date");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->driving_date(), target);
  }

  // repeated bytes driving_photos = 5;
  for (int i = 0, n = this->driving_photos_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(5, this->driving_photos(i), target);
  }

  // repeated string regions_id = 6;
  for (int i = 0, n = this->regions_id_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->regions_id(i).data(), this->regions_id(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ttmall.SubmitAuthInfoReq.regions_id");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(6, this->regions_id(i), target);
  }

  // string car_id = 7;
  if (this->car_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->car_id().data(), this->car_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ttmall.SubmitAuthInfoReq.car_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->car_id(), target);
  }

  // string car_number = 8;
  if (this->car_number().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->car_number().data(), this->car_number().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ttmall.SubmitAuthInfoReq.car_number");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->car_number(), target);
  }

  // string car_owner = 9;
  if (this->car_owner().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->car_owner().data(), this->car_owner().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ttmall.SubmitAuthInfoReq.car_owner");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->car_owner(), target);
  }

  // repeated bytes car_licences = 10;
  for (int i = 0, n = this->car_licences_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(10, this->car_licences(i), target);
  }

  // bool is_indep = 11;
  if (this->is_indep() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->is_indep(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ttmall.SubmitAuthInfoReq)
  return target;
}

size_t SubmitAuthInfoReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ttmall.SubmitAuthInfoReq)
  size_t total_size = 0;

  // repeated bytes driving_photos = 5;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->driving_photos_size());
  for (int i = 0, n = this->driving_photos_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->driving_photos(i));
  }

  // repeated string regions_id = 6;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->regions_id_size());
  for (int i = 0, n = this->regions_id_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->regions_id(i));
  }

  // repeated bytes car_licences = 10;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->car_licences_size());
  for (int i = 0, n = this->car_licences_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->car_licences(i));
  }

  // string token = 1;
  if (this->token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->token());
  }

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string id_number = 3;
  if (this->id_number().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id_number());
  }

  // string driving_date = 4;
  if (this->driving_date().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->driving_date());
  }

  // string car_id = 7;
  if (this->car_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->car_id());
  }

  // string car_number = 8;
  if (this->car_number().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->car_number());
  }

  // string car_owner = 9;
  if (this->car_owner().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->car_owner());
  }

  // bool is_indep = 11;
  if (this->is_indep() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SubmitAuthInfoReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ttmall.SubmitAuthInfoReq)
  GOOGLE_DCHECK_NE(&from, this);
  const SubmitAuthInfoReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SubmitAuthInfoReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ttmall.SubmitAuthInfoReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ttmall.SubmitAuthInfoReq)
    MergeFrom(*source);
  }
}

void SubmitAuthInfoReq::MergeFrom(const SubmitAuthInfoReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ttmall.SubmitAuthInfoReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  driving_photos_.MergeFrom(from.driving_photos_);
  regions_id_.MergeFrom(from.regions_id_);
  car_licences_.MergeFrom(from.car_licences_);
  if (from.token().size() > 0) {

    token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.id_number().size() > 0) {

    id_number_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_number_);
  }
  if (from.driving_date().size() > 0) {

    driving_date_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.driving_date_);
  }
  if (from.car_id().size() > 0) {

    car_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.car_id_);
  }
  if (from.car_number().size() > 0) {

    car_number_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.car_number_);
  }
  if (from.car_owner().size() > 0) {

    car_owner_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.car_owner_);
  }
  if (from.is_indep() != 0) {
    set_is_indep(from.is_indep());
  }
}

void SubmitAuthInfoReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ttmall.SubmitAuthInfoReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubmitAuthInfoReq::CopyFrom(const SubmitAuthInfoReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ttmall.SubmitAuthInfoReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubmitAuthInfoReq::IsInitialized() const {
  return true;
}

void SubmitAuthInfoReq::Swap(SubmitAuthInfoReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SubmitAuthInfoReq::InternalSwap(SubmitAuthInfoReq* other) {
  driving_photos_.InternalSwap(&other->driving_photos_);
  regions_id_.InternalSwap(&other->regions_id_);
  car_licences_.InternalSwap(&other->car_licences_);
  token_.Swap(&other->token_);
  name_.Swap(&other->name_);
  id_number_.Swap(&other->id_number_);
  driving_date_.Swap(&other->driving_date_);
  car_id_.Swap(&other->car_id_);
  car_number_.Swap(&other->car_number_);
  car_owner_.Swap(&other->car_owner_);
  std::swap(is_indep_, other->is_indep_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SubmitAuthInfoReq::GetMetadata() const {
  protobuf_driver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_driver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SubmitAuthInfoReq

// string token = 1;
void SubmitAuthInfoReq::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SubmitAuthInfoReq::token() const {
  // @@protoc_insertion_point(field_get:ttmall.SubmitAuthInfoReq.token)
  return token_.GetNoArena();
}
void SubmitAuthInfoReq::set_token(const ::std::string& value) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ttmall.SubmitAuthInfoReq.token)
}
#if LANG_CXX11
void SubmitAuthInfoReq::set_token(::std::string&& value) {
  
  token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ttmall.SubmitAuthInfoReq.token)
}
#endif
void SubmitAuthInfoReq::set_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ttmall.SubmitAuthInfoReq.token)
}
void SubmitAuthInfoReq::set_token(const char* value, size_t size) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ttmall.SubmitAuthInfoReq.token)
}
::std::string* SubmitAuthInfoReq::mutable_token() {
  
  // @@protoc_insertion_point(field_mutable:ttmall.SubmitAuthInfoReq.token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SubmitAuthInfoReq::release_token() {
  // @@protoc_insertion_point(field_release:ttmall.SubmitAuthInfoReq.token)
  
  return token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SubmitAuthInfoReq::set_allocated_token(::std::string* token) {
  if (token != NULL) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:ttmall.SubmitAuthInfoReq.token)
}

// string name = 2;
void SubmitAuthInfoReq::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SubmitAuthInfoReq::name() const {
  // @@protoc_insertion_point(field_get:ttmall.SubmitAuthInfoReq.name)
  return name_.GetNoArena();
}
void SubmitAuthInfoReq::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ttmall.SubmitAuthInfoReq.name)
}
#if LANG_CXX11
void SubmitAuthInfoReq::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ttmall.SubmitAuthInfoReq.name)
}
#endif
void SubmitAuthInfoReq::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ttmall.SubmitAuthInfoReq.name)
}
void SubmitAuthInfoReq::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ttmall.SubmitAuthInfoReq.name)
}
::std::string* SubmitAuthInfoReq::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:ttmall.SubmitAuthInfoReq.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SubmitAuthInfoReq::release_name() {
  // @@protoc_insertion_point(field_release:ttmall.SubmitAuthInfoReq.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SubmitAuthInfoReq::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:ttmall.SubmitAuthInfoReq.name)
}

// string id_number = 3;
void SubmitAuthInfoReq::clear_id_number() {
  id_number_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SubmitAuthInfoReq::id_number() const {
  // @@protoc_insertion_point(field_get:ttmall.SubmitAuthInfoReq.id_number)
  return id_number_.GetNoArena();
}
void SubmitAuthInfoReq::set_id_number(const ::std::string& value) {
  
  id_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ttmall.SubmitAuthInfoReq.id_number)
}
#if LANG_CXX11
void SubmitAuthInfoReq::set_id_number(::std::string&& value) {
  
  id_number_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ttmall.SubmitAuthInfoReq.id_number)
}
#endif
void SubmitAuthInfoReq::set_id_number(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ttmall.SubmitAuthInfoReq.id_number)
}
void SubmitAuthInfoReq::set_id_number(const char* value, size_t size) {
  
  id_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ttmall.SubmitAuthInfoReq.id_number)
}
::std::string* SubmitAuthInfoReq::mutable_id_number() {
  
  // @@protoc_insertion_point(field_mutable:ttmall.SubmitAuthInfoReq.id_number)
  return id_number_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SubmitAuthInfoReq::release_id_number() {
  // @@protoc_insertion_point(field_release:ttmall.SubmitAuthInfoReq.id_number)
  
  return id_number_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SubmitAuthInfoReq::set_allocated_id_number(::std::string* id_number) {
  if (id_number != NULL) {
    
  } else {
    
  }
  id_number_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id_number);
  // @@protoc_insertion_point(field_set_allocated:ttmall.SubmitAuthInfoReq.id_number)
}

// string driving_date = 4;
void SubmitAuthInfoReq::clear_driving_date() {
  driving_date_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SubmitAuthInfoReq::driving_date() const {
  // @@protoc_insertion_point(field_get:ttmall.SubmitAuthInfoReq.driving_date)
  return driving_date_.GetNoArena();
}
void SubmitAuthInfoReq::set_driving_date(const ::std::string& value) {
  
  driving_date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ttmall.SubmitAuthInfoReq.driving_date)
}
#if LANG_CXX11
void SubmitAuthInfoReq::set_driving_date(::std::string&& value) {
  
  driving_date_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ttmall.SubmitAuthInfoReq.driving_date)
}
#endif
void SubmitAuthInfoReq::set_driving_date(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  driving_date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ttmall.SubmitAuthInfoReq.driving_date)
}
void SubmitAuthInfoReq::set_driving_date(const char* value, size_t size) {
  
  driving_date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ttmall.SubmitAuthInfoReq.driving_date)
}
::std::string* SubmitAuthInfoReq::mutable_driving_date() {
  
  // @@protoc_insertion_point(field_mutable:ttmall.SubmitAuthInfoReq.driving_date)
  return driving_date_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SubmitAuthInfoReq::release_driving_date() {
  // @@protoc_insertion_point(field_release:ttmall.SubmitAuthInfoReq.driving_date)
  
  return driving_date_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SubmitAuthInfoReq::set_allocated_driving_date(::std::string* driving_date) {
  if (driving_date != NULL) {
    
  } else {
    
  }
  driving_date_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), driving_date);
  // @@protoc_insertion_point(field_set_allocated:ttmall.SubmitAuthInfoReq.driving_date)
}

// repeated bytes driving_photos = 5;
int SubmitAuthInfoReq::driving_photos_size() const {
  return driving_photos_.size();
}
void SubmitAuthInfoReq::clear_driving_photos() {
  driving_photos_.Clear();
}
const ::std::string& SubmitAuthInfoReq::driving_photos(int index) const {
  // @@protoc_insertion_point(field_get:ttmall.SubmitAuthInfoReq.driving_photos)
  return driving_photos_.Get(index);
}
::std::string* SubmitAuthInfoReq::mutable_driving_photos(int index) {
  // @@protoc_insertion_point(field_mutable:ttmall.SubmitAuthInfoReq.driving_photos)
  return driving_photos_.Mutable(index);
}
void SubmitAuthInfoReq::set_driving_photos(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ttmall.SubmitAuthInfoReq.driving_photos)
  driving_photos_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void SubmitAuthInfoReq::set_driving_photos(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ttmall.SubmitAuthInfoReq.driving_photos)
  driving_photos_.Mutable(index)->assign(std::move(value));
}
#endif
void SubmitAuthInfoReq::set_driving_photos(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  driving_photos_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ttmall.SubmitAuthInfoReq.driving_photos)
}
void SubmitAuthInfoReq::set_driving_photos(int index, const void* value, size_t size) {
  driving_photos_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ttmall.SubmitAuthInfoReq.driving_photos)
}
::std::string* SubmitAuthInfoReq::add_driving_photos() {
  // @@protoc_insertion_point(field_add_mutable:ttmall.SubmitAuthInfoReq.driving_photos)
  return driving_photos_.Add();
}
void SubmitAuthInfoReq::add_driving_photos(const ::std::string& value) {
  driving_photos_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ttmall.SubmitAuthInfoReq.driving_photos)
}
#if LANG_CXX11
void SubmitAuthInfoReq::add_driving_photos(::std::string&& value) {
  driving_photos_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ttmall.SubmitAuthInfoReq.driving_photos)
}
#endif
void SubmitAuthInfoReq::add_driving_photos(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  driving_photos_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ttmall.SubmitAuthInfoReq.driving_photos)
}
void SubmitAuthInfoReq::add_driving_photos(const void* value, size_t size) {
  driving_photos_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ttmall.SubmitAuthInfoReq.driving_photos)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
SubmitAuthInfoReq::driving_photos() const {
  // @@protoc_insertion_point(field_list:ttmall.SubmitAuthInfoReq.driving_photos)
  return driving_photos_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
SubmitAuthInfoReq::mutable_driving_photos() {
  // @@protoc_insertion_point(field_mutable_list:ttmall.SubmitAuthInfoReq.driving_photos)
  return &driving_photos_;
}

// repeated string regions_id = 6;
int SubmitAuthInfoReq::regions_id_size() const {
  return regions_id_.size();
}
void SubmitAuthInfoReq::clear_regions_id() {
  regions_id_.Clear();
}
const ::std::string& SubmitAuthInfoReq::regions_id(int index) const {
  // @@protoc_insertion_point(field_get:ttmall.SubmitAuthInfoReq.regions_id)
  return regions_id_.Get(index);
}
::std::string* SubmitAuthInfoReq::mutable_regions_id(int index) {
  // @@protoc_insertion_point(field_mutable:ttmall.SubmitAuthInfoReq.regions_id)
  return regions_id_.Mutable(index);
}
void SubmitAuthInfoReq::set_regions_id(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ttmall.SubmitAuthInfoReq.regions_id)
  regions_id_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void SubmitAuthInfoReq::set_regions_id(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ttmall.SubmitAuthInfoReq.regions_id)
  regions_id_.Mutable(index)->assign(std::move(value));
}
#endif
void SubmitAuthInfoReq::set_regions_id(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  regions_id_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ttmall.SubmitAuthInfoReq.regions_id)
}
void SubmitAuthInfoReq::set_regions_id(int index, const char* value, size_t size) {
  regions_id_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ttmall.SubmitAuthInfoReq.regions_id)
}
::std::string* SubmitAuthInfoReq::add_regions_id() {
  // @@protoc_insertion_point(field_add_mutable:ttmall.SubmitAuthInfoReq.regions_id)
  return regions_id_.Add();
}
void SubmitAuthInfoReq::add_regions_id(const ::std::string& value) {
  regions_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ttmall.SubmitAuthInfoReq.regions_id)
}
#if LANG_CXX11
void SubmitAuthInfoReq::add_regions_id(::std::string&& value) {
  regions_id_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ttmall.SubmitAuthInfoReq.regions_id)
}
#endif
void SubmitAuthInfoReq::add_regions_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  regions_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ttmall.SubmitAuthInfoReq.regions_id)
}
void SubmitAuthInfoReq::add_regions_id(const char* value, size_t size) {
  regions_id_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ttmall.SubmitAuthInfoReq.regions_id)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
SubmitAuthInfoReq::regions_id() const {
  // @@protoc_insertion_point(field_list:ttmall.SubmitAuthInfoReq.regions_id)
  return regions_id_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
SubmitAuthInfoReq::mutable_regions_id() {
  // @@protoc_insertion_point(field_mutable_list:ttmall.SubmitAuthInfoReq.regions_id)
  return &regions_id_;
}

// string car_id = 7;
void SubmitAuthInfoReq::clear_car_id() {
  car_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SubmitAuthInfoReq::car_id() const {
  // @@protoc_insertion_point(field_get:ttmall.SubmitAuthInfoReq.car_id)
  return car_id_.GetNoArena();
}
void SubmitAuthInfoReq::set_car_id(const ::std::string& value) {
  
  car_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ttmall.SubmitAuthInfoReq.car_id)
}
#if LANG_CXX11
void SubmitAuthInfoReq::set_car_id(::std::string&& value) {
  
  car_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ttmall.SubmitAuthInfoReq.car_id)
}
#endif
void SubmitAuthInfoReq::set_car_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  car_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ttmall.SubmitAuthInfoReq.car_id)
}
void SubmitAuthInfoReq::set_car_id(const char* value, size_t size) {
  
  car_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ttmall.SubmitAuthInfoReq.car_id)
}
::std::string* SubmitAuthInfoReq::mutable_car_id() {
  
  // @@protoc_insertion_point(field_mutable:ttmall.SubmitAuthInfoReq.car_id)
  return car_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SubmitAuthInfoReq::release_car_id() {
  // @@protoc_insertion_point(field_release:ttmall.SubmitAuthInfoReq.car_id)
  
  return car_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SubmitAuthInfoReq::set_allocated_car_id(::std::string* car_id) {
  if (car_id != NULL) {
    
  } else {
    
  }
  car_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), car_id);
  // @@protoc_insertion_point(field_set_allocated:ttmall.SubmitAuthInfoReq.car_id)
}

// string car_number = 8;
void SubmitAuthInfoReq::clear_car_number() {
  car_number_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SubmitAuthInfoReq::car_number() const {
  // @@protoc_insertion_point(field_get:ttmall.SubmitAuthInfoReq.car_number)
  return car_number_.GetNoArena();
}
void SubmitAuthInfoReq::set_car_number(const ::std::string& value) {
  
  car_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ttmall.SubmitAuthInfoReq.car_number)
}
#if LANG_CXX11
void SubmitAuthInfoReq::set_car_number(::std::string&& value) {
  
  car_number_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ttmall.SubmitAuthInfoReq.car_number)
}
#endif
void SubmitAuthInfoReq::set_car_number(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  car_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ttmall.SubmitAuthInfoReq.car_number)
}
void SubmitAuthInfoReq::set_car_number(const char* value, size_t size) {
  
  car_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ttmall.SubmitAuthInfoReq.car_number)
}
::std::string* SubmitAuthInfoReq::mutable_car_number() {
  
  // @@protoc_insertion_point(field_mutable:ttmall.SubmitAuthInfoReq.car_number)
  return car_number_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SubmitAuthInfoReq::release_car_number() {
  // @@protoc_insertion_point(field_release:ttmall.SubmitAuthInfoReq.car_number)
  
  return car_number_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SubmitAuthInfoReq::set_allocated_car_number(::std::string* car_number) {
  if (car_number != NULL) {
    
  } else {
    
  }
  car_number_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), car_number);
  // @@protoc_insertion_point(field_set_allocated:ttmall.SubmitAuthInfoReq.car_number)
}

// string car_owner = 9;
void SubmitAuthInfoReq::clear_car_owner() {
  car_owner_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SubmitAuthInfoReq::car_owner() const {
  // @@protoc_insertion_point(field_get:ttmall.SubmitAuthInfoReq.car_owner)
  return car_owner_.GetNoArena();
}
void SubmitAuthInfoReq::set_car_owner(const ::std::string& value) {
  
  car_owner_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ttmall.SubmitAuthInfoReq.car_owner)
}
#if LANG_CXX11
void SubmitAuthInfoReq::set_car_owner(::std::string&& value) {
  
  car_owner_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ttmall.SubmitAuthInfoReq.car_owner)
}
#endif
void SubmitAuthInfoReq::set_car_owner(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  car_owner_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ttmall.SubmitAuthInfoReq.car_owner)
}
void SubmitAuthInfoReq::set_car_owner(const char* value, size_t size) {
  
  car_owner_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ttmall.SubmitAuthInfoReq.car_owner)
}
::std::string* SubmitAuthInfoReq::mutable_car_owner() {
  
  // @@protoc_insertion_point(field_mutable:ttmall.SubmitAuthInfoReq.car_owner)
  return car_owner_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SubmitAuthInfoReq::release_car_owner() {
  // @@protoc_insertion_point(field_release:ttmall.SubmitAuthInfoReq.car_owner)
  
  return car_owner_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SubmitAuthInfoReq::set_allocated_car_owner(::std::string* car_owner) {
  if (car_owner != NULL) {
    
  } else {
    
  }
  car_owner_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), car_owner);
  // @@protoc_insertion_point(field_set_allocated:ttmall.SubmitAuthInfoReq.car_owner)
}

// repeated bytes car_licences = 10;
int SubmitAuthInfoReq::car_licences_size() const {
  return car_licences_.size();
}
void SubmitAuthInfoReq::clear_car_licences() {
  car_licences_.Clear();
}
const ::std::string& SubmitAuthInfoReq::car_licences(int index) const {
  // @@protoc_insertion_point(field_get:ttmall.SubmitAuthInfoReq.car_licences)
  return car_licences_.Get(index);
}
::std::string* SubmitAuthInfoReq::mutable_car_licences(int index) {
  // @@protoc_insertion_point(field_mutable:ttmall.SubmitAuthInfoReq.car_licences)
  return car_licences_.Mutable(index);
}
void SubmitAuthInfoReq::set_car_licences(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ttmall.SubmitAuthInfoReq.car_licences)
  car_licences_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void SubmitAuthInfoReq::set_car_licences(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ttmall.SubmitAuthInfoReq.car_licences)
  car_licences_.Mutable(index)->assign(std::move(value));
}
#endif
void SubmitAuthInfoReq::set_car_licences(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  car_licences_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ttmall.SubmitAuthInfoReq.car_licences)
}
void SubmitAuthInfoReq::set_car_licences(int index, const void* value, size_t size) {
  car_licences_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ttmall.SubmitAuthInfoReq.car_licences)
}
::std::string* SubmitAuthInfoReq::add_car_licences() {
  // @@protoc_insertion_point(field_add_mutable:ttmall.SubmitAuthInfoReq.car_licences)
  return car_licences_.Add();
}
void SubmitAuthInfoReq::add_car_licences(const ::std::string& value) {
  car_licences_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ttmall.SubmitAuthInfoReq.car_licences)
}
#if LANG_CXX11
void SubmitAuthInfoReq::add_car_licences(::std::string&& value) {
  car_licences_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ttmall.SubmitAuthInfoReq.car_licences)
}
#endif
void SubmitAuthInfoReq::add_car_licences(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  car_licences_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ttmall.SubmitAuthInfoReq.car_licences)
}
void SubmitAuthInfoReq::add_car_licences(const void* value, size_t size) {
  car_licences_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ttmall.SubmitAuthInfoReq.car_licences)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
SubmitAuthInfoReq::car_licences() const {
  // @@protoc_insertion_point(field_list:ttmall.SubmitAuthInfoReq.car_licences)
  return car_licences_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
SubmitAuthInfoReq::mutable_car_licences() {
  // @@protoc_insertion_point(field_mutable_list:ttmall.SubmitAuthInfoReq.car_licences)
  return &car_licences_;
}

// bool is_indep = 11;
void SubmitAuthInfoReq::clear_is_indep() {
  is_indep_ = false;
}
bool SubmitAuthInfoReq::is_indep() const {
  // @@protoc_insertion_point(field_get:ttmall.SubmitAuthInfoReq.is_indep)
  return is_indep_;
}
void SubmitAuthInfoReq::set_is_indep(bool value) {
  
  is_indep_ = value;
  // @@protoc_insertion_point(field_set:ttmall.SubmitAuthInfoReq.is_indep)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SubmitAuthInfoRep::kInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SubmitAuthInfoRep::SubmitAuthInfoRep()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_driver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ttmall.SubmitAuthInfoRep)
}
SubmitAuthInfoRep::SubmitAuthInfoRep(const SubmitAuthInfoRep& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_info()) {
    info_ = new ::ttmall::DriverInfo(*from.info_);
  } else {
    info_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:ttmall.SubmitAuthInfoRep)
}

void SubmitAuthInfoRep::SharedCtor() {
  info_ = NULL;
  _cached_size_ = 0;
}

SubmitAuthInfoRep::~SubmitAuthInfoRep() {
  // @@protoc_insertion_point(destructor:ttmall.SubmitAuthInfoRep)
  SharedDtor();
}

void SubmitAuthInfoRep::SharedDtor() {
  if (this != internal_default_instance()) {
    delete info_;
  }
}

void SubmitAuthInfoRep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SubmitAuthInfoRep::descriptor() {
  protobuf_driver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_driver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SubmitAuthInfoRep& SubmitAuthInfoRep::default_instance() {
  protobuf_driver_2eproto::InitDefaults();
  return *internal_default_instance();
}

SubmitAuthInfoRep* SubmitAuthInfoRep::New(::google::protobuf::Arena* arena) const {
  SubmitAuthInfoRep* n = new SubmitAuthInfoRep;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SubmitAuthInfoRep::Clear() {
// @@protoc_insertion_point(message_clear_start:ttmall.SubmitAuthInfoRep)
  if (GetArenaNoVirtual() == NULL && info_ != NULL) {
    delete info_;
  }
  info_ = NULL;
}

bool SubmitAuthInfoRep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ttmall.SubmitAuthInfoRep)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ttmall.DriverInfo info = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ttmall.SubmitAuthInfoRep)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ttmall.SubmitAuthInfoRep)
  return false;
#undef DO_
}

void SubmitAuthInfoRep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ttmall.SubmitAuthInfoRep)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ttmall.DriverInfo info = 1;
  if (this->has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->info_, output);
  }

  // @@protoc_insertion_point(serialize_end:ttmall.SubmitAuthInfoRep)
}

::google::protobuf::uint8* SubmitAuthInfoRep::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ttmall.SubmitAuthInfoRep)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ttmall.DriverInfo info = 1;
  if (this->has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->info_, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ttmall.SubmitAuthInfoRep)
  return target;
}

size_t SubmitAuthInfoRep::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ttmall.SubmitAuthInfoRep)
  size_t total_size = 0;

  // .ttmall.DriverInfo info = 1;
  if (this->has_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->info_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SubmitAuthInfoRep::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ttmall.SubmitAuthInfoRep)
  GOOGLE_DCHECK_NE(&from, this);
  const SubmitAuthInfoRep* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SubmitAuthInfoRep>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ttmall.SubmitAuthInfoRep)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ttmall.SubmitAuthInfoRep)
    MergeFrom(*source);
  }
}

void SubmitAuthInfoRep::MergeFrom(const SubmitAuthInfoRep& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ttmall.SubmitAuthInfoRep)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_info()) {
    mutable_info()->::ttmall::DriverInfo::MergeFrom(from.info());
  }
}

void SubmitAuthInfoRep::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ttmall.SubmitAuthInfoRep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubmitAuthInfoRep::CopyFrom(const SubmitAuthInfoRep& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ttmall.SubmitAuthInfoRep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubmitAuthInfoRep::IsInitialized() const {
  return true;
}

void SubmitAuthInfoRep::Swap(SubmitAuthInfoRep* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SubmitAuthInfoRep::InternalSwap(SubmitAuthInfoRep* other) {
  std::swap(info_, other->info_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SubmitAuthInfoRep::GetMetadata() const {
  protobuf_driver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_driver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SubmitAuthInfoRep

// .ttmall.DriverInfo info = 1;
bool SubmitAuthInfoRep::has_info() const {
  return this != internal_default_instance() && info_ != NULL;
}
void SubmitAuthInfoRep::clear_info() {
  if (GetArenaNoVirtual() == NULL && info_ != NULL) delete info_;
  info_ = NULL;
}
const ::ttmall::DriverInfo& SubmitAuthInfoRep::info() const {
  // @@protoc_insertion_point(field_get:ttmall.SubmitAuthInfoRep.info)
  return info_ != NULL ? *info_
                         : *::ttmall::DriverInfo::internal_default_instance();
}
::ttmall::DriverInfo* SubmitAuthInfoRep::mutable_info() {
  
  if (info_ == NULL) {
    info_ = new ::ttmall::DriverInfo;
  }
  // @@protoc_insertion_point(field_mutable:ttmall.SubmitAuthInfoRep.info)
  return info_;
}
::ttmall::DriverInfo* SubmitAuthInfoRep::release_info() {
  // @@protoc_insertion_point(field_release:ttmall.SubmitAuthInfoRep.info)
  
  ::ttmall::DriverInfo* temp = info_;
  info_ = NULL;
  return temp;
}
void SubmitAuthInfoRep::set_allocated_info(::ttmall::DriverInfo* info) {
  delete info_;
  info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ttmall.SubmitAuthInfoRep.info)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetDriverInfoReq::kTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetDriverInfoReq::GetDriverInfoReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_driver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ttmall.GetDriverInfoReq)
}
GetDriverInfoReq::GetDriverInfoReq(const GetDriverInfoReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.token().size() > 0) {
    token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  // @@protoc_insertion_point(copy_constructor:ttmall.GetDriverInfoReq)
}

void GetDriverInfoReq::SharedCtor() {
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

GetDriverInfoReq::~GetDriverInfoReq() {
  // @@protoc_insertion_point(destructor:ttmall.GetDriverInfoReq)
  SharedDtor();
}

void GetDriverInfoReq::SharedDtor() {
  token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GetDriverInfoReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetDriverInfoReq::descriptor() {
  protobuf_driver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_driver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetDriverInfoReq& GetDriverInfoReq::default_instance() {
  protobuf_driver_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetDriverInfoReq* GetDriverInfoReq::New(::google::protobuf::Arena* arena) const {
  GetDriverInfoReq* n = new GetDriverInfoReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetDriverInfoReq::Clear() {
// @@protoc_insertion_point(message_clear_start:ttmall.GetDriverInfoReq)
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool GetDriverInfoReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ttmall.GetDriverInfoReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string token = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ttmall.GetDriverInfoReq.token"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ttmall.GetDriverInfoReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ttmall.GetDriverInfoReq)
  return false;
#undef DO_
}

void GetDriverInfoReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ttmall.GetDriverInfoReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string token = 1;
  if (this->token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ttmall.GetDriverInfoReq.token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->token(), output);
  }

  // @@protoc_insertion_point(serialize_end:ttmall.GetDriverInfoReq)
}

::google::protobuf::uint8* GetDriverInfoReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ttmall.GetDriverInfoReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string token = 1;
  if (this->token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ttmall.GetDriverInfoReq.token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->token(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ttmall.GetDriverInfoReq)
  return target;
}

size_t GetDriverInfoReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ttmall.GetDriverInfoReq)
  size_t total_size = 0;

  // string token = 1;
  if (this->token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->token());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetDriverInfoReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ttmall.GetDriverInfoReq)
  GOOGLE_DCHECK_NE(&from, this);
  const GetDriverInfoReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetDriverInfoReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ttmall.GetDriverInfoReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ttmall.GetDriverInfoReq)
    MergeFrom(*source);
  }
}

void GetDriverInfoReq::MergeFrom(const GetDriverInfoReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ttmall.GetDriverInfoReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.token().size() > 0) {

    token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
}

void GetDriverInfoReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ttmall.GetDriverInfoReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetDriverInfoReq::CopyFrom(const GetDriverInfoReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ttmall.GetDriverInfoReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetDriverInfoReq::IsInitialized() const {
  return true;
}

void GetDriverInfoReq::Swap(GetDriverInfoReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetDriverInfoReq::InternalSwap(GetDriverInfoReq* other) {
  token_.Swap(&other->token_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetDriverInfoReq::GetMetadata() const {
  protobuf_driver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_driver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetDriverInfoReq

// string token = 1;
void GetDriverInfoReq::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& GetDriverInfoReq::token() const {
  // @@protoc_insertion_point(field_get:ttmall.GetDriverInfoReq.token)
  return token_.GetNoArena();
}
void GetDriverInfoReq::set_token(const ::std::string& value) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ttmall.GetDriverInfoReq.token)
}
#if LANG_CXX11
void GetDriverInfoReq::set_token(::std::string&& value) {
  
  token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ttmall.GetDriverInfoReq.token)
}
#endif
void GetDriverInfoReq::set_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ttmall.GetDriverInfoReq.token)
}
void GetDriverInfoReq::set_token(const char* value, size_t size) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ttmall.GetDriverInfoReq.token)
}
::std::string* GetDriverInfoReq::mutable_token() {
  
  // @@protoc_insertion_point(field_mutable:ttmall.GetDriverInfoReq.token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetDriverInfoReq::release_token() {
  // @@protoc_insertion_point(field_release:ttmall.GetDriverInfoReq.token)
  
  return token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetDriverInfoReq::set_allocated_token(::std::string* token) {
  if (token != NULL) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:ttmall.GetDriverInfoReq.token)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetDriverInfoRep::kInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetDriverInfoRep::GetDriverInfoRep()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_driver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ttmall.GetDriverInfoRep)
}
GetDriverInfoRep::GetDriverInfoRep(const GetDriverInfoRep& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_info()) {
    info_ = new ::ttmall::DriverInfo(*from.info_);
  } else {
    info_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:ttmall.GetDriverInfoRep)
}

void GetDriverInfoRep::SharedCtor() {
  info_ = NULL;
  _cached_size_ = 0;
}

GetDriverInfoRep::~GetDriverInfoRep() {
  // @@protoc_insertion_point(destructor:ttmall.GetDriverInfoRep)
  SharedDtor();
}

void GetDriverInfoRep::SharedDtor() {
  if (this != internal_default_instance()) {
    delete info_;
  }
}

void GetDriverInfoRep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetDriverInfoRep::descriptor() {
  protobuf_driver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_driver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetDriverInfoRep& GetDriverInfoRep::default_instance() {
  protobuf_driver_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetDriverInfoRep* GetDriverInfoRep::New(::google::protobuf::Arena* arena) const {
  GetDriverInfoRep* n = new GetDriverInfoRep;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetDriverInfoRep::Clear() {
// @@protoc_insertion_point(message_clear_start:ttmall.GetDriverInfoRep)
  if (GetArenaNoVirtual() == NULL && info_ != NULL) {
    delete info_;
  }
  info_ = NULL;
}

bool GetDriverInfoRep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ttmall.GetDriverInfoRep)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ttmall.DriverInfo info = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ttmall.GetDriverInfoRep)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ttmall.GetDriverInfoRep)
  return false;
#undef DO_
}

void GetDriverInfoRep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ttmall.GetDriverInfoRep)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ttmall.DriverInfo info = 1;
  if (this->has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->info_, output);
  }

  // @@protoc_insertion_point(serialize_end:ttmall.GetDriverInfoRep)
}

::google::protobuf::uint8* GetDriverInfoRep::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ttmall.GetDriverInfoRep)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ttmall.DriverInfo info = 1;
  if (this->has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->info_, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ttmall.GetDriverInfoRep)
  return target;
}

size_t GetDriverInfoRep::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ttmall.GetDriverInfoRep)
  size_t total_size = 0;

  // .ttmall.DriverInfo info = 1;
  if (this->has_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->info_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetDriverInfoRep::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ttmall.GetDriverInfoRep)
  GOOGLE_DCHECK_NE(&from, this);
  const GetDriverInfoRep* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetDriverInfoRep>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ttmall.GetDriverInfoRep)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ttmall.GetDriverInfoRep)
    MergeFrom(*source);
  }
}

void GetDriverInfoRep::MergeFrom(const GetDriverInfoRep& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ttmall.GetDriverInfoRep)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_info()) {
    mutable_info()->::ttmall::DriverInfo::MergeFrom(from.info());
  }
}

void GetDriverInfoRep::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ttmall.GetDriverInfoRep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetDriverInfoRep::CopyFrom(const GetDriverInfoRep& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ttmall.GetDriverInfoRep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetDriverInfoRep::IsInitialized() const {
  return true;
}

void GetDriverInfoRep::Swap(GetDriverInfoRep* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetDriverInfoRep::InternalSwap(GetDriverInfoRep* other) {
  std::swap(info_, other->info_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetDriverInfoRep::GetMetadata() const {
  protobuf_driver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_driver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetDriverInfoRep

// .ttmall.DriverInfo info = 1;
bool GetDriverInfoRep::has_info() const {
  return this != internal_default_instance() && info_ != NULL;
}
void GetDriverInfoRep::clear_info() {
  if (GetArenaNoVirtual() == NULL && info_ != NULL) delete info_;
  info_ = NULL;
}
const ::ttmall::DriverInfo& GetDriverInfoRep::info() const {
  // @@protoc_insertion_point(field_get:ttmall.GetDriverInfoRep.info)
  return info_ != NULL ? *info_
                         : *::ttmall::DriverInfo::internal_default_instance();
}
::ttmall::DriverInfo* GetDriverInfoRep::mutable_info() {
  
  if (info_ == NULL) {
    info_ = new ::ttmall::DriverInfo;
  }
  // @@protoc_insertion_point(field_mutable:ttmall.GetDriverInfoRep.info)
  return info_;
}
::ttmall::DriverInfo* GetDriverInfoRep::release_info() {
  // @@protoc_insertion_point(field_release:ttmall.GetDriverInfoRep.info)
  
  ::ttmall::DriverInfo* temp = info_;
  info_ = NULL;
  return temp;
}
void GetDriverInfoRep::set_allocated_info(::ttmall::DriverInfo* info) {
  delete info_;
  info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ttmall.GetDriverInfoRep.info)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UpdateDriverStateReq::kTokenFieldNumber;
const int UpdateDriverStateReq::kCoordFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UpdateDriverStateReq::UpdateDriverStateReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_driver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ttmall.UpdateDriverStateReq)
}
UpdateDriverStateReq::UpdateDriverStateReq(const UpdateDriverStateReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.token().size() > 0) {
    token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  if (from.has_coord()) {
    coord_ = new ::ttmall::CoordInfo(*from.coord_);
  } else {
    coord_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:ttmall.UpdateDriverStateReq)
}

void UpdateDriverStateReq::SharedCtor() {
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  coord_ = NULL;
  _cached_size_ = 0;
}

UpdateDriverStateReq::~UpdateDriverStateReq() {
  // @@protoc_insertion_point(destructor:ttmall.UpdateDriverStateReq)
  SharedDtor();
}

void UpdateDriverStateReq::SharedDtor() {
  token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete coord_;
  }
}

void UpdateDriverStateReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateDriverStateReq::descriptor() {
  protobuf_driver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_driver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UpdateDriverStateReq& UpdateDriverStateReq::default_instance() {
  protobuf_driver_2eproto::InitDefaults();
  return *internal_default_instance();
}

UpdateDriverStateReq* UpdateDriverStateReq::New(::google::protobuf::Arena* arena) const {
  UpdateDriverStateReq* n = new UpdateDriverStateReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UpdateDriverStateReq::Clear() {
// @@protoc_insertion_point(message_clear_start:ttmall.UpdateDriverStateReq)
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && coord_ != NULL) {
    delete coord_;
  }
  coord_ = NULL;
}

bool UpdateDriverStateReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ttmall.UpdateDriverStateReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string token = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ttmall.UpdateDriverStateReq.token"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ttmall.CoordInfo coord = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_coord()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ttmall.UpdateDriverStateReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ttmall.UpdateDriverStateReq)
  return false;
#undef DO_
}

void UpdateDriverStateReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ttmall.UpdateDriverStateReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string token = 1;
  if (this->token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ttmall.UpdateDriverStateReq.token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->token(), output);
  }

  // .ttmall.CoordInfo coord = 3;
  if (this->has_coord()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->coord_, output);
  }

  // @@protoc_insertion_point(serialize_end:ttmall.UpdateDriverStateReq)
}

::google::protobuf::uint8* UpdateDriverStateReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ttmall.UpdateDriverStateReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string token = 1;
  if (this->token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ttmall.UpdateDriverStateReq.token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->token(), target);
  }

  // .ttmall.CoordInfo coord = 3;
  if (this->has_coord()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->coord_, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ttmall.UpdateDriverStateReq)
  return target;
}

size_t UpdateDriverStateReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ttmall.UpdateDriverStateReq)
  size_t total_size = 0;

  // string token = 1;
  if (this->token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->token());
  }

  // .ttmall.CoordInfo coord = 3;
  if (this->has_coord()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->coord_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateDriverStateReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ttmall.UpdateDriverStateReq)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateDriverStateReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UpdateDriverStateReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ttmall.UpdateDriverStateReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ttmall.UpdateDriverStateReq)
    MergeFrom(*source);
  }
}

void UpdateDriverStateReq::MergeFrom(const UpdateDriverStateReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ttmall.UpdateDriverStateReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.token().size() > 0) {

    token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  if (from.has_coord()) {
    mutable_coord()->::ttmall::CoordInfo::MergeFrom(from.coord());
  }
}

void UpdateDriverStateReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ttmall.UpdateDriverStateReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateDriverStateReq::CopyFrom(const UpdateDriverStateReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ttmall.UpdateDriverStateReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateDriverStateReq::IsInitialized() const {
  return true;
}

void UpdateDriverStateReq::Swap(UpdateDriverStateReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UpdateDriverStateReq::InternalSwap(UpdateDriverStateReq* other) {
  token_.Swap(&other->token_);
  std::swap(coord_, other->coord_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UpdateDriverStateReq::GetMetadata() const {
  protobuf_driver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_driver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UpdateDriverStateReq

// string token = 1;
void UpdateDriverStateReq::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& UpdateDriverStateReq::token() const {
  // @@protoc_insertion_point(field_get:ttmall.UpdateDriverStateReq.token)
  return token_.GetNoArena();
}
void UpdateDriverStateReq::set_token(const ::std::string& value) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ttmall.UpdateDriverStateReq.token)
}
#if LANG_CXX11
void UpdateDriverStateReq::set_token(::std::string&& value) {
  
  token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ttmall.UpdateDriverStateReq.token)
}
#endif
void UpdateDriverStateReq::set_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ttmall.UpdateDriverStateReq.token)
}
void UpdateDriverStateReq::set_token(const char* value, size_t size) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ttmall.UpdateDriverStateReq.token)
}
::std::string* UpdateDriverStateReq::mutable_token() {
  
  // @@protoc_insertion_point(field_mutable:ttmall.UpdateDriverStateReq.token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UpdateDriverStateReq::release_token() {
  // @@protoc_insertion_point(field_release:ttmall.UpdateDriverStateReq.token)
  
  return token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UpdateDriverStateReq::set_allocated_token(::std::string* token) {
  if (token != NULL) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:ttmall.UpdateDriverStateReq.token)
}

// .ttmall.CoordInfo coord = 3;
bool UpdateDriverStateReq::has_coord() const {
  return this != internal_default_instance() && coord_ != NULL;
}
void UpdateDriverStateReq::clear_coord() {
  if (GetArenaNoVirtual() == NULL && coord_ != NULL) delete coord_;
  coord_ = NULL;
}
const ::ttmall::CoordInfo& UpdateDriverStateReq::coord() const {
  // @@protoc_insertion_point(field_get:ttmall.UpdateDriverStateReq.coord)
  return coord_ != NULL ? *coord_
                         : *::ttmall::CoordInfo::internal_default_instance();
}
::ttmall::CoordInfo* UpdateDriverStateReq::mutable_coord() {
  
  if (coord_ == NULL) {
    coord_ = new ::ttmall::CoordInfo;
  }
  // @@protoc_insertion_point(field_mutable:ttmall.UpdateDriverStateReq.coord)
  return coord_;
}
::ttmall::CoordInfo* UpdateDriverStateReq::release_coord() {
  // @@protoc_insertion_point(field_release:ttmall.UpdateDriverStateReq.coord)
  
  ::ttmall::CoordInfo* temp = coord_;
  coord_ = NULL;
  return temp;
}
void UpdateDriverStateReq::set_allocated_coord(::ttmall::CoordInfo* coord) {
  delete coord_;
  coord_ = coord;
  if (coord) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ttmall.UpdateDriverStateReq.coord)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UpdateDriverStateRep::UpdateDriverStateRep()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_driver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ttmall.UpdateDriverStateRep)
}
UpdateDriverStateRep::UpdateDriverStateRep(const UpdateDriverStateRep& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ttmall.UpdateDriverStateRep)
}

void UpdateDriverStateRep::SharedCtor() {
  _cached_size_ = 0;
}

UpdateDriverStateRep::~UpdateDriverStateRep() {
  // @@protoc_insertion_point(destructor:ttmall.UpdateDriverStateRep)
  SharedDtor();
}

void UpdateDriverStateRep::SharedDtor() {
}

void UpdateDriverStateRep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateDriverStateRep::descriptor() {
  protobuf_driver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_driver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UpdateDriverStateRep& UpdateDriverStateRep::default_instance() {
  protobuf_driver_2eproto::InitDefaults();
  return *internal_default_instance();
}

UpdateDriverStateRep* UpdateDriverStateRep::New(::google::protobuf::Arena* arena) const {
  UpdateDriverStateRep* n = new UpdateDriverStateRep;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UpdateDriverStateRep::Clear() {
// @@protoc_insertion_point(message_clear_start:ttmall.UpdateDriverStateRep)
}

bool UpdateDriverStateRep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ttmall.UpdateDriverStateRep)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:ttmall.UpdateDriverStateRep)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ttmall.UpdateDriverStateRep)
  return false;
#undef DO_
}

void UpdateDriverStateRep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ttmall.UpdateDriverStateRep)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // @@protoc_insertion_point(serialize_end:ttmall.UpdateDriverStateRep)
}

::google::protobuf::uint8* UpdateDriverStateRep::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ttmall.UpdateDriverStateRep)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // @@protoc_insertion_point(serialize_to_array_end:ttmall.UpdateDriverStateRep)
  return target;
}

size_t UpdateDriverStateRep::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ttmall.UpdateDriverStateRep)
  size_t total_size = 0;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateDriverStateRep::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ttmall.UpdateDriverStateRep)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateDriverStateRep* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UpdateDriverStateRep>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ttmall.UpdateDriverStateRep)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ttmall.UpdateDriverStateRep)
    MergeFrom(*source);
  }
}

void UpdateDriverStateRep::MergeFrom(const UpdateDriverStateRep& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ttmall.UpdateDriverStateRep)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void UpdateDriverStateRep::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ttmall.UpdateDriverStateRep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateDriverStateRep::CopyFrom(const UpdateDriverStateRep& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ttmall.UpdateDriverStateRep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateDriverStateRep::IsInitialized() const {
  return true;
}

void UpdateDriverStateRep::Swap(UpdateDriverStateRep* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UpdateDriverStateRep::InternalSwap(UpdateDriverStateRep* other) {
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UpdateDriverStateRep::GetMetadata() const {
  protobuf_driver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_driver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UpdateDriverStateRep

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeliveryOrderInfoReq::kTokenFieldNumber;
const int DeliveryOrderInfoReq::kWareIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeliveryOrderInfoReq::DeliveryOrderInfoReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_driver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ttmall.DeliveryOrderInfoReq)
}
DeliveryOrderInfoReq::DeliveryOrderInfoReq(const DeliveryOrderInfoReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.token().size() > 0) {
    token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  ware_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.ware_id().size() > 0) {
    ware_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ware_id_);
  }
  // @@protoc_insertion_point(copy_constructor:ttmall.DeliveryOrderInfoReq)
}

void DeliveryOrderInfoReq::SharedCtor() {
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ware_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

DeliveryOrderInfoReq::~DeliveryOrderInfoReq() {
  // @@protoc_insertion_point(destructor:ttmall.DeliveryOrderInfoReq)
  SharedDtor();
}

void DeliveryOrderInfoReq::SharedDtor() {
  token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ware_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DeliveryOrderInfoReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeliveryOrderInfoReq::descriptor() {
  protobuf_driver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_driver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DeliveryOrderInfoReq& DeliveryOrderInfoReq::default_instance() {
  protobuf_driver_2eproto::InitDefaults();
  return *internal_default_instance();
}

DeliveryOrderInfoReq* DeliveryOrderInfoReq::New(::google::protobuf::Arena* arena) const {
  DeliveryOrderInfoReq* n = new DeliveryOrderInfoReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DeliveryOrderInfoReq::Clear() {
// @@protoc_insertion_point(message_clear_start:ttmall.DeliveryOrderInfoReq)
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ware_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool DeliveryOrderInfoReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ttmall.DeliveryOrderInfoReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string token = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ttmall.DeliveryOrderInfoReq.token"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string ware_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ware_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ware_id().data(), this->ware_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ttmall.DeliveryOrderInfoReq.ware_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ttmall.DeliveryOrderInfoReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ttmall.DeliveryOrderInfoReq)
  return false;
#undef DO_
}

void DeliveryOrderInfoReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ttmall.DeliveryOrderInfoReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string token = 1;
  if (this->token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ttmall.DeliveryOrderInfoReq.token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->token(), output);
  }

  // string ware_id = 2;
  if (this->ware_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ware_id().data(), this->ware_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ttmall.DeliveryOrderInfoReq.ware_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->ware_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:ttmall.DeliveryOrderInfoReq)
}

::google::protobuf::uint8* DeliveryOrderInfoReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ttmall.DeliveryOrderInfoReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string token = 1;
  if (this->token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ttmall.DeliveryOrderInfoReq.token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->token(), target);
  }

  // string ware_id = 2;
  if (this->ware_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ware_id().data(), this->ware_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ttmall.DeliveryOrderInfoReq.ware_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ware_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ttmall.DeliveryOrderInfoReq)
  return target;
}

size_t DeliveryOrderInfoReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ttmall.DeliveryOrderInfoReq)
  size_t total_size = 0;

  // string token = 1;
  if (this->token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->token());
  }

  // string ware_id = 2;
  if (this->ware_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ware_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeliveryOrderInfoReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ttmall.DeliveryOrderInfoReq)
  GOOGLE_DCHECK_NE(&from, this);
  const DeliveryOrderInfoReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DeliveryOrderInfoReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ttmall.DeliveryOrderInfoReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ttmall.DeliveryOrderInfoReq)
    MergeFrom(*source);
  }
}

void DeliveryOrderInfoReq::MergeFrom(const DeliveryOrderInfoReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ttmall.DeliveryOrderInfoReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.token().size() > 0) {

    token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  if (from.ware_id().size() > 0) {

    ware_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ware_id_);
  }
}

void DeliveryOrderInfoReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ttmall.DeliveryOrderInfoReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeliveryOrderInfoReq::CopyFrom(const DeliveryOrderInfoReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ttmall.DeliveryOrderInfoReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeliveryOrderInfoReq::IsInitialized() const {
  return true;
}

void DeliveryOrderInfoReq::Swap(DeliveryOrderInfoReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeliveryOrderInfoReq::InternalSwap(DeliveryOrderInfoReq* other) {
  token_.Swap(&other->token_);
  ware_id_.Swap(&other->ware_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DeliveryOrderInfoReq::GetMetadata() const {
  protobuf_driver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_driver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DeliveryOrderInfoReq

// string token = 1;
void DeliveryOrderInfoReq::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DeliveryOrderInfoReq::token() const {
  // @@protoc_insertion_point(field_get:ttmall.DeliveryOrderInfoReq.token)
  return token_.GetNoArena();
}
void DeliveryOrderInfoReq::set_token(const ::std::string& value) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ttmall.DeliveryOrderInfoReq.token)
}
#if LANG_CXX11
void DeliveryOrderInfoReq::set_token(::std::string&& value) {
  
  token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ttmall.DeliveryOrderInfoReq.token)
}
#endif
void DeliveryOrderInfoReq::set_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ttmall.DeliveryOrderInfoReq.token)
}
void DeliveryOrderInfoReq::set_token(const char* value, size_t size) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ttmall.DeliveryOrderInfoReq.token)
}
::std::string* DeliveryOrderInfoReq::mutable_token() {
  
  // @@protoc_insertion_point(field_mutable:ttmall.DeliveryOrderInfoReq.token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DeliveryOrderInfoReq::release_token() {
  // @@protoc_insertion_point(field_release:ttmall.DeliveryOrderInfoReq.token)
  
  return token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DeliveryOrderInfoReq::set_allocated_token(::std::string* token) {
  if (token != NULL) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:ttmall.DeliveryOrderInfoReq.token)
}

// string ware_id = 2;
void DeliveryOrderInfoReq::clear_ware_id() {
  ware_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DeliveryOrderInfoReq::ware_id() const {
  // @@protoc_insertion_point(field_get:ttmall.DeliveryOrderInfoReq.ware_id)
  return ware_id_.GetNoArena();
}
void DeliveryOrderInfoReq::set_ware_id(const ::std::string& value) {
  
  ware_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ttmall.DeliveryOrderInfoReq.ware_id)
}
#if LANG_CXX11
void DeliveryOrderInfoReq::set_ware_id(::std::string&& value) {
  
  ware_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ttmall.DeliveryOrderInfoReq.ware_id)
}
#endif
void DeliveryOrderInfoReq::set_ware_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ware_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ttmall.DeliveryOrderInfoReq.ware_id)
}
void DeliveryOrderInfoReq::set_ware_id(const char* value, size_t size) {
  
  ware_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ttmall.DeliveryOrderInfoReq.ware_id)
}
::std::string* DeliveryOrderInfoReq::mutable_ware_id() {
  
  // @@protoc_insertion_point(field_mutable:ttmall.DeliveryOrderInfoReq.ware_id)
  return ware_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DeliveryOrderInfoReq::release_ware_id() {
  // @@protoc_insertion_point(field_release:ttmall.DeliveryOrderInfoReq.ware_id)
  
  return ware_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DeliveryOrderInfoReq::set_allocated_ware_id(::std::string* ware_id) {
  if (ware_id != NULL) {
    
  } else {
    
  }
  ware_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ware_id);
  // @@protoc_insertion_point(field_set_allocated:ttmall.DeliveryOrderInfoReq.ware_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeliveryOrderInfoRep::kItemsFieldNumber;
const int DeliveryOrderInfoRep::kOrderCountFieldNumber;
const int DeliveryOrderInfoRep::kUserCountFieldNumber;
const int DeliveryOrderInfoRep::kGoodsCountFieldNumber;
const int DeliveryOrderInfoRep::kIsTransFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeliveryOrderInfoRep::DeliveryOrderInfoRep()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_driver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ttmall.DeliveryOrderInfoRep)
}
DeliveryOrderInfoRep::DeliveryOrderInfoRep(const DeliveryOrderInfoRep& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      items_(from.items_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&order_count_, &from.order_count_,
    reinterpret_cast<char*>(&is_trans_) -
    reinterpret_cast<char*>(&order_count_) + sizeof(is_trans_));
  // @@protoc_insertion_point(copy_constructor:ttmall.DeliveryOrderInfoRep)
}

void DeliveryOrderInfoRep::SharedCtor() {
  ::memset(&order_count_, 0, reinterpret_cast<char*>(&is_trans_) -
    reinterpret_cast<char*>(&order_count_) + sizeof(is_trans_));
  _cached_size_ = 0;
}

DeliveryOrderInfoRep::~DeliveryOrderInfoRep() {
  // @@protoc_insertion_point(destructor:ttmall.DeliveryOrderInfoRep)
  SharedDtor();
}

void DeliveryOrderInfoRep::SharedDtor() {
}

void DeliveryOrderInfoRep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeliveryOrderInfoRep::descriptor() {
  protobuf_driver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_driver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DeliveryOrderInfoRep& DeliveryOrderInfoRep::default_instance() {
  protobuf_driver_2eproto::InitDefaults();
  return *internal_default_instance();
}

DeliveryOrderInfoRep* DeliveryOrderInfoRep::New(::google::protobuf::Arena* arena) const {
  DeliveryOrderInfoRep* n = new DeliveryOrderInfoRep;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DeliveryOrderInfoRep::Clear() {
// @@protoc_insertion_point(message_clear_start:ttmall.DeliveryOrderInfoRep)
  items_.Clear();
  ::memset(&order_count_, 0, reinterpret_cast<char*>(&is_trans_) -
    reinterpret_cast<char*>(&order_count_) + sizeof(is_trans_));
}

bool DeliveryOrderInfoRep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ttmall.DeliveryOrderInfoRep)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ttmall.DeliveryGoods items = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 order_count = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &order_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 user_count = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &user_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 goods_count = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &goods_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_trans = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_trans_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ttmall.DeliveryOrderInfoRep)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ttmall.DeliveryOrderInfoRep)
  return false;
#undef DO_
}

void DeliveryOrderInfoRep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ttmall.DeliveryOrderInfoRep)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ttmall.DeliveryGoods items = 1;
  for (unsigned int i = 0, n = this->items_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->items(i), output);
  }

  // int32 order_count = 2;
  if (this->order_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->order_count(), output);
  }

  // int32 user_count = 3;
  if (this->user_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->user_count(), output);
  }

  // int32 goods_count = 4;
  if (this->goods_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->goods_count(), output);
  }

  // bool is_trans = 5;
  if (this->is_trans() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->is_trans(), output);
  }

  // @@protoc_insertion_point(serialize_end:ttmall.DeliveryOrderInfoRep)
}

::google::protobuf::uint8* DeliveryOrderInfoRep::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ttmall.DeliveryOrderInfoRep)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ttmall.DeliveryGoods items = 1;
  for (unsigned int i = 0, n = this->items_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->items(i), deterministic, target);
  }

  // int32 order_count = 2;
  if (this->order_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->order_count(), target);
  }

  // int32 user_count = 3;
  if (this->user_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->user_count(), target);
  }

  // int32 goods_count = 4;
  if (this->goods_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->goods_count(), target);
  }

  // bool is_trans = 5;
  if (this->is_trans() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->is_trans(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ttmall.DeliveryOrderInfoRep)
  return target;
}

size_t DeliveryOrderInfoRep::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ttmall.DeliveryOrderInfoRep)
  size_t total_size = 0;

  // repeated .ttmall.DeliveryGoods items = 1;
  {
    unsigned int count = this->items_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->items(i));
    }
  }

  // int32 order_count = 2;
  if (this->order_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->order_count());
  }

  // int32 user_count = 3;
  if (this->user_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->user_count());
  }

  // int32 goods_count = 4;
  if (this->goods_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->goods_count());
  }

  // bool is_trans = 5;
  if (this->is_trans() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeliveryOrderInfoRep::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ttmall.DeliveryOrderInfoRep)
  GOOGLE_DCHECK_NE(&from, this);
  const DeliveryOrderInfoRep* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DeliveryOrderInfoRep>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ttmall.DeliveryOrderInfoRep)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ttmall.DeliveryOrderInfoRep)
    MergeFrom(*source);
  }
}

void DeliveryOrderInfoRep::MergeFrom(const DeliveryOrderInfoRep& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ttmall.DeliveryOrderInfoRep)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  items_.MergeFrom(from.items_);
  if (from.order_count() != 0) {
    set_order_count(from.order_count());
  }
  if (from.user_count() != 0) {
    set_user_count(from.user_count());
  }
  if (from.goods_count() != 0) {
    set_goods_count(from.goods_count());
  }
  if (from.is_trans() != 0) {
    set_is_trans(from.is_trans());
  }
}

void DeliveryOrderInfoRep::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ttmall.DeliveryOrderInfoRep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeliveryOrderInfoRep::CopyFrom(const DeliveryOrderInfoRep& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ttmall.DeliveryOrderInfoRep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeliveryOrderInfoRep::IsInitialized() const {
  return true;
}

void DeliveryOrderInfoRep::Swap(DeliveryOrderInfoRep* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeliveryOrderInfoRep::InternalSwap(DeliveryOrderInfoRep* other) {
  items_.InternalSwap(&other->items_);
  std::swap(order_count_, other->order_count_);
  std::swap(user_count_, other->user_count_);
  std::swap(goods_count_, other->goods_count_);
  std::swap(is_trans_, other->is_trans_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DeliveryOrderInfoRep::GetMetadata() const {
  protobuf_driver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_driver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DeliveryOrderInfoRep

// repeated .ttmall.DeliveryGoods items = 1;
int DeliveryOrderInfoRep::items_size() const {
  return items_.size();
}
void DeliveryOrderInfoRep::clear_items() {
  items_.Clear();
}
const ::ttmall::DeliveryGoods& DeliveryOrderInfoRep::items(int index) const {
  // @@protoc_insertion_point(field_get:ttmall.DeliveryOrderInfoRep.items)
  return items_.Get(index);
}
::ttmall::DeliveryGoods* DeliveryOrderInfoRep::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:ttmall.DeliveryOrderInfoRep.items)
  return items_.Mutable(index);
}
::ttmall::DeliveryGoods* DeliveryOrderInfoRep::add_items() {
  // @@protoc_insertion_point(field_add:ttmall.DeliveryOrderInfoRep.items)
  return items_.Add();
}
::google::protobuf::RepeatedPtrField< ::ttmall::DeliveryGoods >*
DeliveryOrderInfoRep::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:ttmall.DeliveryOrderInfoRep.items)
  return &items_;
}
const ::google::protobuf::RepeatedPtrField< ::ttmall::DeliveryGoods >&
DeliveryOrderInfoRep::items() const {
  // @@protoc_insertion_point(field_list:ttmall.DeliveryOrderInfoRep.items)
  return items_;
}

// int32 order_count = 2;
void DeliveryOrderInfoRep::clear_order_count() {
  order_count_ = 0;
}
::google::protobuf::int32 DeliveryOrderInfoRep::order_count() const {
  // @@protoc_insertion_point(field_get:ttmall.DeliveryOrderInfoRep.order_count)
  return order_count_;
}
void DeliveryOrderInfoRep::set_order_count(::google::protobuf::int32 value) {
  
  order_count_ = value;
  // @@protoc_insertion_point(field_set:ttmall.DeliveryOrderInfoRep.order_count)
}

// int32 user_count = 3;
void DeliveryOrderInfoRep::clear_user_count() {
  user_count_ = 0;
}
::google::protobuf::int32 DeliveryOrderInfoRep::user_count() const {
  // @@protoc_insertion_point(field_get:ttmall.DeliveryOrderInfoRep.user_count)
  return user_count_;
}
void DeliveryOrderInfoRep::set_user_count(::google::protobuf::int32 value) {
  
  user_count_ = value;
  // @@protoc_insertion_point(field_set:ttmall.DeliveryOrderInfoRep.user_count)
}

// int32 goods_count = 4;
void DeliveryOrderInfoRep::clear_goods_count() {
  goods_count_ = 0;
}
::google::protobuf::int32 DeliveryOrderInfoRep::goods_count() const {
  // @@protoc_insertion_point(field_get:ttmall.DeliveryOrderInfoRep.goods_count)
  return goods_count_;
}
void DeliveryOrderInfoRep::set_goods_count(::google::protobuf::int32 value) {
  
  goods_count_ = value;
  // @@protoc_insertion_point(field_set:ttmall.DeliveryOrderInfoRep.goods_count)
}

// bool is_trans = 5;
void DeliveryOrderInfoRep::clear_is_trans() {
  is_trans_ = false;
}
bool DeliveryOrderInfoRep::is_trans() const {
  // @@protoc_insertion_point(field_get:ttmall.DeliveryOrderInfoRep.is_trans)
  return is_trans_;
}
void DeliveryOrderInfoRep::set_is_trans(bool value) {
  
  is_trans_ = value;
  // @@protoc_insertion_point(field_set:ttmall.DeliveryOrderInfoRep.is_trans)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConfirmDeliveryReq::kTokenFieldNumber;
const int ConfirmDeliveryReq::kWareIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConfirmDeliveryReq::ConfirmDeliveryReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_driver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ttmall.ConfirmDeliveryReq)
}
ConfirmDeliveryReq::ConfirmDeliveryReq(const ConfirmDeliveryReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.token().size() > 0) {
    token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  ware_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.ware_id().size() > 0) {
    ware_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ware_id_);
  }
  // @@protoc_insertion_point(copy_constructor:ttmall.ConfirmDeliveryReq)
}

void ConfirmDeliveryReq::SharedCtor() {
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ware_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

ConfirmDeliveryReq::~ConfirmDeliveryReq() {
  // @@protoc_insertion_point(destructor:ttmall.ConfirmDeliveryReq)
  SharedDtor();
}

void ConfirmDeliveryReq::SharedDtor() {
  token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ware_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ConfirmDeliveryReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConfirmDeliveryReq::descriptor() {
  protobuf_driver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_driver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ConfirmDeliveryReq& ConfirmDeliveryReq::default_instance() {
  protobuf_driver_2eproto::InitDefaults();
  return *internal_default_instance();
}

ConfirmDeliveryReq* ConfirmDeliveryReq::New(::google::protobuf::Arena* arena) const {
  ConfirmDeliveryReq* n = new ConfirmDeliveryReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ConfirmDeliveryReq::Clear() {
// @@protoc_insertion_point(message_clear_start:ttmall.ConfirmDeliveryReq)
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ware_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool ConfirmDeliveryReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ttmall.ConfirmDeliveryReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string token = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ttmall.ConfirmDeliveryReq.token"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string ware_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ware_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ware_id().data(), this->ware_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ttmall.ConfirmDeliveryReq.ware_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ttmall.ConfirmDeliveryReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ttmall.ConfirmDeliveryReq)
  return false;
#undef DO_
}

void ConfirmDeliveryReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ttmall.ConfirmDeliveryReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string token = 1;
  if (this->token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ttmall.ConfirmDeliveryReq.token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->token(), output);
  }

  // string ware_id = 2;
  if (this->ware_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ware_id().data(), this->ware_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ttmall.ConfirmDeliveryReq.ware_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->ware_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:ttmall.ConfirmDeliveryReq)
}

::google::protobuf::uint8* ConfirmDeliveryReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ttmall.ConfirmDeliveryReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string token = 1;
  if (this->token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ttmall.ConfirmDeliveryReq.token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->token(), target);
  }

  // string ware_id = 2;
  if (this->ware_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ware_id().data(), this->ware_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ttmall.ConfirmDeliveryReq.ware_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ware_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ttmall.ConfirmDeliveryReq)
  return target;
}

size_t ConfirmDeliveryReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ttmall.ConfirmDeliveryReq)
  size_t total_size = 0;

  // string token = 1;
  if (this->token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->token());
  }

  // string ware_id = 2;
  if (this->ware_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ware_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConfirmDeliveryReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ttmall.ConfirmDeliveryReq)
  GOOGLE_DCHECK_NE(&from, this);
  const ConfirmDeliveryReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConfirmDeliveryReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ttmall.ConfirmDeliveryReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ttmall.ConfirmDeliveryReq)
    MergeFrom(*source);
  }
}

void ConfirmDeliveryReq::MergeFrom(const ConfirmDeliveryReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ttmall.ConfirmDeliveryReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.token().size() > 0) {

    token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  if (from.ware_id().size() > 0) {

    ware_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ware_id_);
  }
}

void ConfirmDeliveryReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ttmall.ConfirmDeliveryReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfirmDeliveryReq::CopyFrom(const ConfirmDeliveryReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ttmall.ConfirmDeliveryReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfirmDeliveryReq::IsInitialized() const {
  return true;
}

void ConfirmDeliveryReq::Swap(ConfirmDeliveryReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ConfirmDeliveryReq::InternalSwap(ConfirmDeliveryReq* other) {
  token_.Swap(&other->token_);
  ware_id_.Swap(&other->ware_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ConfirmDeliveryReq::GetMetadata() const {
  protobuf_driver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_driver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ConfirmDeliveryReq

// string token = 1;
void ConfirmDeliveryReq::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ConfirmDeliveryReq::token() const {
  // @@protoc_insertion_point(field_get:ttmall.ConfirmDeliveryReq.token)
  return token_.GetNoArena();
}
void ConfirmDeliveryReq::set_token(const ::std::string& value) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ttmall.ConfirmDeliveryReq.token)
}
#if LANG_CXX11
void ConfirmDeliveryReq::set_token(::std::string&& value) {
  
  token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ttmall.ConfirmDeliveryReq.token)
}
#endif
void ConfirmDeliveryReq::set_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ttmall.ConfirmDeliveryReq.token)
}
void ConfirmDeliveryReq::set_token(const char* value, size_t size) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ttmall.ConfirmDeliveryReq.token)
}
::std::string* ConfirmDeliveryReq::mutable_token() {
  
  // @@protoc_insertion_point(field_mutable:ttmall.ConfirmDeliveryReq.token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ConfirmDeliveryReq::release_token() {
  // @@protoc_insertion_point(field_release:ttmall.ConfirmDeliveryReq.token)
  
  return token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ConfirmDeliveryReq::set_allocated_token(::std::string* token) {
  if (token != NULL) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:ttmall.ConfirmDeliveryReq.token)
}

// string ware_id = 2;
void ConfirmDeliveryReq::clear_ware_id() {
  ware_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ConfirmDeliveryReq::ware_id() const {
  // @@protoc_insertion_point(field_get:ttmall.ConfirmDeliveryReq.ware_id)
  return ware_id_.GetNoArena();
}
void ConfirmDeliveryReq::set_ware_id(const ::std::string& value) {
  
  ware_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ttmall.ConfirmDeliveryReq.ware_id)
}
#if LANG_CXX11
void ConfirmDeliveryReq::set_ware_id(::std::string&& value) {
  
  ware_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ttmall.ConfirmDeliveryReq.ware_id)
}
#endif
void ConfirmDeliveryReq::set_ware_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ware_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ttmall.ConfirmDeliveryReq.ware_id)
}
void ConfirmDeliveryReq::set_ware_id(const char* value, size_t size) {
  
  ware_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ttmall.ConfirmDeliveryReq.ware_id)
}
::std::string* ConfirmDeliveryReq::mutable_ware_id() {
  
  // @@protoc_insertion_point(field_mutable:ttmall.ConfirmDeliveryReq.ware_id)
  return ware_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ConfirmDeliveryReq::release_ware_id() {
  // @@protoc_insertion_point(field_release:ttmall.ConfirmDeliveryReq.ware_id)
  
  return ware_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ConfirmDeliveryReq::set_allocated_ware_id(::std::string* ware_id) {
  if (ware_id != NULL) {
    
  } else {
    
  }
  ware_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ware_id);
  // @@protoc_insertion_point(field_set_allocated:ttmall.ConfirmDeliveryReq.ware_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConfirmDeliveryRep::ConfirmDeliveryRep()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_driver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ttmall.ConfirmDeliveryRep)
}
ConfirmDeliveryRep::ConfirmDeliveryRep(const ConfirmDeliveryRep& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ttmall.ConfirmDeliveryRep)
}

void ConfirmDeliveryRep::SharedCtor() {
  _cached_size_ = 0;
}

ConfirmDeliveryRep::~ConfirmDeliveryRep() {
  // @@protoc_insertion_point(destructor:ttmall.ConfirmDeliveryRep)
  SharedDtor();
}

void ConfirmDeliveryRep::SharedDtor() {
}

void ConfirmDeliveryRep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConfirmDeliveryRep::descriptor() {
  protobuf_driver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_driver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ConfirmDeliveryRep& ConfirmDeliveryRep::default_instance() {
  protobuf_driver_2eproto::InitDefaults();
  return *internal_default_instance();
}

ConfirmDeliveryRep* ConfirmDeliveryRep::New(::google::protobuf::Arena* arena) const {
  ConfirmDeliveryRep* n = new ConfirmDeliveryRep;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ConfirmDeliveryRep::Clear() {
// @@protoc_insertion_point(message_clear_start:ttmall.ConfirmDeliveryRep)
}

bool ConfirmDeliveryRep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ttmall.ConfirmDeliveryRep)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:ttmall.ConfirmDeliveryRep)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ttmall.ConfirmDeliveryRep)
  return false;
#undef DO_
}

void ConfirmDeliveryRep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ttmall.ConfirmDeliveryRep)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // @@protoc_insertion_point(serialize_end:ttmall.ConfirmDeliveryRep)
}

::google::protobuf::uint8* ConfirmDeliveryRep::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ttmall.ConfirmDeliveryRep)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // @@protoc_insertion_point(serialize_to_array_end:ttmall.ConfirmDeliveryRep)
  return target;
}

size_t ConfirmDeliveryRep::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ttmall.ConfirmDeliveryRep)
  size_t total_size = 0;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConfirmDeliveryRep::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ttmall.ConfirmDeliveryRep)
  GOOGLE_DCHECK_NE(&from, this);
  const ConfirmDeliveryRep* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConfirmDeliveryRep>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ttmall.ConfirmDeliveryRep)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ttmall.ConfirmDeliveryRep)
    MergeFrom(*source);
  }
}

void ConfirmDeliveryRep::MergeFrom(const ConfirmDeliveryRep& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ttmall.ConfirmDeliveryRep)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ConfirmDeliveryRep::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ttmall.ConfirmDeliveryRep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfirmDeliveryRep::CopyFrom(const ConfirmDeliveryRep& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ttmall.ConfirmDeliveryRep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfirmDeliveryRep::IsInitialized() const {
  return true;
}

void ConfirmDeliveryRep::Swap(ConfirmDeliveryRep* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ConfirmDeliveryRep::InternalSwap(ConfirmDeliveryRep* other) {
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ConfirmDeliveryRep::GetMetadata() const {
  protobuf_driver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_driver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ConfirmDeliveryRep

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ListDriverOrderReq::kTokenFieldNumber;
const int ListDriverOrderReq::kOptFieldNumber;
const int ListDriverOrderReq::kSkipFieldNumber;
const int ListDriverOrderReq::kLimitFieldNumber;
const int ListDriverOrderReq::kBegTimeFieldNumber;
const int ListDriverOrderReq::kEndTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ListDriverOrderReq::ListDriverOrderReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_driver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ttmall.ListDriverOrderReq)
}
ListDriverOrderReq::ListDriverOrderReq(const ListDriverOrderReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.token().size() > 0) {
    token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  ::memcpy(&opt_, &from.opt_,
    reinterpret_cast<char*>(&limit_) -
    reinterpret_cast<char*>(&opt_) + sizeof(limit_));
  // @@protoc_insertion_point(copy_constructor:ttmall.ListDriverOrderReq)
}

void ListDriverOrderReq::SharedCtor() {
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&opt_, 0, reinterpret_cast<char*>(&limit_) -
    reinterpret_cast<char*>(&opt_) + sizeof(limit_));
  _cached_size_ = 0;
}

ListDriverOrderReq::~ListDriverOrderReq() {
  // @@protoc_insertion_point(destructor:ttmall.ListDriverOrderReq)
  SharedDtor();
}

void ListDriverOrderReq::SharedDtor() {
  token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ListDriverOrderReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListDriverOrderReq::descriptor() {
  protobuf_driver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_driver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ListDriverOrderReq& ListDriverOrderReq::default_instance() {
  protobuf_driver_2eproto::InitDefaults();
  return *internal_default_instance();
}

ListDriverOrderReq* ListDriverOrderReq::New(::google::protobuf::Arena* arena) const {
  ListDriverOrderReq* n = new ListDriverOrderReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ListDriverOrderReq::Clear() {
// @@protoc_insertion_point(message_clear_start:ttmall.ListDriverOrderReq)
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&opt_, 0, reinterpret_cast<char*>(&limit_) -
    reinterpret_cast<char*>(&opt_) + sizeof(limit_));
}

bool ListDriverOrderReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ttmall.ListDriverOrderReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string token = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ttmall.ListDriverOrderReq.token"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ttmall.ListDriverOrderOpt opt = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_opt(static_cast< ::ttmall::ListDriverOrderOpt >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 skip = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skip_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 limit = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &limit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 beg_time = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &beg_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 end_time = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &end_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ttmall.ListDriverOrderReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ttmall.ListDriverOrderReq)
  return false;
#undef DO_
}

void ListDriverOrderReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ttmall.ListDriverOrderReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string token = 1;
  if (this->token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ttmall.ListDriverOrderReq.token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->token(), output);
  }

  // .ttmall.ListDriverOrderOpt opt = 2;
  if (this->opt() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->opt(), output);
  }

  // int32 skip = 3;
  if (this->skip() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->skip(), output);
  }

  // int32 limit = 4;
  if (this->limit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->limit(), output);
  }

  // int64 beg_time = 5;
  if (this->beg_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->beg_time(), output);
  }

  // int64 end_time = 6;
  if (this->end_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->end_time(), output);
  }

  // @@protoc_insertion_point(serialize_end:ttmall.ListDriverOrderReq)
}

::google::protobuf::uint8* ListDriverOrderReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ttmall.ListDriverOrderReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string token = 1;
  if (this->token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ttmall.ListDriverOrderReq.token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->token(), target);
  }

  // .ttmall.ListDriverOrderOpt opt = 2;
  if (this->opt() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->opt(), target);
  }

  // int32 skip = 3;
  if (this->skip() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->skip(), target);
  }

  // int32 limit = 4;
  if (this->limit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->limit(), target);
  }

  // int64 beg_time = 5;
  if (this->beg_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->beg_time(), target);
  }

  // int64 end_time = 6;
  if (this->end_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->end_time(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ttmall.ListDriverOrderReq)
  return target;
}

size_t ListDriverOrderReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ttmall.ListDriverOrderReq)
  size_t total_size = 0;

  // string token = 1;
  if (this->token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->token());
  }

  // .ttmall.ListDriverOrderOpt opt = 2;
  if (this->opt() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->opt());
  }

  // int32 skip = 3;
  if (this->skip() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->skip());
  }

  // int64 beg_time = 5;
  if (this->beg_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->beg_time());
  }

  // int64 end_time = 6;
  if (this->end_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->end_time());
  }

  // int32 limit = 4;
  if (this->limit() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->limit());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListDriverOrderReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ttmall.ListDriverOrderReq)
  GOOGLE_DCHECK_NE(&from, this);
  const ListDriverOrderReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ListDriverOrderReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ttmall.ListDriverOrderReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ttmall.ListDriverOrderReq)
    MergeFrom(*source);
  }
}

void ListDriverOrderReq::MergeFrom(const ListDriverOrderReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ttmall.ListDriverOrderReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.token().size() > 0) {

    token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  if (from.opt() != 0) {
    set_opt(from.opt());
  }
  if (from.skip() != 0) {
    set_skip(from.skip());
  }
  if (from.beg_time() != 0) {
    set_beg_time(from.beg_time());
  }
  if (from.end_time() != 0) {
    set_end_time(from.end_time());
  }
  if (from.limit() != 0) {
    set_limit(from.limit());
  }
}

void ListDriverOrderReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ttmall.ListDriverOrderReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListDriverOrderReq::CopyFrom(const ListDriverOrderReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ttmall.ListDriverOrderReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListDriverOrderReq::IsInitialized() const {
  return true;
}

void ListDriverOrderReq::Swap(ListDriverOrderReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ListDriverOrderReq::InternalSwap(ListDriverOrderReq* other) {
  token_.Swap(&other->token_);
  std::swap(opt_, other->opt_);
  std::swap(skip_, other->skip_);
  std::swap(beg_time_, other->beg_time_);
  std::swap(end_time_, other->end_time_);
  std::swap(limit_, other->limit_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ListDriverOrderReq::GetMetadata() const {
  protobuf_driver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_driver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ListDriverOrderReq

// string token = 1;
void ListDriverOrderReq::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ListDriverOrderReq::token() const {
  // @@protoc_insertion_point(field_get:ttmall.ListDriverOrderReq.token)
  return token_.GetNoArena();
}
void ListDriverOrderReq::set_token(const ::std::string& value) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ttmall.ListDriverOrderReq.token)
}
#if LANG_CXX11
void ListDriverOrderReq::set_token(::std::string&& value) {
  
  token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ttmall.ListDriverOrderReq.token)
}
#endif
void ListDriverOrderReq::set_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ttmall.ListDriverOrderReq.token)
}
void ListDriverOrderReq::set_token(const char* value, size_t size) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ttmall.ListDriverOrderReq.token)
}
::std::string* ListDriverOrderReq::mutable_token() {
  
  // @@protoc_insertion_point(field_mutable:ttmall.ListDriverOrderReq.token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ListDriverOrderReq::release_token() {
  // @@protoc_insertion_point(field_release:ttmall.ListDriverOrderReq.token)
  
  return token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ListDriverOrderReq::set_allocated_token(::std::string* token) {
  if (token != NULL) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:ttmall.ListDriverOrderReq.token)
}

// .ttmall.ListDriverOrderOpt opt = 2;
void ListDriverOrderReq::clear_opt() {
  opt_ = 0;
}
::ttmall::ListDriverOrderOpt ListDriverOrderReq::opt() const {
  // @@protoc_insertion_point(field_get:ttmall.ListDriverOrderReq.opt)
  return static_cast< ::ttmall::ListDriverOrderOpt >(opt_);
}
void ListDriverOrderReq::set_opt(::ttmall::ListDriverOrderOpt value) {
  
  opt_ = value;
  // @@protoc_insertion_point(field_set:ttmall.ListDriverOrderReq.opt)
}

// int32 skip = 3;
void ListDriverOrderReq::clear_skip() {
  skip_ = 0;
}
::google::protobuf::int32 ListDriverOrderReq::skip() const {
  // @@protoc_insertion_point(field_get:ttmall.ListDriverOrderReq.skip)
  return skip_;
}
void ListDriverOrderReq::set_skip(::google::protobuf::int32 value) {
  
  skip_ = value;
  // @@protoc_insertion_point(field_set:ttmall.ListDriverOrderReq.skip)
}

// int32 limit = 4;
void ListDriverOrderReq::clear_limit() {
  limit_ = 0;
}
::google::protobuf::int32 ListDriverOrderReq::limit() const {
  // @@protoc_insertion_point(field_get:ttmall.ListDriverOrderReq.limit)
  return limit_;
}
void ListDriverOrderReq::set_limit(::google::protobuf::int32 value) {
  
  limit_ = value;
  // @@protoc_insertion_point(field_set:ttmall.ListDriverOrderReq.limit)
}

// int64 beg_time = 5;
void ListDriverOrderReq::clear_beg_time() {
  beg_time_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 ListDriverOrderReq::beg_time() const {
  // @@protoc_insertion_point(field_get:ttmall.ListDriverOrderReq.beg_time)
  return beg_time_;
}
void ListDriverOrderReq::set_beg_time(::google::protobuf::int64 value) {
  
  beg_time_ = value;
  // @@protoc_insertion_point(field_set:ttmall.ListDriverOrderReq.beg_time)
}

// int64 end_time = 6;
void ListDriverOrderReq::clear_end_time() {
  end_time_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 ListDriverOrderReq::end_time() const {
  // @@protoc_insertion_point(field_get:ttmall.ListDriverOrderReq.end_time)
  return end_time_;
}
void ListDriverOrderReq::set_end_time(::google::protobuf::int64 value) {
  
  end_time_ = value;
  // @@protoc_insertion_point(field_set:ttmall.ListDriverOrderReq.end_time)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ListDriverOrderRep::kItemsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ListDriverOrderRep::ListDriverOrderRep()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_driver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ttmall.ListDriverOrderRep)
}
ListDriverOrderRep::ListDriverOrderRep(const ListDriverOrderRep& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      items_(from.items_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ttmall.ListDriverOrderRep)
}

void ListDriverOrderRep::SharedCtor() {
  _cached_size_ = 0;
}

ListDriverOrderRep::~ListDriverOrderRep() {
  // @@protoc_insertion_point(destructor:ttmall.ListDriverOrderRep)
  SharedDtor();
}

void ListDriverOrderRep::SharedDtor() {
}

void ListDriverOrderRep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListDriverOrderRep::descriptor() {
  protobuf_driver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_driver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ListDriverOrderRep& ListDriverOrderRep::default_instance() {
  protobuf_driver_2eproto::InitDefaults();
  return *internal_default_instance();
}

ListDriverOrderRep* ListDriverOrderRep::New(::google::protobuf::Arena* arena) const {
  ListDriverOrderRep* n = new ListDriverOrderRep;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ListDriverOrderRep::Clear() {
// @@protoc_insertion_point(message_clear_start:ttmall.ListDriverOrderRep)
  items_.Clear();
}

bool ListDriverOrderRep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ttmall.ListDriverOrderRep)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ttmall.DeliveryNode items = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ttmall.ListDriverOrderRep)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ttmall.ListDriverOrderRep)
  return false;
#undef DO_
}

void ListDriverOrderRep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ttmall.ListDriverOrderRep)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ttmall.DeliveryNode items = 1;
  for (unsigned int i = 0, n = this->items_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->items(i), output);
  }

  // @@protoc_insertion_point(serialize_end:ttmall.ListDriverOrderRep)
}

::google::protobuf::uint8* ListDriverOrderRep::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ttmall.ListDriverOrderRep)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ttmall.DeliveryNode items = 1;
  for (unsigned int i = 0, n = this->items_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->items(i), deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ttmall.ListDriverOrderRep)
  return target;
}

size_t ListDriverOrderRep::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ttmall.ListDriverOrderRep)
  size_t total_size = 0;

  // repeated .ttmall.DeliveryNode items = 1;
  {
    unsigned int count = this->items_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->items(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListDriverOrderRep::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ttmall.ListDriverOrderRep)
  GOOGLE_DCHECK_NE(&from, this);
  const ListDriverOrderRep* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ListDriverOrderRep>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ttmall.ListDriverOrderRep)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ttmall.ListDriverOrderRep)
    MergeFrom(*source);
  }
}

void ListDriverOrderRep::MergeFrom(const ListDriverOrderRep& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ttmall.ListDriverOrderRep)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  items_.MergeFrom(from.items_);
}

void ListDriverOrderRep::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ttmall.ListDriverOrderRep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListDriverOrderRep::CopyFrom(const ListDriverOrderRep& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ttmall.ListDriverOrderRep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListDriverOrderRep::IsInitialized() const {
  return true;
}

void ListDriverOrderRep::Swap(ListDriverOrderRep* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ListDriverOrderRep::InternalSwap(ListDriverOrderRep* other) {
  items_.InternalSwap(&other->items_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ListDriverOrderRep::GetMetadata() const {
  protobuf_driver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_driver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ListDriverOrderRep

// repeated .ttmall.DeliveryNode items = 1;
int ListDriverOrderRep::items_size() const {
  return items_.size();
}
void ListDriverOrderRep::clear_items() {
  items_.Clear();
}
const ::ttmall::DeliveryNode& ListDriverOrderRep::items(int index) const {
  // @@protoc_insertion_point(field_get:ttmall.ListDriverOrderRep.items)
  return items_.Get(index);
}
::ttmall::DeliveryNode* ListDriverOrderRep::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:ttmall.ListDriverOrderRep.items)
  return items_.Mutable(index);
}
::ttmall::DeliveryNode* ListDriverOrderRep::add_items() {
  // @@protoc_insertion_point(field_add:ttmall.ListDriverOrderRep.items)
  return items_.Add();
}
::google::protobuf::RepeatedPtrField< ::ttmall::DeliveryNode >*
ListDriverOrderRep::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:ttmall.ListDriverOrderRep.items)
  return &items_;
}
const ::google::protobuf::RepeatedPtrField< ::ttmall::DeliveryNode >&
ListDriverOrderRep::items() const {
  // @@protoc_insertion_point(field_list:ttmall.ListDriverOrderRep.items)
  return items_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SignReceivingReq::kTokenFieldNumber;
const int SignReceivingReq::kIdFieldNumber;
const int SignReceivingReq::kIsExpFieldNumber;
const int SignReceivingReq::kExpDescFieldNumber;
const int SignReceivingReq::kSuggestFieldNumber;
const int SignReceivingReq::kMarkFieldNumber;
const int SignReceivingReq::kImagesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SignReceivingReq::SignReceivingReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_driver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ttmall.SignReceivingReq)
}
SignReceivingReq::SignReceivingReq(const SignReceivingReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      images_(from.images_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.token().size() > 0) {
    token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.id().size() > 0) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  exp_desc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.exp_desc().size() > 0) {
    exp_desc_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exp_desc_);
  }
  suggest_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.suggest().size() > 0) {
    suggest_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.suggest_);
  }
  mark_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.mark().size() > 0) {
    mark_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mark_);
  }
  is_exp_ = from.is_exp_;
  // @@protoc_insertion_point(copy_constructor:ttmall.SignReceivingReq)
}

void SignReceivingReq::SharedCtor() {
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exp_desc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  suggest_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mark_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  is_exp_ = false;
  _cached_size_ = 0;
}

SignReceivingReq::~SignReceivingReq() {
  // @@protoc_insertion_point(destructor:ttmall.SignReceivingReq)
  SharedDtor();
}

void SignReceivingReq::SharedDtor() {
  token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exp_desc_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  suggest_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mark_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SignReceivingReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SignReceivingReq::descriptor() {
  protobuf_driver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_driver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SignReceivingReq& SignReceivingReq::default_instance() {
  protobuf_driver_2eproto::InitDefaults();
  return *internal_default_instance();
}

SignReceivingReq* SignReceivingReq::New(::google::protobuf::Arena* arena) const {
  SignReceivingReq* n = new SignReceivingReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SignReceivingReq::Clear() {
// @@protoc_insertion_point(message_clear_start:ttmall.SignReceivingReq)
  images_.Clear();
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exp_desc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  suggest_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mark_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  is_exp_ = false;
}

bool SignReceivingReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ttmall.SignReceivingReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string token = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ttmall.SignReceivingReq.token"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ttmall.SignReceivingReq.id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_exp = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_exp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string exp_desc = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exp_desc()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->exp_desc().data(), this->exp_desc().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ttmall.SignReceivingReq.exp_desc"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string suggest = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_suggest()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->suggest().data(), this->suggest().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ttmall.SignReceivingReq.suggest"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string mark = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mark()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->mark().data(), this->mark().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ttmall.SignReceivingReq.mark"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bytes images = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_images()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ttmall.SignReceivingReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ttmall.SignReceivingReq)
  return false;
#undef DO_
}

void SignReceivingReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ttmall.SignReceivingReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string token = 1;
  if (this->token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ttmall.SignReceivingReq.token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->token(), output);
  }

  // string id = 2;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ttmall.SignReceivingReq.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->id(), output);
  }

  // bool is_exp = 3;
  if (this->is_exp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_exp(), output);
  }

  // string exp_desc = 4;
  if (this->exp_desc().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->exp_desc().data(), this->exp_desc().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ttmall.SignReceivingReq.exp_desc");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->exp_desc(), output);
  }

  // string suggest = 5;
  if (this->suggest().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->suggest().data(), this->suggest().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ttmall.SignReceivingReq.suggest");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->suggest(), output);
  }

  // string mark = 6;
  if (this->mark().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->mark().data(), this->mark().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ttmall.SignReceivingReq.mark");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->mark(), output);
  }

  // repeated bytes images = 7;
  for (int i = 0, n = this->images_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      7, this->images(i), output);
  }

  // @@protoc_insertion_point(serialize_end:ttmall.SignReceivingReq)
}

::google::protobuf::uint8* SignReceivingReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ttmall.SignReceivingReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string token = 1;
  if (this->token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ttmall.SignReceivingReq.token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->token(), target);
  }

  // string id = 2;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ttmall.SignReceivingReq.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->id(), target);
  }

  // bool is_exp = 3;
  if (this->is_exp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_exp(), target);
  }

  // string exp_desc = 4;
  if (this->exp_desc().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->exp_desc().data(), this->exp_desc().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ttmall.SignReceivingReq.exp_desc");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->exp_desc(), target);
  }

  // string suggest = 5;
  if (this->suggest().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->suggest().data(), this->suggest().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ttmall.SignReceivingReq.suggest");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->suggest(), target);
  }

  // string mark = 6;
  if (this->mark().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->mark().data(), this->mark().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ttmall.SignReceivingReq.mark");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->mark(), target);
  }

  // repeated bytes images = 7;
  for (int i = 0, n = this->images_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(7, this->images(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ttmall.SignReceivingReq)
  return target;
}

size_t SignReceivingReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ttmall.SignReceivingReq)
  size_t total_size = 0;

  // repeated bytes images = 7;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->images_size());
  for (int i = 0, n = this->images_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->images(i));
  }

  // string token = 1;
  if (this->token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->token());
  }

  // string id = 2;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  // string exp_desc = 4;
  if (this->exp_desc().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->exp_desc());
  }

  // string suggest = 5;
  if (this->suggest().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->suggest());
  }

  // string mark = 6;
  if (this->mark().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->mark());
  }

  // bool is_exp = 3;
  if (this->is_exp() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SignReceivingReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ttmall.SignReceivingReq)
  GOOGLE_DCHECK_NE(&from, this);
  const SignReceivingReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SignReceivingReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ttmall.SignReceivingReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ttmall.SignReceivingReq)
    MergeFrom(*source);
  }
}

void SignReceivingReq::MergeFrom(const SignReceivingReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ttmall.SignReceivingReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  images_.MergeFrom(from.images_);
  if (from.token().size() > 0) {

    token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.exp_desc().size() > 0) {

    exp_desc_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exp_desc_);
  }
  if (from.suggest().size() > 0) {

    suggest_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.suggest_);
  }
  if (from.mark().size() > 0) {

    mark_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mark_);
  }
  if (from.is_exp() != 0) {
    set_is_exp(from.is_exp());
  }
}

void SignReceivingReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ttmall.SignReceivingReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SignReceivingReq::CopyFrom(const SignReceivingReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ttmall.SignReceivingReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignReceivingReq::IsInitialized() const {
  return true;
}

void SignReceivingReq::Swap(SignReceivingReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SignReceivingReq::InternalSwap(SignReceivingReq* other) {
  images_.InternalSwap(&other->images_);
  token_.Swap(&other->token_);
  id_.Swap(&other->id_);
  exp_desc_.Swap(&other->exp_desc_);
  suggest_.Swap(&other->suggest_);
  mark_.Swap(&other->mark_);
  std::swap(is_exp_, other->is_exp_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SignReceivingReq::GetMetadata() const {
  protobuf_driver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_driver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SignReceivingReq

// string token = 1;
void SignReceivingReq::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SignReceivingReq::token() const {
  // @@protoc_insertion_point(field_get:ttmall.SignReceivingReq.token)
  return token_.GetNoArena();
}
void SignReceivingReq::set_token(const ::std::string& value) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ttmall.SignReceivingReq.token)
}
#if LANG_CXX11
void SignReceivingReq::set_token(::std::string&& value) {
  
  token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ttmall.SignReceivingReq.token)
}
#endif
void SignReceivingReq::set_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ttmall.SignReceivingReq.token)
}
void SignReceivingReq::set_token(const char* value, size_t size) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ttmall.SignReceivingReq.token)
}
::std::string* SignReceivingReq::mutable_token() {
  
  // @@protoc_insertion_point(field_mutable:ttmall.SignReceivingReq.token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SignReceivingReq::release_token() {
  // @@protoc_insertion_point(field_release:ttmall.SignReceivingReq.token)
  
  return token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SignReceivingReq::set_allocated_token(::std::string* token) {
  if (token != NULL) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:ttmall.SignReceivingReq.token)
}

// string id = 2;
void SignReceivingReq::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SignReceivingReq::id() const {
  // @@protoc_insertion_point(field_get:ttmall.SignReceivingReq.id)
  return id_.GetNoArena();
}
void SignReceivingReq::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ttmall.SignReceivingReq.id)
}
#if LANG_CXX11
void SignReceivingReq::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ttmall.SignReceivingReq.id)
}
#endif
void SignReceivingReq::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ttmall.SignReceivingReq.id)
}
void SignReceivingReq::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ttmall.SignReceivingReq.id)
}
::std::string* SignReceivingReq::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:ttmall.SignReceivingReq.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SignReceivingReq::release_id() {
  // @@protoc_insertion_point(field_release:ttmall.SignReceivingReq.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SignReceivingReq::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:ttmall.SignReceivingReq.id)
}

// bool is_exp = 3;
void SignReceivingReq::clear_is_exp() {
  is_exp_ = false;
}
bool SignReceivingReq::is_exp() const {
  // @@protoc_insertion_point(field_get:ttmall.SignReceivingReq.is_exp)
  return is_exp_;
}
void SignReceivingReq::set_is_exp(bool value) {
  
  is_exp_ = value;
  // @@protoc_insertion_point(field_set:ttmall.SignReceivingReq.is_exp)
}

// string exp_desc = 4;
void SignReceivingReq::clear_exp_desc() {
  exp_desc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SignReceivingReq::exp_desc() const {
  // @@protoc_insertion_point(field_get:ttmall.SignReceivingReq.exp_desc)
  return exp_desc_.GetNoArena();
}
void SignReceivingReq::set_exp_desc(const ::std::string& value) {
  
  exp_desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ttmall.SignReceivingReq.exp_desc)
}
#if LANG_CXX11
void SignReceivingReq::set_exp_desc(::std::string&& value) {
  
  exp_desc_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ttmall.SignReceivingReq.exp_desc)
}
#endif
void SignReceivingReq::set_exp_desc(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  exp_desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ttmall.SignReceivingReq.exp_desc)
}
void SignReceivingReq::set_exp_desc(const char* value, size_t size) {
  
  exp_desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ttmall.SignReceivingReq.exp_desc)
}
::std::string* SignReceivingReq::mutable_exp_desc() {
  
  // @@protoc_insertion_point(field_mutable:ttmall.SignReceivingReq.exp_desc)
  return exp_desc_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SignReceivingReq::release_exp_desc() {
  // @@protoc_insertion_point(field_release:ttmall.SignReceivingReq.exp_desc)
  
  return exp_desc_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SignReceivingReq::set_allocated_exp_desc(::std::string* exp_desc) {
  if (exp_desc != NULL) {
    
  } else {
    
  }
  exp_desc_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exp_desc);
  // @@protoc_insertion_point(field_set_allocated:ttmall.SignReceivingReq.exp_desc)
}

// string suggest = 5;
void SignReceivingReq::clear_suggest() {
  suggest_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SignReceivingReq::suggest() const {
  // @@protoc_insertion_point(field_get:ttmall.SignReceivingReq.suggest)
  return suggest_.GetNoArena();
}
void SignReceivingReq::set_suggest(const ::std::string& value) {
  
  suggest_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ttmall.SignReceivingReq.suggest)
}
#if LANG_CXX11
void SignReceivingReq::set_suggest(::std::string&& value) {
  
  suggest_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ttmall.SignReceivingReq.suggest)
}
#endif
void SignReceivingReq::set_suggest(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  suggest_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ttmall.SignReceivingReq.suggest)
}
void SignReceivingReq::set_suggest(const char* value, size_t size) {
  
  suggest_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ttmall.SignReceivingReq.suggest)
}
::std::string* SignReceivingReq::mutable_suggest() {
  
  // @@protoc_insertion_point(field_mutable:ttmall.SignReceivingReq.suggest)
  return suggest_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SignReceivingReq::release_suggest() {
  // @@protoc_insertion_point(field_release:ttmall.SignReceivingReq.suggest)
  
  return suggest_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SignReceivingReq::set_allocated_suggest(::std::string* suggest) {
  if (suggest != NULL) {
    
  } else {
    
  }
  suggest_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), suggest);
  // @@protoc_insertion_point(field_set_allocated:ttmall.SignReceivingReq.suggest)
}

// string mark = 6;
void SignReceivingReq::clear_mark() {
  mark_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SignReceivingReq::mark() const {
  // @@protoc_insertion_point(field_get:ttmall.SignReceivingReq.mark)
  return mark_.GetNoArena();
}
void SignReceivingReq::set_mark(const ::std::string& value) {
  
  mark_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ttmall.SignReceivingReq.mark)
}
#if LANG_CXX11
void SignReceivingReq::set_mark(::std::string&& value) {
  
  mark_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ttmall.SignReceivingReq.mark)
}
#endif
void SignReceivingReq::set_mark(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  mark_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ttmall.SignReceivingReq.mark)
}
void SignReceivingReq::set_mark(const char* value, size_t size) {
  
  mark_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ttmall.SignReceivingReq.mark)
}
::std::string* SignReceivingReq::mutable_mark() {
  
  // @@protoc_insertion_point(field_mutable:ttmall.SignReceivingReq.mark)
  return mark_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SignReceivingReq::release_mark() {
  // @@protoc_insertion_point(field_release:ttmall.SignReceivingReq.mark)
  
  return mark_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SignReceivingReq::set_allocated_mark(::std::string* mark) {
  if (mark != NULL) {
    
  } else {
    
  }
  mark_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mark);
  // @@protoc_insertion_point(field_set_allocated:ttmall.SignReceivingReq.mark)
}

// repeated bytes images = 7;
int SignReceivingReq::images_size() const {
  return images_.size();
}
void SignReceivingReq::clear_images() {
  images_.Clear();
}
const ::std::string& SignReceivingReq::images(int index) const {
  // @@protoc_insertion_point(field_get:ttmall.SignReceivingReq.images)
  return images_.Get(index);
}
::std::string* SignReceivingReq::mutable_images(int index) {
  // @@protoc_insertion_point(field_mutable:ttmall.SignReceivingReq.images)
  return images_.Mutable(index);
}
void SignReceivingReq::set_images(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ttmall.SignReceivingReq.images)
  images_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void SignReceivingReq::set_images(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ttmall.SignReceivingReq.images)
  images_.Mutable(index)->assign(std::move(value));
}
#endif
void SignReceivingReq::set_images(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  images_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ttmall.SignReceivingReq.images)
}
void SignReceivingReq::set_images(int index, const void* value, size_t size) {
  images_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ttmall.SignReceivingReq.images)
}
::std::string* SignReceivingReq::add_images() {
  // @@protoc_insertion_point(field_add_mutable:ttmall.SignReceivingReq.images)
  return images_.Add();
}
void SignReceivingReq::add_images(const ::std::string& value) {
  images_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ttmall.SignReceivingReq.images)
}
#if LANG_CXX11
void SignReceivingReq::add_images(::std::string&& value) {
  images_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ttmall.SignReceivingReq.images)
}
#endif
void SignReceivingReq::add_images(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  images_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ttmall.SignReceivingReq.images)
}
void SignReceivingReq::add_images(const void* value, size_t size) {
  images_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ttmall.SignReceivingReq.images)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
SignReceivingReq::images() const {
  // @@protoc_insertion_point(field_list:ttmall.SignReceivingReq.images)
  return images_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
SignReceivingReq::mutable_images() {
  // @@protoc_insertion_point(field_mutable_list:ttmall.SignReceivingReq.images)
  return &images_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SignReceivingRep::kIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SignReceivingRep::SignReceivingRep()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_driver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ttmall.SignReceivingRep)
}
SignReceivingRep::SignReceivingRep(const SignReceivingRep& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.id().size() > 0) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  // @@protoc_insertion_point(copy_constructor:ttmall.SignReceivingRep)
}

void SignReceivingRep::SharedCtor() {
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

SignReceivingRep::~SignReceivingRep() {
  // @@protoc_insertion_point(destructor:ttmall.SignReceivingRep)
  SharedDtor();
}

void SignReceivingRep::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SignReceivingRep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SignReceivingRep::descriptor() {
  protobuf_driver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_driver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SignReceivingRep& SignReceivingRep::default_instance() {
  protobuf_driver_2eproto::InitDefaults();
  return *internal_default_instance();
}

SignReceivingRep* SignReceivingRep::New(::google::protobuf::Arena* arena) const {
  SignReceivingRep* n = new SignReceivingRep;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SignReceivingRep::Clear() {
// @@protoc_insertion_point(message_clear_start:ttmall.SignReceivingRep)
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool SignReceivingRep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ttmall.SignReceivingRep)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ttmall.SignReceivingRep.id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ttmall.SignReceivingRep)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ttmall.SignReceivingRep)
  return false;
#undef DO_
}

void SignReceivingRep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ttmall.SignReceivingRep)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ttmall.SignReceivingRep.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // @@protoc_insertion_point(serialize_end:ttmall.SignReceivingRep)
}

::google::protobuf::uint8* SignReceivingRep::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ttmall.SignReceivingRep)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ttmall.SignReceivingRep.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ttmall.SignReceivingRep)
  return target;
}

size_t SignReceivingRep::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ttmall.SignReceivingRep)
  size_t total_size = 0;

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SignReceivingRep::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ttmall.SignReceivingRep)
  GOOGLE_DCHECK_NE(&from, this);
  const SignReceivingRep* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SignReceivingRep>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ttmall.SignReceivingRep)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ttmall.SignReceivingRep)
    MergeFrom(*source);
  }
}

void SignReceivingRep::MergeFrom(const SignReceivingRep& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ttmall.SignReceivingRep)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
}

void SignReceivingRep::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ttmall.SignReceivingRep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SignReceivingRep::CopyFrom(const SignReceivingRep& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ttmall.SignReceivingRep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignReceivingRep::IsInitialized() const {
  return true;
}

void SignReceivingRep::Swap(SignReceivingRep* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SignReceivingRep::InternalSwap(SignReceivingRep* other) {
  id_.Swap(&other->id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SignReceivingRep::GetMetadata() const {
  protobuf_driver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_driver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SignReceivingRep

// string id = 1;
void SignReceivingRep::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SignReceivingRep::id() const {
  // @@protoc_insertion_point(field_get:ttmall.SignReceivingRep.id)
  return id_.GetNoArena();
}
void SignReceivingRep::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ttmall.SignReceivingRep.id)
}
#if LANG_CXX11
void SignReceivingRep::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ttmall.SignReceivingRep.id)
}
#endif
void SignReceivingRep::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ttmall.SignReceivingRep.id)
}
void SignReceivingRep::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ttmall.SignReceivingRep.id)
}
::std::string* SignReceivingRep::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:ttmall.SignReceivingRep.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SignReceivingRep::release_id() {
  // @@protoc_insertion_point(field_release:ttmall.SignReceivingRep.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SignReceivingRep::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:ttmall.SignReceivingRep.id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UpdateDriverPassReq::kTokenFieldNumber;
const int UpdateDriverPassReq::kCodeFieldNumber;
const int UpdateDriverPassReq::kPassFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UpdateDriverPassReq::UpdateDriverPassReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_driver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ttmall.UpdateDriverPassReq)
}
UpdateDriverPassReq::UpdateDriverPassReq(const UpdateDriverPassReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.token().size() > 0) {
    token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.code().size() > 0) {
    code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.code_);
  }
  pass_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.pass().size() > 0) {
    pass_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pass_);
  }
  // @@protoc_insertion_point(copy_constructor:ttmall.UpdateDriverPassReq)
}

void UpdateDriverPassReq::SharedCtor() {
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pass_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

UpdateDriverPassReq::~UpdateDriverPassReq() {
  // @@protoc_insertion_point(destructor:ttmall.UpdateDriverPassReq)
  SharedDtor();
}

void UpdateDriverPassReq::SharedDtor() {
  token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pass_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void UpdateDriverPassReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateDriverPassReq::descriptor() {
  protobuf_driver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_driver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UpdateDriverPassReq& UpdateDriverPassReq::default_instance() {
  protobuf_driver_2eproto::InitDefaults();
  return *internal_default_instance();
}

UpdateDriverPassReq* UpdateDriverPassReq::New(::google::protobuf::Arena* arena) const {
  UpdateDriverPassReq* n = new UpdateDriverPassReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UpdateDriverPassReq::Clear() {
// @@protoc_insertion_point(message_clear_start:ttmall.UpdateDriverPassReq)
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pass_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool UpdateDriverPassReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ttmall.UpdateDriverPassReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string token = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ttmall.UpdateDriverPassReq.token"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string code = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_code()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->code().data(), this->code().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ttmall.UpdateDriverPassReq.code"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string pass = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pass()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->pass().data(), this->pass().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ttmall.UpdateDriverPassReq.pass"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ttmall.UpdateDriverPassReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ttmall.UpdateDriverPassReq)
  return false;
#undef DO_
}

void UpdateDriverPassReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ttmall.UpdateDriverPassReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string token = 1;
  if (this->token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ttmall.UpdateDriverPassReq.token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->token(), output);
  }

  // string code = 2;
  if (this->code().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->code().data(), this->code().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ttmall.UpdateDriverPassReq.code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->code(), output);
  }

  // string pass = 3;
  if (this->pass().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->pass().data(), this->pass().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ttmall.UpdateDriverPassReq.pass");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->pass(), output);
  }

  // @@protoc_insertion_point(serialize_end:ttmall.UpdateDriverPassReq)
}

::google::protobuf::uint8* UpdateDriverPassReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ttmall.UpdateDriverPassReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string token = 1;
  if (this->token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ttmall.UpdateDriverPassReq.token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->token(), target);
  }

  // string code = 2;
  if (this->code().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->code().data(), this->code().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ttmall.UpdateDriverPassReq.code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->code(), target);
  }

  // string pass = 3;
  if (this->pass().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->pass().data(), this->pass().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ttmall.UpdateDriverPassReq.pass");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->pass(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ttmall.UpdateDriverPassReq)
  return target;
}

size_t UpdateDriverPassReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ttmall.UpdateDriverPassReq)
  size_t total_size = 0;

  // string token = 1;
  if (this->token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->token());
  }

  // string code = 2;
  if (this->code().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->code());
  }

  // string pass = 3;
  if (this->pass().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->pass());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateDriverPassReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ttmall.UpdateDriverPassReq)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateDriverPassReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UpdateDriverPassReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ttmall.UpdateDriverPassReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ttmall.UpdateDriverPassReq)
    MergeFrom(*source);
  }
}

void UpdateDriverPassReq::MergeFrom(const UpdateDriverPassReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ttmall.UpdateDriverPassReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.token().size() > 0) {

    token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  if (from.code().size() > 0) {

    code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.code_);
  }
  if (from.pass().size() > 0) {

    pass_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pass_);
  }
}

void UpdateDriverPassReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ttmall.UpdateDriverPassReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateDriverPassReq::CopyFrom(const UpdateDriverPassReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ttmall.UpdateDriverPassReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateDriverPassReq::IsInitialized() const {
  return true;
}

void UpdateDriverPassReq::Swap(UpdateDriverPassReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UpdateDriverPassReq::InternalSwap(UpdateDriverPassReq* other) {
  token_.Swap(&other->token_);
  code_.Swap(&other->code_);
  pass_.Swap(&other->pass_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UpdateDriverPassReq::GetMetadata() const {
  protobuf_driver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_driver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UpdateDriverPassReq

// string token = 1;
void UpdateDriverPassReq::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& UpdateDriverPassReq::token() const {
  // @@protoc_insertion_point(field_get:ttmall.UpdateDriverPassReq.token)
  return token_.GetNoArena();
}
void UpdateDriverPassReq::set_token(const ::std::string& value) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ttmall.UpdateDriverPassReq.token)
}
#if LANG_CXX11
void UpdateDriverPassReq::set_token(::std::string&& value) {
  
  token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ttmall.UpdateDriverPassReq.token)
}
#endif
void UpdateDriverPassReq::set_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ttmall.UpdateDriverPassReq.token)
}
void UpdateDriverPassReq::set_token(const char* value, size_t size) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ttmall.UpdateDriverPassReq.token)
}
::std::string* UpdateDriverPassReq::mutable_token() {
  
  // @@protoc_insertion_point(field_mutable:ttmall.UpdateDriverPassReq.token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UpdateDriverPassReq::release_token() {
  // @@protoc_insertion_point(field_release:ttmall.UpdateDriverPassReq.token)
  
  return token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UpdateDriverPassReq::set_allocated_token(::std::string* token) {
  if (token != NULL) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:ttmall.UpdateDriverPassReq.token)
}

// string code = 2;
void UpdateDriverPassReq::clear_code() {
  code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& UpdateDriverPassReq::code() const {
  // @@protoc_insertion_point(field_get:ttmall.UpdateDriverPassReq.code)
  return code_.GetNoArena();
}
void UpdateDriverPassReq::set_code(const ::std::string& value) {
  
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ttmall.UpdateDriverPassReq.code)
}
#if LANG_CXX11
void UpdateDriverPassReq::set_code(::std::string&& value) {
  
  code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ttmall.UpdateDriverPassReq.code)
}
#endif
void UpdateDriverPassReq::set_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ttmall.UpdateDriverPassReq.code)
}
void UpdateDriverPassReq::set_code(const char* value, size_t size) {
  
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ttmall.UpdateDriverPassReq.code)
}
::std::string* UpdateDriverPassReq::mutable_code() {
  
  // @@protoc_insertion_point(field_mutable:ttmall.UpdateDriverPassReq.code)
  return code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UpdateDriverPassReq::release_code() {
  // @@protoc_insertion_point(field_release:ttmall.UpdateDriverPassReq.code)
  
  return code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UpdateDriverPassReq::set_allocated_code(::std::string* code) {
  if (code != NULL) {
    
  } else {
    
  }
  code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), code);
  // @@protoc_insertion_point(field_set_allocated:ttmall.UpdateDriverPassReq.code)
}

// string pass = 3;
void UpdateDriverPassReq::clear_pass() {
  pass_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& UpdateDriverPassReq::pass() const {
  // @@protoc_insertion_point(field_get:ttmall.UpdateDriverPassReq.pass)
  return pass_.GetNoArena();
}
void UpdateDriverPassReq::set_pass(const ::std::string& value) {
  
  pass_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ttmall.UpdateDriverPassReq.pass)
}
#if LANG_CXX11
void UpdateDriverPassReq::set_pass(::std::string&& value) {
  
  pass_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ttmall.UpdateDriverPassReq.pass)
}
#endif
void UpdateDriverPassReq::set_pass(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  pass_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ttmall.UpdateDriverPassReq.pass)
}
void UpdateDriverPassReq::set_pass(const char* value, size_t size) {
  
  pass_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ttmall.UpdateDriverPassReq.pass)
}
::std::string* UpdateDriverPassReq::mutable_pass() {
  
  // @@protoc_insertion_point(field_mutable:ttmall.UpdateDriverPassReq.pass)
  return pass_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UpdateDriverPassReq::release_pass() {
  // @@protoc_insertion_point(field_release:ttmall.UpdateDriverPassReq.pass)
  
  return pass_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UpdateDriverPassReq::set_allocated_pass(::std::string* pass) {
  if (pass != NULL) {
    
  } else {
    
  }
  pass_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pass);
  // @@protoc_insertion_point(field_set_allocated:ttmall.UpdateDriverPassReq.pass)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UpdateDriverPassRep::kInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UpdateDriverPassRep::UpdateDriverPassRep()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_driver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ttmall.UpdateDriverPassRep)
}
UpdateDriverPassRep::UpdateDriverPassRep(const UpdateDriverPassRep& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_info()) {
    info_ = new ::ttmall::DriverInfo(*from.info_);
  } else {
    info_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:ttmall.UpdateDriverPassRep)
}

void UpdateDriverPassRep::SharedCtor() {
  info_ = NULL;
  _cached_size_ = 0;
}

UpdateDriverPassRep::~UpdateDriverPassRep() {
  // @@protoc_insertion_point(destructor:ttmall.UpdateDriverPassRep)
  SharedDtor();
}

void UpdateDriverPassRep::SharedDtor() {
  if (this != internal_default_instance()) {
    delete info_;
  }
}

void UpdateDriverPassRep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateDriverPassRep::descriptor() {
  protobuf_driver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_driver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UpdateDriverPassRep& UpdateDriverPassRep::default_instance() {
  protobuf_driver_2eproto::InitDefaults();
  return *internal_default_instance();
}

UpdateDriverPassRep* UpdateDriverPassRep::New(::google::protobuf::Arena* arena) const {
  UpdateDriverPassRep* n = new UpdateDriverPassRep;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UpdateDriverPassRep::Clear() {
// @@protoc_insertion_point(message_clear_start:ttmall.UpdateDriverPassRep)
  if (GetArenaNoVirtual() == NULL && info_ != NULL) {
    delete info_;
  }
  info_ = NULL;
}

bool UpdateDriverPassRep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ttmall.UpdateDriverPassRep)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ttmall.DriverInfo info = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ttmall.UpdateDriverPassRep)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ttmall.UpdateDriverPassRep)
  return false;
#undef DO_
}

void UpdateDriverPassRep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ttmall.UpdateDriverPassRep)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ttmall.DriverInfo info = 1;
  if (this->has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->info_, output);
  }

  // @@protoc_insertion_point(serialize_end:ttmall.UpdateDriverPassRep)
}

::google::protobuf::uint8* UpdateDriverPassRep::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ttmall.UpdateDriverPassRep)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ttmall.DriverInfo info = 1;
  if (this->has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->info_, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ttmall.UpdateDriverPassRep)
  return target;
}

size_t UpdateDriverPassRep::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ttmall.UpdateDriverPassRep)
  size_t total_size = 0;

  // .ttmall.DriverInfo info = 1;
  if (this->has_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->info_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateDriverPassRep::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ttmall.UpdateDriverPassRep)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateDriverPassRep* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UpdateDriverPassRep>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ttmall.UpdateDriverPassRep)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ttmall.UpdateDriverPassRep)
    MergeFrom(*source);
  }
}

void UpdateDriverPassRep::MergeFrom(const UpdateDriverPassRep& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ttmall.UpdateDriverPassRep)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_info()) {
    mutable_info()->::ttmall::DriverInfo::MergeFrom(from.info());
  }
}

void UpdateDriverPassRep::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ttmall.UpdateDriverPassRep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateDriverPassRep::CopyFrom(const UpdateDriverPassRep& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ttmall.UpdateDriverPassRep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateDriverPassRep::IsInitialized() const {
  return true;
}

void UpdateDriverPassRep::Swap(UpdateDriverPassRep* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UpdateDriverPassRep::InternalSwap(UpdateDriverPassRep* other) {
  std::swap(info_, other->info_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UpdateDriverPassRep::GetMetadata() const {
  protobuf_driver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_driver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UpdateDriverPassRep

// .ttmall.DriverInfo info = 1;
bool UpdateDriverPassRep::has_info() const {
  return this != internal_default_instance() && info_ != NULL;
}
void UpdateDriverPassRep::clear_info() {
  if (GetArenaNoVirtual() == NULL && info_ != NULL) delete info_;
  info_ = NULL;
}
const ::ttmall::DriverInfo& UpdateDriverPassRep::info() const {
  // @@protoc_insertion_point(field_get:ttmall.UpdateDriverPassRep.info)
  return info_ != NULL ? *info_
                         : *::ttmall::DriverInfo::internal_default_instance();
}
::ttmall::DriverInfo* UpdateDriverPassRep::mutable_info() {
  
  if (info_ == NULL) {
    info_ = new ::ttmall::DriverInfo;
  }
  // @@protoc_insertion_point(field_mutable:ttmall.UpdateDriverPassRep.info)
  return info_;
}
::ttmall::DriverInfo* UpdateDriverPassRep::release_info() {
  // @@protoc_insertion_point(field_release:ttmall.UpdateDriverPassRep.info)
  
  ::ttmall::DriverInfo* temp = info_;
  info_ = NULL;
  return temp;
}
void UpdateDriverPassRep::set_allocated_info(::ttmall::DriverInfo* info) {
  delete info_;
  info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ttmall.UpdateDriverPassRep.info)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UpdateDriverMobileReq::kLoginTokenFieldNumber;
const int UpdateDriverMobileReq::kLoginPassFieldNumber;
const int UpdateDriverMobileReq::kMobileTokenFieldNumber;
const int UpdateDriverMobileReq::kMobileCodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UpdateDriverMobileReq::UpdateDriverMobileReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_driver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ttmall.UpdateDriverMobileReq)
}
UpdateDriverMobileReq::UpdateDriverMobileReq(const UpdateDriverMobileReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  login_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.login_token().size() > 0) {
    login_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.login_token_);
  }
  login_pass_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.login_pass().size() > 0) {
    login_pass_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.login_pass_);
  }
  mobile_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.mobile_token().size() > 0) {
    mobile_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mobile_token_);
  }
  mobile_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.mobile_code().size() > 0) {
    mobile_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mobile_code_);
  }
  // @@protoc_insertion_point(copy_constructor:ttmall.UpdateDriverMobileReq)
}

void UpdateDriverMobileReq::SharedCtor() {
  login_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  login_pass_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mobile_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mobile_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

UpdateDriverMobileReq::~UpdateDriverMobileReq() {
  // @@protoc_insertion_point(destructor:ttmall.UpdateDriverMobileReq)
  SharedDtor();
}

void UpdateDriverMobileReq::SharedDtor() {
  login_token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  login_pass_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mobile_token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mobile_code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void UpdateDriverMobileReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateDriverMobileReq::descriptor() {
  protobuf_driver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_driver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UpdateDriverMobileReq& UpdateDriverMobileReq::default_instance() {
  protobuf_driver_2eproto::InitDefaults();
  return *internal_default_instance();
}

UpdateDriverMobileReq* UpdateDriverMobileReq::New(::google::protobuf::Arena* arena) const {
  UpdateDriverMobileReq* n = new UpdateDriverMobileReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UpdateDriverMobileReq::Clear() {
// @@protoc_insertion_point(message_clear_start:ttmall.UpdateDriverMobileReq)
  login_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  login_pass_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mobile_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mobile_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool UpdateDriverMobileReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ttmall.UpdateDriverMobileReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string login_token = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_login_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->login_token().data(), this->login_token().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ttmall.UpdateDriverMobileReq.login_token"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string login_pass = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_login_pass()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->login_pass().data(), this->login_pass().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ttmall.UpdateDriverMobileReq.login_pass"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string mobile_token = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mobile_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->mobile_token().data(), this->mobile_token().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ttmall.UpdateDriverMobileReq.mobile_token"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string mobile_code = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mobile_code()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->mobile_code().data(), this->mobile_code().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ttmall.UpdateDriverMobileReq.mobile_code"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ttmall.UpdateDriverMobileReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ttmall.UpdateDriverMobileReq)
  return false;
#undef DO_
}

void UpdateDriverMobileReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ttmall.UpdateDriverMobileReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string login_token = 1;
  if (this->login_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->login_token().data(), this->login_token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ttmall.UpdateDriverMobileReq.login_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->login_token(), output);
  }

  // string login_pass = 2;
  if (this->login_pass().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->login_pass().data(), this->login_pass().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ttmall.UpdateDriverMobileReq.login_pass");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->login_pass(), output);
  }

  // string mobile_token = 3;
  if (this->mobile_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->mobile_token().data(), this->mobile_token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ttmall.UpdateDriverMobileReq.mobile_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->mobile_token(), output);
  }

  // string mobile_code = 4;
  if (this->mobile_code().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->mobile_code().data(), this->mobile_code().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ttmall.UpdateDriverMobileReq.mobile_code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->mobile_code(), output);
  }

  // @@protoc_insertion_point(serialize_end:ttmall.UpdateDriverMobileReq)
}

::google::protobuf::uint8* UpdateDriverMobileReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ttmall.UpdateDriverMobileReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string login_token = 1;
  if (this->login_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->login_token().data(), this->login_token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ttmall.UpdateDriverMobileReq.login_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->login_token(), target);
  }

  // string login_pass = 2;
  if (this->login_pass().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->login_pass().data(), this->login_pass().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ttmall.UpdateDriverMobileReq.login_pass");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->login_pass(), target);
  }

  // string mobile_token = 3;
  if (this->mobile_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->mobile_token().data(), this->mobile_token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ttmall.UpdateDriverMobileReq.mobile_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->mobile_token(), target);
  }

  // string mobile_code = 4;
  if (this->mobile_code().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->mobile_code().data(), this->mobile_code().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ttmall.UpdateDriverMobileReq.mobile_code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->mobile_code(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ttmall.UpdateDriverMobileReq)
  return target;
}

size_t UpdateDriverMobileReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ttmall.UpdateDriverMobileReq)
  size_t total_size = 0;

  // string login_token = 1;
  if (this->login_token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->login_token());
  }

  // string login_pass = 2;
  if (this->login_pass().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->login_pass());
  }

  // string mobile_token = 3;
  if (this->mobile_token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->mobile_token());
  }

  // string mobile_code = 4;
  if (this->mobile_code().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->mobile_code());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateDriverMobileReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ttmall.UpdateDriverMobileReq)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateDriverMobileReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UpdateDriverMobileReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ttmall.UpdateDriverMobileReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ttmall.UpdateDriverMobileReq)
    MergeFrom(*source);
  }
}

void UpdateDriverMobileReq::MergeFrom(const UpdateDriverMobileReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ttmall.UpdateDriverMobileReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.login_token().size() > 0) {

    login_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.login_token_);
  }
  if (from.login_pass().size() > 0) {

    login_pass_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.login_pass_);
  }
  if (from.mobile_token().size() > 0) {

    mobile_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mobile_token_);
  }
  if (from.mobile_code().size() > 0) {

    mobile_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mobile_code_);
  }
}

void UpdateDriverMobileReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ttmall.UpdateDriverMobileReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateDriverMobileReq::CopyFrom(const UpdateDriverMobileReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ttmall.UpdateDriverMobileReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateDriverMobileReq::IsInitialized() const {
  return true;
}

void UpdateDriverMobileReq::Swap(UpdateDriverMobileReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UpdateDriverMobileReq::InternalSwap(UpdateDriverMobileReq* other) {
  login_token_.Swap(&other->login_token_);
  login_pass_.Swap(&other->login_pass_);
  mobile_token_.Swap(&other->mobile_token_);
  mobile_code_.Swap(&other->mobile_code_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UpdateDriverMobileReq::GetMetadata() const {
  protobuf_driver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_driver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UpdateDriverMobileReq

// string login_token = 1;
void UpdateDriverMobileReq::clear_login_token() {
  login_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& UpdateDriverMobileReq::login_token() const {
  // @@protoc_insertion_point(field_get:ttmall.UpdateDriverMobileReq.login_token)
  return login_token_.GetNoArena();
}
void UpdateDriverMobileReq::set_login_token(const ::std::string& value) {
  
  login_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ttmall.UpdateDriverMobileReq.login_token)
}
#if LANG_CXX11
void UpdateDriverMobileReq::set_login_token(::std::string&& value) {
  
  login_token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ttmall.UpdateDriverMobileReq.login_token)
}
#endif
void UpdateDriverMobileReq::set_login_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  login_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ttmall.UpdateDriverMobileReq.login_token)
}
void UpdateDriverMobileReq::set_login_token(const char* value, size_t size) {
  
  login_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ttmall.UpdateDriverMobileReq.login_token)
}
::std::string* UpdateDriverMobileReq::mutable_login_token() {
  
  // @@protoc_insertion_point(field_mutable:ttmall.UpdateDriverMobileReq.login_token)
  return login_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UpdateDriverMobileReq::release_login_token() {
  // @@protoc_insertion_point(field_release:ttmall.UpdateDriverMobileReq.login_token)
  
  return login_token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UpdateDriverMobileReq::set_allocated_login_token(::std::string* login_token) {
  if (login_token != NULL) {
    
  } else {
    
  }
  login_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), login_token);
  // @@protoc_insertion_point(field_set_allocated:ttmall.UpdateDriverMobileReq.login_token)
}

// string login_pass = 2;
void UpdateDriverMobileReq::clear_login_pass() {
  login_pass_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& UpdateDriverMobileReq::login_pass() const {
  // @@protoc_insertion_point(field_get:ttmall.UpdateDriverMobileReq.login_pass)
  return login_pass_.GetNoArena();
}
void UpdateDriverMobileReq::set_login_pass(const ::std::string& value) {
  
  login_pass_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ttmall.UpdateDriverMobileReq.login_pass)
}
#if LANG_CXX11
void UpdateDriverMobileReq::set_login_pass(::std::string&& value) {
  
  login_pass_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ttmall.UpdateDriverMobileReq.login_pass)
}
#endif
void UpdateDriverMobileReq::set_login_pass(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  login_pass_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ttmall.UpdateDriverMobileReq.login_pass)
}
void UpdateDriverMobileReq::set_login_pass(const char* value, size_t size) {
  
  login_pass_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ttmall.UpdateDriverMobileReq.login_pass)
}
::std::string* UpdateDriverMobileReq::mutable_login_pass() {
  
  // @@protoc_insertion_point(field_mutable:ttmall.UpdateDriverMobileReq.login_pass)
  return login_pass_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UpdateDriverMobileReq::release_login_pass() {
  // @@protoc_insertion_point(field_release:ttmall.UpdateDriverMobileReq.login_pass)
  
  return login_pass_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UpdateDriverMobileReq::set_allocated_login_pass(::std::string* login_pass) {
  if (login_pass != NULL) {
    
  } else {
    
  }
  login_pass_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), login_pass);
  // @@protoc_insertion_point(field_set_allocated:ttmall.UpdateDriverMobileReq.login_pass)
}

// string mobile_token = 3;
void UpdateDriverMobileReq::clear_mobile_token() {
  mobile_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& UpdateDriverMobileReq::mobile_token() const {
  // @@protoc_insertion_point(field_get:ttmall.UpdateDriverMobileReq.mobile_token)
  return mobile_token_.GetNoArena();
}
void UpdateDriverMobileReq::set_mobile_token(const ::std::string& value) {
  
  mobile_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ttmall.UpdateDriverMobileReq.mobile_token)
}
#if LANG_CXX11
void UpdateDriverMobileReq::set_mobile_token(::std::string&& value) {
  
  mobile_token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ttmall.UpdateDriverMobileReq.mobile_token)
}
#endif
void UpdateDriverMobileReq::set_mobile_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  mobile_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ttmall.UpdateDriverMobileReq.mobile_token)
}
void UpdateDriverMobileReq::set_mobile_token(const char* value, size_t size) {
  
  mobile_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ttmall.UpdateDriverMobileReq.mobile_token)
}
::std::string* UpdateDriverMobileReq::mutable_mobile_token() {
  
  // @@protoc_insertion_point(field_mutable:ttmall.UpdateDriverMobileReq.mobile_token)
  return mobile_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UpdateDriverMobileReq::release_mobile_token() {
  // @@protoc_insertion_point(field_release:ttmall.UpdateDriverMobileReq.mobile_token)
  
  return mobile_token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UpdateDriverMobileReq::set_allocated_mobile_token(::std::string* mobile_token) {
  if (mobile_token != NULL) {
    
  } else {
    
  }
  mobile_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mobile_token);
  // @@protoc_insertion_point(field_set_allocated:ttmall.UpdateDriverMobileReq.mobile_token)
}

// string mobile_code = 4;
void UpdateDriverMobileReq::clear_mobile_code() {
  mobile_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& UpdateDriverMobileReq::mobile_code() const {
  // @@protoc_insertion_point(field_get:ttmall.UpdateDriverMobileReq.mobile_code)
  return mobile_code_.GetNoArena();
}
void UpdateDriverMobileReq::set_mobile_code(const ::std::string& value) {
  
  mobile_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ttmall.UpdateDriverMobileReq.mobile_code)
}
#if LANG_CXX11
void UpdateDriverMobileReq::set_mobile_code(::std::string&& value) {
  
  mobile_code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ttmall.UpdateDriverMobileReq.mobile_code)
}
#endif
void UpdateDriverMobileReq::set_mobile_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  mobile_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ttmall.UpdateDriverMobileReq.mobile_code)
}
void UpdateDriverMobileReq::set_mobile_code(const char* value, size_t size) {
  
  mobile_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ttmall.UpdateDriverMobileReq.mobile_code)
}
::std::string* UpdateDriverMobileReq::mutable_mobile_code() {
  
  // @@protoc_insertion_point(field_mutable:ttmall.UpdateDriverMobileReq.mobile_code)
  return mobile_code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UpdateDriverMobileReq::release_mobile_code() {
  // @@protoc_insertion_point(field_release:ttmall.UpdateDriverMobileReq.mobile_code)
  
  return mobile_code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UpdateDriverMobileReq::set_allocated_mobile_code(::std::string* mobile_code) {
  if (mobile_code != NULL) {
    
  } else {
    
  }
  mobile_code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mobile_code);
  // @@protoc_insertion_point(field_set_allocated:ttmall.UpdateDriverMobileReq.mobile_code)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UpdateDriverMobileRep::kInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UpdateDriverMobileRep::UpdateDriverMobileRep()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_driver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ttmall.UpdateDriverMobileRep)
}
UpdateDriverMobileRep::UpdateDriverMobileRep(const UpdateDriverMobileRep& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_info()) {
    info_ = new ::ttmall::DriverInfo(*from.info_);
  } else {
    info_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:ttmall.UpdateDriverMobileRep)
}

void UpdateDriverMobileRep::SharedCtor() {
  info_ = NULL;
  _cached_size_ = 0;
}

UpdateDriverMobileRep::~UpdateDriverMobileRep() {
  // @@protoc_insertion_point(destructor:ttmall.UpdateDriverMobileRep)
  SharedDtor();
}

void UpdateDriverMobileRep::SharedDtor() {
  if (this != internal_default_instance()) {
    delete info_;
  }
}

void UpdateDriverMobileRep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateDriverMobileRep::descriptor() {
  protobuf_driver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_driver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UpdateDriverMobileRep& UpdateDriverMobileRep::default_instance() {
  protobuf_driver_2eproto::InitDefaults();
  return *internal_default_instance();
}

UpdateDriverMobileRep* UpdateDriverMobileRep::New(::google::protobuf::Arena* arena) const {
  UpdateDriverMobileRep* n = new UpdateDriverMobileRep;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UpdateDriverMobileRep::Clear() {
// @@protoc_insertion_point(message_clear_start:ttmall.UpdateDriverMobileRep)
  if (GetArenaNoVirtual() == NULL && info_ != NULL) {
    delete info_;
  }
  info_ = NULL;
}

bool UpdateDriverMobileRep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ttmall.UpdateDriverMobileRep)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ttmall.DriverInfo info = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ttmall.UpdateDriverMobileRep)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ttmall.UpdateDriverMobileRep)
  return false;
#undef DO_
}

void UpdateDriverMobileRep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ttmall.UpdateDriverMobileRep)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ttmall.DriverInfo info = 1;
  if (this->has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->info_, output);
  }

  // @@protoc_insertion_point(serialize_end:ttmall.UpdateDriverMobileRep)
}

::google::protobuf::uint8* UpdateDriverMobileRep::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ttmall.UpdateDriverMobileRep)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ttmall.DriverInfo info = 1;
  if (this->has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->info_, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ttmall.UpdateDriverMobileRep)
  return target;
}

size_t UpdateDriverMobileRep::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ttmall.UpdateDriverMobileRep)
  size_t total_size = 0;

  // .ttmall.DriverInfo info = 1;
  if (this->has_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->info_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateDriverMobileRep::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ttmall.UpdateDriverMobileRep)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateDriverMobileRep* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UpdateDriverMobileRep>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ttmall.UpdateDriverMobileRep)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ttmall.UpdateDriverMobileRep)
    MergeFrom(*source);
  }
}

void UpdateDriverMobileRep::MergeFrom(const UpdateDriverMobileRep& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ttmall.UpdateDriverMobileRep)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_info()) {
    mutable_info()->::ttmall::DriverInfo::MergeFrom(from.info());
  }
}

void UpdateDriverMobileRep::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ttmall.UpdateDriverMobileRep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateDriverMobileRep::CopyFrom(const UpdateDriverMobileRep& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ttmall.UpdateDriverMobileRep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateDriverMobileRep::IsInitialized() const {
  return true;
}

void UpdateDriverMobileRep::Swap(UpdateDriverMobileRep* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UpdateDriverMobileRep::InternalSwap(UpdateDriverMobileRep* other) {
  std::swap(info_, other->info_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UpdateDriverMobileRep::GetMetadata() const {
  protobuf_driver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_driver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UpdateDriverMobileRep

// .ttmall.DriverInfo info = 1;
bool UpdateDriverMobileRep::has_info() const {
  return this != internal_default_instance() && info_ != NULL;
}
void UpdateDriverMobileRep::clear_info() {
  if (GetArenaNoVirtual() == NULL && info_ != NULL) delete info_;
  info_ = NULL;
}
const ::ttmall::DriverInfo& UpdateDriverMobileRep::info() const {
  // @@protoc_insertion_point(field_get:ttmall.UpdateDriverMobileRep.info)
  return info_ != NULL ? *info_
                         : *::ttmall::DriverInfo::internal_default_instance();
}
::ttmall::DriverInfo* UpdateDriverMobileRep::mutable_info() {
  
  if (info_ == NULL) {
    info_ = new ::ttmall::DriverInfo;
  }
  // @@protoc_insertion_point(field_mutable:ttmall.UpdateDriverMobileRep.info)
  return info_;
}
::ttmall::DriverInfo* UpdateDriverMobileRep::release_info() {
  // @@protoc_insertion_point(field_release:ttmall.UpdateDriverMobileRep.info)
  
  ::ttmall::DriverInfo* temp = info_;
  info_ = NULL;
  return temp;
}
void UpdateDriverMobileRep::set_allocated_info(::ttmall::DriverInfo* info) {
  delete info_;
  info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ttmall.UpdateDriverMobileRep.info)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace ttmall

// @@protoc_insertion_point(global_scope)
