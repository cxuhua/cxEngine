// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: driver.proto

#ifndef PROTOBUF_driver_2eproto__INCLUDED
#define PROTOBUF_driver_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "public.pb.h"
// @@protoc_insertion_point(includes)
namespace ttmall {
class AddressInfo;
class AddressInfoDefaultTypeInternal;
extern AddressInfoDefaultTypeInternal _AddressInfo_default_instance_;
class AttrGroup;
class AttrGroupDefaultTypeInternal;
extern AttrGroupDefaultTypeInternal _AttrGroup_default_instance_;
class AttrInfo;
class AttrInfoDefaultTypeInternal;
extern AttrInfoDefaultTypeInternal _AttrInfo_default_instance_;
class BrandInfo;
class BrandInfoDefaultTypeInternal;
extern BrandInfoDefaultTypeInternal _BrandInfo_default_instance_;
class CarInfo;
class CarInfoDefaultTypeInternal;
extern CarInfoDefaultTypeInternal _CarInfo_default_instance_;
class CheckUpdateRep;
class CheckUpdateRepDefaultTypeInternal;
extern CheckUpdateRepDefaultTypeInternal _CheckUpdateRep_default_instance_;
class CheckUpdateReq;
class CheckUpdateReqDefaultTypeInternal;
extern CheckUpdateReqDefaultTypeInternal _CheckUpdateReq_default_instance_;
class ConfirmDeliveryRep;
class ConfirmDeliveryRepDefaultTypeInternal;
extern ConfirmDeliveryRepDefaultTypeInternal _ConfirmDeliveryRep_default_instance_;
class ConfirmDeliveryReq;
class ConfirmDeliveryReqDefaultTypeInternal;
extern ConfirmDeliveryReqDefaultTypeInternal _ConfirmDeliveryReq_default_instance_;
class CoordInfo;
class CoordInfoDefaultTypeInternal;
extern CoordInfoDefaultTypeInternal _CoordInfo_default_instance_;
class CouponInfo;
class CouponInfoDefaultTypeInternal;
extern CouponInfoDefaultTypeInternal _CouponInfo_default_instance_;
class DeleteMessageRep;
class DeleteMessageRepDefaultTypeInternal;
extern DeleteMessageRepDefaultTypeInternal _DeleteMessageRep_default_instance_;
class DeleteMessageReq;
class DeleteMessageReqDefaultTypeInternal;
extern DeleteMessageReqDefaultTypeInternal _DeleteMessageReq_default_instance_;
class DeliveryGoods;
class DeliveryGoodsDefaultTypeInternal;
extern DeliveryGoodsDefaultTypeInternal _DeliveryGoods_default_instance_;
class DeliveryNode;
class DeliveryNodeDefaultTypeInternal;
extern DeliveryNodeDefaultTypeInternal _DeliveryNode_default_instance_;
class DeliveryOrderInfoRep;
class DeliveryOrderInfoRepDefaultTypeInternal;
extern DeliveryOrderInfoRepDefaultTypeInternal _DeliveryOrderInfoRep_default_instance_;
class DeliveryOrderInfoReq;
class DeliveryOrderInfoReqDefaultTypeInternal;
extern DeliveryOrderInfoReqDefaultTypeInternal _DeliveryOrderInfoReq_default_instance_;
class DriverInfo;
class DriverInfoDefaultTypeInternal;
extern DriverInfoDefaultTypeInternal _DriverInfo_default_instance_;
class DriverLoginRep;
class DriverLoginRepDefaultTypeInternal;
extern DriverLoginRepDefaultTypeInternal _DriverLoginRep_default_instance_;
class DriverLoginReq;
class DriverLoginReqDefaultTypeInternal;
extern DriverLoginReqDefaultTypeInternal _DriverLoginReq_default_instance_;
class DriverRegisterRep;
class DriverRegisterRepDefaultTypeInternal;
extern DriverRegisterRepDefaultTypeInternal _DriverRegisterRep_default_instance_;
class DriverRegisterReq;
class DriverRegisterReqDefaultTypeInternal;
extern DriverRegisterReqDefaultTypeInternal _DriverRegisterReq_default_instance_;
class ExtInfo;
class ExtInfoDefaultTypeInternal;
extern ExtInfoDefaultTypeInternal _ExtInfo_default_instance_;
class GetDriverInfoRep;
class GetDriverInfoRepDefaultTypeInternal;
extern GetDriverInfoRepDefaultTypeInternal _GetDriverInfoRep_default_instance_;
class GetDriverInfoReq;
class GetDriverInfoReqDefaultTypeInternal;
extern GetDriverInfoReqDefaultTypeInternal _GetDriverInfoReq_default_instance_;
class GetNewMessageRep;
class GetNewMessageRepDefaultTypeInternal;
extern GetNewMessageRepDefaultTypeInternal _GetNewMessageRep_default_instance_;
class GetNewMessageReq;
class GetNewMessageReqDefaultTypeInternal;
extern GetNewMessageReqDefaultTypeInternal _GetNewMessageReq_default_instance_;
class GoodsInfo;
class GoodsInfoDefaultTypeInternal;
extern GoodsInfoDefaultTypeInternal _GoodsInfo_default_instance_;
class GoodsInfo_AttrsEntry;
class GoodsInfo_AttrsEntryDefaultTypeInternal;
extern GoodsInfo_AttrsEntryDefaultTypeInternal _GoodsInfo_AttrsEntry_default_instance_;
class GoodsInfo_MapsEntry;
class GoodsInfo_MapsEntryDefaultTypeInternal;
extern GoodsInfo_MapsEntryDefaultTypeInternal _GoodsInfo_MapsEntry_default_instance_;
class GoodsInfo_PricesEntry;
class GoodsInfo_PricesEntryDefaultTypeInternal;
extern GoodsInfo_PricesEntryDefaultTypeInternal _GoodsInfo_PricesEntry_default_instance_;
class ImageInfo;
class ImageInfoDefaultTypeInternal;
extern ImageInfoDefaultTypeInternal _ImageInfo_default_instance_;
class IndexAd;
class IndexAdDefaultTypeInternal;
extern IndexAdDefaultTypeInternal _IndexAd_default_instance_;
class IndexAdGroup;
class IndexAdGroupDefaultTypeInternal;
extern IndexAdGroupDefaultTypeInternal _IndexAdGroup_default_instance_;
class IndexAdInfoRep;
class IndexAdInfoRepDefaultTypeInternal;
extern IndexAdInfoRepDefaultTypeInternal _IndexAdInfoRep_default_instance_;
class IndexAdInfoReq;
class IndexAdInfoReqDefaultTypeInternal;
extern IndexAdInfoReqDefaultTypeInternal _IndexAdInfoReq_default_instance_;
class IndexRep;
class IndexRepDefaultTypeInternal;
extern IndexRepDefaultTypeInternal _IndexRep_default_instance_;
class IndexRep_GroupsEntry;
class IndexRep_GroupsEntryDefaultTypeInternal;
extern IndexRep_GroupsEntryDefaultTypeInternal _IndexRep_GroupsEntry_default_instance_;
class IndexReq;
class IndexReqDefaultTypeInternal;
extern IndexReqDefaultTypeInternal _IndexReq_default_instance_;
class IndexType;
class IndexTypeDefaultTypeInternal;
extern IndexTypeDefaultTypeInternal _IndexType_default_instance_;
class ListCarRep;
class ListCarRepDefaultTypeInternal;
extern ListCarRepDefaultTypeInternal _ListCarRep_default_instance_;
class ListCarReq;
class ListCarReqDefaultTypeInternal;
extern ListCarReqDefaultTypeInternal _ListCarReq_default_instance_;
class ListDeliveryTaskRep;
class ListDeliveryTaskRepDefaultTypeInternal;
extern ListDeliveryTaskRepDefaultTypeInternal _ListDeliveryTaskRep_default_instance_;
class ListDeliveryTaskReq;
class ListDeliveryTaskReqDefaultTypeInternal;
extern ListDeliveryTaskReqDefaultTypeInternal _ListDeliveryTaskReq_default_instance_;
class ListDriverOrderRep;
class ListDriverOrderRepDefaultTypeInternal;
extern ListDriverOrderRepDefaultTypeInternal _ListDriverOrderRep_default_instance_;
class ListDriverOrderReq;
class ListDriverOrderReqDefaultTypeInternal;
extern ListDriverOrderReqDefaultTypeInternal _ListDriverOrderReq_default_instance_;
class ListMessageRep;
class ListMessageRepDefaultTypeInternal;
extern ListMessageRepDefaultTypeInternal _ListMessageRep_default_instance_;
class ListMessageReq;
class ListMessageReqDefaultTypeInternal;
extern ListMessageReqDefaultTypeInternal _ListMessageReq_default_instance_;
class ListNoticeRep;
class ListNoticeRepDefaultTypeInternal;
extern ListNoticeRepDefaultTypeInternal _ListNoticeRep_default_instance_;
class ListNoticeReq;
class ListNoticeReqDefaultTypeInternal;
extern ListNoticeReqDefaultTypeInternal _ListNoticeReq_default_instance_;
class ListRegionsRep;
class ListRegionsRepDefaultTypeInternal;
extern ListRegionsRepDefaultTypeInternal _ListRegionsRep_default_instance_;
class ListRegionsReq;
class ListRegionsReqDefaultTypeInternal;
extern ListRegionsReqDefaultTypeInternal _ListRegionsReq_default_instance_;
class ListUserTypeRep;
class ListUserTypeRepDefaultTypeInternal;
extern ListUserTypeRepDefaultTypeInternal _ListUserTypeRep_default_instance_;
class ListUserTypeReq;
class ListUserTypeReqDefaultTypeInternal;
extern ListUserTypeReqDefaultTypeInternal _ListUserTypeReq_default_instance_;
class MapInfo;
class MapInfoDefaultTypeInternal;
extern MapInfoDefaultTypeInternal _MapInfo_default_instance_;
class MessageInfo;
class MessageInfoDefaultTypeInternal;
extern MessageInfoDefaultTypeInternal _MessageInfo_default_instance_;
class NoticeInfo;
class NoticeInfoDefaultTypeInternal;
extern NoticeInfoDefaultTypeInternal _NoticeInfo_default_instance_;
class PriceInfo;
class PriceInfoDefaultTypeInternal;
extern PriceInfoDefaultTypeInternal _PriceInfo_default_instance_;
class PriceRange;
class PriceRangeDefaultTypeInternal;
extern PriceRangeDefaultTypeInternal _PriceRange_default_instance_;
class PublicInfoRep;
class PublicInfoRepDefaultTypeInternal;
extern PublicInfoRepDefaultTypeInternal _PublicInfoRep_default_instance_;
class PublicInfoReq;
class PublicInfoReqDefaultTypeInternal;
extern PublicInfoReqDefaultTypeInternal _PublicInfoReq_default_instance_;
class RegionInfo;
class RegionInfoDefaultTypeInternal;
extern RegionInfoDefaultTypeInternal _RegionInfo_default_instance_;
class SendAuthRep;
class SendAuthRepDefaultTypeInternal;
extern SendAuthRepDefaultTypeInternal _SendAuthRep_default_instance_;
class SendAuthReq;
class SendAuthReqDefaultTypeInternal;
extern SendAuthReqDefaultTypeInternal _SendAuthReq_default_instance_;
class SetDeviceIdRep;
class SetDeviceIdRepDefaultTypeInternal;
extern SetDeviceIdRepDefaultTypeInternal _SetDeviceIdRep_default_instance_;
class SetDeviceIdReq;
class SetDeviceIdReqDefaultTypeInternal;
extern SetDeviceIdReqDefaultTypeInternal _SetDeviceIdReq_default_instance_;
class SetInfo;
class SetInfoDefaultTypeInternal;
extern SetInfoDefaultTypeInternal _SetInfo_default_instance_;
class SetMessageReadRep;
class SetMessageReadRepDefaultTypeInternal;
extern SetMessageReadRepDefaultTypeInternal _SetMessageReadRep_default_instance_;
class SetMessageReadReq;
class SetMessageReadReqDefaultTypeInternal;
extern SetMessageReadReqDefaultTypeInternal _SetMessageReadReq_default_instance_;
class SignInfo;
class SignInfoDefaultTypeInternal;
extern SignInfoDefaultTypeInternal _SignInfo_default_instance_;
class SignReceivingRep;
class SignReceivingRepDefaultTypeInternal;
extern SignReceivingRepDefaultTypeInternal _SignReceivingRep_default_instance_;
class SignReceivingReq;
class SignReceivingReqDefaultTypeInternal;
extern SignReceivingReqDefaultTypeInternal _SignReceivingReq_default_instance_;
class SubmitAuthInfoRep;
class SubmitAuthInfoRepDefaultTypeInternal;
extern SubmitAuthInfoRepDefaultTypeInternal _SubmitAuthInfoRep_default_instance_;
class SubmitAuthInfoReq;
class SubmitAuthInfoReqDefaultTypeInternal;
extern SubmitAuthInfoReqDefaultTypeInternal _SubmitAuthInfoReq_default_instance_;
class TypeInfo;
class TypeInfoDefaultTypeInternal;
extern TypeInfoDefaultTypeInternal _TypeInfo_default_instance_;
class UpdateDriverMobileRep;
class UpdateDriverMobileRepDefaultTypeInternal;
extern UpdateDriverMobileRepDefaultTypeInternal _UpdateDriverMobileRep_default_instance_;
class UpdateDriverMobileReq;
class UpdateDriverMobileReqDefaultTypeInternal;
extern UpdateDriverMobileReqDefaultTypeInternal _UpdateDriverMobileReq_default_instance_;
class UpdateDriverPassRep;
class UpdateDriverPassRepDefaultTypeInternal;
extern UpdateDriverPassRepDefaultTypeInternal _UpdateDriverPassRep_default_instance_;
class UpdateDriverPassReq;
class UpdateDriverPassReqDefaultTypeInternal;
extern UpdateDriverPassReqDefaultTypeInternal _UpdateDriverPassReq_default_instance_;
class UpdateDriverStateRep;
class UpdateDriverStateRepDefaultTypeInternal;
extern UpdateDriverStateRepDefaultTypeInternal _UpdateDriverStateRep_default_instance_;
class UpdateDriverStateReq;
class UpdateDriverStateReqDefaultTypeInternal;
extern UpdateDriverStateReqDefaultTypeInternal _UpdateDriverStateReq_default_instance_;
class UserInfo;
class UserInfoDefaultTypeInternal;
extern UserInfoDefaultTypeInternal _UserInfo_default_instance_;
class UserType;
class UserTypeDefaultTypeInternal;
extern UserTypeDefaultTypeInternal _UserType_default_instance_;
class WareGroup;
class WareGroupDefaultTypeInternal;
extern WareGroupDefaultTypeInternal _WareGroup_default_instance_;
class WareInfo;
class WareInfoDefaultTypeInternal;
extern WareInfoDefaultTypeInternal _WareInfo_default_instance_;
class WorkOptRep;
class WorkOptRepDefaultTypeInternal;
extern WorkOptRepDefaultTypeInternal _WorkOptRep_default_instance_;
class WorkOptReq;
class WorkOptReqDefaultTypeInternal;
extern WorkOptReqDefaultTypeInternal _WorkOptReq_default_instance_;
}  // namespace ttmall

namespace ttmall {

namespace protobuf_driver_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_driver_2eproto

enum DeliveryState {
  DELIVERY_NONE = 0,
  DELIVERY_NEW = 1,
  DELIVERY_LOADING = 2,
  DELIVERY_TRNSING = 3,
  DELIVERY_FINISHED = 4,
  DeliveryState_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  DeliveryState_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool DeliveryState_IsValid(int value);
const DeliveryState DeliveryState_MIN = DELIVERY_NONE;
const DeliveryState DeliveryState_MAX = DELIVERY_FINISHED;
const int DeliveryState_ARRAYSIZE = DeliveryState_MAX + 1;

const ::google::protobuf::EnumDescriptor* DeliveryState_descriptor();
inline const ::std::string& DeliveryState_Name(DeliveryState value) {
  return ::google::protobuf::internal::NameOfEnum(
    DeliveryState_descriptor(), value);
}
inline bool DeliveryState_Parse(
    const ::std::string& name, DeliveryState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DeliveryState>(
    DeliveryState_descriptor(), name, value);
}
enum WorkOptType {
  WOTK_TYPE_NONE = 0,
  WOTK_TYPE_START = 1,
  WOTK_TYPE_STOP = 2,
  WorkOptType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  WorkOptType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool WorkOptType_IsValid(int value);
const WorkOptType WorkOptType_MIN = WOTK_TYPE_NONE;
const WorkOptType WorkOptType_MAX = WOTK_TYPE_STOP;
const int WorkOptType_ARRAYSIZE = WorkOptType_MAX + 1;

const ::google::protobuf::EnumDescriptor* WorkOptType_descriptor();
inline const ::std::string& WorkOptType_Name(WorkOptType value) {
  return ::google::protobuf::internal::NameOfEnum(
    WorkOptType_descriptor(), value);
}
inline bool WorkOptType_Parse(
    const ::std::string& name, WorkOptType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<WorkOptType>(
    WorkOptType_descriptor(), name, value);
}
enum ListDriverOrderOpt {
  DRIVER_ORDER_OPT_ALL = 0,
  DRIVER_ORDER_OPT_LOADING = 1,
  DRIVER_ORDER_OPT_TRANSING = 2,
  DRIVER_ORDER_OPT_FINISHED = 3,
  DRIVER_ORDER_OPT_EXPCEPTION = 4,
  ListDriverOrderOpt_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ListDriverOrderOpt_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ListDriverOrderOpt_IsValid(int value);
const ListDriverOrderOpt ListDriverOrderOpt_MIN = DRIVER_ORDER_OPT_ALL;
const ListDriverOrderOpt ListDriverOrderOpt_MAX = DRIVER_ORDER_OPT_EXPCEPTION;
const int ListDriverOrderOpt_ARRAYSIZE = ListDriverOrderOpt_MAX + 1;

const ::google::protobuf::EnumDescriptor* ListDriverOrderOpt_descriptor();
inline const ::std::string& ListDriverOrderOpt_Name(ListDriverOrderOpt value) {
  return ::google::protobuf::internal::NameOfEnum(
    ListDriverOrderOpt_descriptor(), value);
}
inline bool ListDriverOrderOpt_Parse(
    const ::std::string& name, ListDriverOrderOpt* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ListDriverOrderOpt>(
    ListDriverOrderOpt_descriptor(), name, value);
}
// ===================================================================

class SignInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ttmall.SignInfo) */ {
 public:
  SignInfo();
  virtual ~SignInfo();

  SignInfo(const SignInfo& from);

  inline SignInfo& operator=(const SignInfo& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SignInfo& default_instance();

  static inline const SignInfo* internal_default_instance() {
    return reinterpret_cast<const SignInfo*>(
               &_SignInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(SignInfo* other);

  // implements Message ----------------------------------------------

  inline SignInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  SignInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SignInfo& from);
  void MergeFrom(const SignInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SignInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ttmall.ImageInfo images = 5;
  int images_size() const;
  void clear_images();
  static const int kImagesFieldNumber = 5;
  const ::ttmall::ImageInfo& images(int index) const;
  ::ttmall::ImageInfo* mutable_images(int index);
  ::ttmall::ImageInfo* add_images();
  ::google::protobuf::RepeatedPtrField< ::ttmall::ImageInfo >*
      mutable_images();
  const ::google::protobuf::RepeatedPtrField< ::ttmall::ImageInfo >&
      images() const;

  // string exp_desc = 2;
  void clear_exp_desc();
  static const int kExpDescFieldNumber = 2;
  const ::std::string& exp_desc() const;
  void set_exp_desc(const ::std::string& value);
  #if LANG_CXX11
  void set_exp_desc(::std::string&& value);
  #endif
  void set_exp_desc(const char* value);
  void set_exp_desc(const char* value, size_t size);
  ::std::string* mutable_exp_desc();
  ::std::string* release_exp_desc();
  void set_allocated_exp_desc(::std::string* exp_desc);

  // string suggest = 3;
  void clear_suggest();
  static const int kSuggestFieldNumber = 3;
  const ::std::string& suggest() const;
  void set_suggest(const ::std::string& value);
  #if LANG_CXX11
  void set_suggest(::std::string&& value);
  #endif
  void set_suggest(const char* value);
  void set_suggest(const char* value, size_t size);
  ::std::string* mutable_suggest();
  ::std::string* release_suggest();
  void set_allocated_suggest(::std::string* suggest);

  // string mark = 4;
  void clear_mark();
  static const int kMarkFieldNumber = 4;
  const ::std::string& mark() const;
  void set_mark(const ::std::string& value);
  #if LANG_CXX11
  void set_mark(::std::string&& value);
  #endif
  void set_mark(const char* value);
  void set_mark(const char* value, size_t size);
  ::std::string* mutable_mark();
  ::std::string* release_mark();
  void set_allocated_mark(::std::string* mark);

  // int64 time = 6;
  void clear_time();
  static const int kTimeFieldNumber = 6;
  ::google::protobuf::int64 time() const;
  void set_time(::google::protobuf::int64 value);

  // bool is_exp = 1;
  void clear_is_exp();
  static const int kIsExpFieldNumber = 1;
  bool is_exp() const;
  void set_is_exp(bool value);

  // @@protoc_insertion_point(class_scope:ttmall.SignInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::ttmall::ImageInfo > images_;
  ::google::protobuf::internal::ArenaStringPtr exp_desc_;
  ::google::protobuf::internal::ArenaStringPtr suggest_;
  ::google::protobuf::internal::ArenaStringPtr mark_;
  ::google::protobuf::int64 time_;
  bool is_exp_;
  mutable int _cached_size_;
  friend struct protobuf_driver_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DeliveryGoods : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ttmall.DeliveryGoods) */ {
 public:
  DeliveryGoods();
  virtual ~DeliveryGoods();

  DeliveryGoods(const DeliveryGoods& from);

  inline DeliveryGoods& operator=(const DeliveryGoods& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DeliveryGoods& default_instance();

  static inline const DeliveryGoods* internal_default_instance() {
    return reinterpret_cast<const DeliveryGoods*>(
               &_DeliveryGoods_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(DeliveryGoods* other);

  // implements Message ----------------------------------------------

  inline DeliveryGoods* New() const PROTOBUF_FINAL { return New(NULL); }

  DeliveryGoods* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DeliveryGoods& from);
  void MergeFrom(const DeliveryGoods& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DeliveryGoods* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ttmall.ImageInfo images = 5;
  int images_size() const;
  void clear_images();
  static const int kImagesFieldNumber = 5;
  const ::ttmall::ImageInfo& images(int index) const;
  ::ttmall::ImageInfo* mutable_images(int index);
  ::ttmall::ImageInfo* add_images();
  ::google::protobuf::RepeatedPtrField< ::ttmall::ImageInfo >*
      mutable_images();
  const ::google::protobuf::RepeatedPtrField< ::ttmall::ImageInfo >&
      images() const;

  // repeated string specs = 6;
  int specs_size() const;
  void clear_specs();
  static const int kSpecsFieldNumber = 6;
  const ::std::string& specs(int index) const;
  ::std::string* mutable_specs(int index);
  void set_specs(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_specs(int index, ::std::string&& value);
  #endif
  void set_specs(int index, const char* value);
  void set_specs(int index, const char* value, size_t size);
  ::std::string* add_specs();
  void add_specs(const ::std::string& value);
  #if LANG_CXX11
  void add_specs(::std::string&& value);
  #endif
  void add_specs(const char* value);
  void add_specs(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& specs() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_specs();

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // string key = 2;
  void clear_key();
  static const int kKeyFieldNumber = 2;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  #if LANG_CXX11
  void set_key(::std::string&& value);
  #endif
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // string name = 4;
  void clear_name();
  static const int kNameFieldNumber = 4;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string unit = 7;
  void clear_unit();
  static const int kUnitFieldNumber = 7;
  const ::std::string& unit() const;
  void set_unit(const ::std::string& value);
  #if LANG_CXX11
  void set_unit(::std::string&& value);
  #endif
  void set_unit(const char* value);
  void set_unit(const char* value, size_t size);
  ::std::string* mutable_unit();
  ::std::string* release_unit();
  void set_allocated_unit(::std::string* unit);

  // int32 count = 3;
  void clear_count();
  static const int kCountFieldNumber = 3;
  ::google::protobuf::int32 count() const;
  void set_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ttmall.DeliveryGoods)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::ttmall::ImageInfo > images_;
  ::google::protobuf::RepeatedPtrField< ::std::string> specs_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr unit_;
  ::google::protobuf::int32 count_;
  mutable int _cached_size_;
  friend struct protobuf_driver_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DeliveryNode : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ttmall.DeliveryNode) */ {
 public:
  DeliveryNode();
  virtual ~DeliveryNode();

  DeliveryNode(const DeliveryNode& from);

  inline DeliveryNode& operator=(const DeliveryNode& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DeliveryNode& default_instance();

  static inline const DeliveryNode* internal_default_instance() {
    return reinterpret_cast<const DeliveryNode*>(
               &_DeliveryNode_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(DeliveryNode* other);

  // implements Message ----------------------------------------------

  inline DeliveryNode* New() const PROTOBUF_FINAL { return New(NULL); }

  DeliveryNode* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DeliveryNode& from);
  void MergeFrom(const DeliveryNode& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DeliveryNode* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ttmall.ImageInfo user_images = 7;
  int user_images_size() const;
  void clear_user_images();
  static const int kUserImagesFieldNumber = 7;
  const ::ttmall::ImageInfo& user_images(int index) const;
  ::ttmall::ImageInfo* mutable_user_images(int index);
  ::ttmall::ImageInfo* add_user_images();
  ::google::protobuf::RepeatedPtrField< ::ttmall::ImageInfo >*
      mutable_user_images();
  const ::google::protobuf::RepeatedPtrField< ::ttmall::ImageInfo >&
      user_images() const;

  // repeated .ttmall.DeliveryGoods goods = 12;
  int goods_size() const;
  void clear_goods();
  static const int kGoodsFieldNumber = 12;
  const ::ttmall::DeliveryGoods& goods(int index) const;
  ::ttmall::DeliveryGoods* mutable_goods(int index);
  ::ttmall::DeliveryGoods* add_goods();
  ::google::protobuf::RepeatedPtrField< ::ttmall::DeliveryGoods >*
      mutable_goods();
  const ::google::protobuf::RepeatedPtrField< ::ttmall::DeliveryGoods >&
      goods() const;

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // string user_id = 4;
  void clear_user_id();
  static const int kUserIdFieldNumber = 4;
  const ::std::string& user_id() const;
  void set_user_id(const ::std::string& value);
  #if LANG_CXX11
  void set_user_id(::std::string&& value);
  #endif
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  ::std::string* mutable_user_id();
  ::std::string* release_user_id();
  void set_allocated_user_id(::std::string* user_id);

  // string user_name = 5;
  void clear_user_name();
  static const int kUserNameFieldNumber = 5;
  const ::std::string& user_name() const;
  void set_user_name(const ::std::string& value);
  #if LANG_CXX11
  void set_user_name(::std::string&& value);
  #endif
  void set_user_name(const char* value);
  void set_user_name(const char* value, size_t size);
  ::std::string* mutable_user_name();
  ::std::string* release_user_name();
  void set_allocated_user_name(::std::string* user_name);

  // string brife = 8;
  void clear_brife();
  static const int kBrifeFieldNumber = 8;
  const ::std::string& brife() const;
  void set_brife(const ::std::string& value);
  #if LANG_CXX11
  void set_brife(::std::string&& value);
  #endif
  void set_brife(const char* value);
  void set_brife(const char* value, size_t size);
  ::std::string* mutable_brife();
  ::std::string* release_brife();
  void set_allocated_brife(::std::string* brife);

  // .ttmall.WareInfo ware_info = 2;
  bool has_ware_info() const;
  void clear_ware_info();
  static const int kWareInfoFieldNumber = 2;
  const ::ttmall::WareInfo& ware_info() const;
  ::ttmall::WareInfo* mutable_ware_info();
  ::ttmall::WareInfo* release_ware_info();
  void set_allocated_ware_info(::ttmall::WareInfo* ware_info);

  // .ttmall.AddressInfo address = 3;
  bool has_address() const;
  void clear_address();
  static const int kAddressFieldNumber = 3;
  const ::ttmall::AddressInfo& address() const;
  ::ttmall::AddressInfo* mutable_address();
  ::ttmall::AddressInfo* release_address();
  void set_allocated_address(::ttmall::AddressInfo* address);

  // .ttmall.SignInfo sign_info = 11;
  bool has_sign_info() const;
  void clear_sign_info();
  static const int kSignInfoFieldNumber = 11;
  const ::ttmall::SignInfo& sign_info() const;
  ::ttmall::SignInfo* mutable_sign_info();
  ::ttmall::SignInfo* release_sign_info();
  void set_allocated_sign_info(::ttmall::SignInfo* sign_info);

  // int32 user_level = 6;
  void clear_user_level();
  static const int kUserLevelFieldNumber = 6;
  ::google::protobuf::int32 user_level() const;
  void set_user_level(::google::protobuf::int32 value);

  // int32 count = 9;
  void clear_count();
  static const int kCountFieldNumber = 9;
  ::google::protobuf::int32 count() const;
  void set_count(::google::protobuf::int32 value);

  // .ttmall.DeliveryState state = 10;
  void clear_state();
  static const int kStateFieldNumber = 10;
  ::ttmall::DeliveryState state() const;
  void set_state(::ttmall::DeliveryState value);

  // @@protoc_insertion_point(class_scope:ttmall.DeliveryNode)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::ttmall::ImageInfo > user_images_;
  ::google::protobuf::RepeatedPtrField< ::ttmall::DeliveryGoods > goods_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr user_id_;
  ::google::protobuf::internal::ArenaStringPtr user_name_;
  ::google::protobuf::internal::ArenaStringPtr brife_;
  ::ttmall::WareInfo* ware_info_;
  ::ttmall::AddressInfo* address_;
  ::ttmall::SignInfo* sign_info_;
  ::google::protobuf::int32 user_level_;
  ::google::protobuf::int32 count_;
  int state_;
  mutable int _cached_size_;
  friend struct protobuf_driver_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class WareGroup : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ttmall.WareGroup) */ {
 public:
  WareGroup();
  virtual ~WareGroup();

  WareGroup(const WareGroup& from);

  inline WareGroup& operator=(const WareGroup& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WareGroup& default_instance();

  static inline const WareGroup* internal_default_instance() {
    return reinterpret_cast<const WareGroup*>(
               &_WareGroup_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(WareGroup* other);

  // implements Message ----------------------------------------------

  inline WareGroup* New() const PROTOBUF_FINAL { return New(NULL); }

  WareGroup* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const WareGroup& from);
  void MergeFrom(const WareGroup& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(WareGroup* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ttmall.DeliveryNode items = 2;
  int items_size() const;
  void clear_items();
  static const int kItemsFieldNumber = 2;
  const ::ttmall::DeliveryNode& items(int index) const;
  ::ttmall::DeliveryNode* mutable_items(int index);
  ::ttmall::DeliveryNode* add_items();
  ::google::protobuf::RepeatedPtrField< ::ttmall::DeliveryNode >*
      mutable_items();
  const ::google::protobuf::RepeatedPtrField< ::ttmall::DeliveryNode >&
      items() const;

  // .ttmall.WareInfo ware_info = 1;
  bool has_ware_info() const;
  void clear_ware_info();
  static const int kWareInfoFieldNumber = 1;
  const ::ttmall::WareInfo& ware_info() const;
  ::ttmall::WareInfo* mutable_ware_info();
  ::ttmall::WareInfo* release_ware_info();
  void set_allocated_ware_info(::ttmall::WareInfo* ware_info);

  // @@protoc_insertion_point(class_scope:ttmall.WareGroup)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::ttmall::DeliveryNode > items_;
  ::ttmall::WareInfo* ware_info_;
  mutable int _cached_size_;
  friend struct protobuf_driver_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ListDeliveryTaskReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ttmall.ListDeliveryTaskReq) */ {
 public:
  ListDeliveryTaskReq();
  virtual ~ListDeliveryTaskReq();

  ListDeliveryTaskReq(const ListDeliveryTaskReq& from);

  inline ListDeliveryTaskReq& operator=(const ListDeliveryTaskReq& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ListDeliveryTaskReq& default_instance();

  static inline const ListDeliveryTaskReq* internal_default_instance() {
    return reinterpret_cast<const ListDeliveryTaskReq*>(
               &_ListDeliveryTaskReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(ListDeliveryTaskReq* other);

  // implements Message ----------------------------------------------

  inline ListDeliveryTaskReq* New() const PROTOBUF_FINAL { return New(NULL); }

  ListDeliveryTaskReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ListDeliveryTaskReq& from);
  void MergeFrom(const ListDeliveryTaskReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ListDeliveryTaskReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string token = 1;
  void clear_token();
  static const int kTokenFieldNumber = 1;
  const ::std::string& token() const;
  void set_token(const ::std::string& value);
  #if LANG_CXX11
  void set_token(::std::string&& value);
  #endif
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  ::std::string* mutable_token();
  ::std::string* release_token();
  void set_allocated_token(::std::string* token);

  // .ttmall.CoordInfo coord = 2;
  bool has_coord() const;
  void clear_coord();
  static const int kCoordFieldNumber = 2;
  const ::ttmall::CoordInfo& coord() const;
  ::ttmall::CoordInfo* mutable_coord();
  ::ttmall::CoordInfo* release_coord();
  void set_allocated_coord(::ttmall::CoordInfo* coord);

  // @@protoc_insertion_point(class_scope:ttmall.ListDeliveryTaskReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr token_;
  ::ttmall::CoordInfo* coord_;
  mutable int _cached_size_;
  friend struct protobuf_driver_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ListDeliveryTaskRep : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ttmall.ListDeliveryTaskRep) */ {
 public:
  ListDeliveryTaskRep();
  virtual ~ListDeliveryTaskRep();

  ListDeliveryTaskRep(const ListDeliveryTaskRep& from);

  inline ListDeliveryTaskRep& operator=(const ListDeliveryTaskRep& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ListDeliveryTaskRep& default_instance();

  static inline const ListDeliveryTaskRep* internal_default_instance() {
    return reinterpret_cast<const ListDeliveryTaskRep*>(
               &_ListDeliveryTaskRep_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(ListDeliveryTaskRep* other);

  // implements Message ----------------------------------------------

  inline ListDeliveryTaskRep* New() const PROTOBUF_FINAL { return New(NULL); }

  ListDeliveryTaskRep* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ListDeliveryTaskRep& from);
  void MergeFrom(const ListDeliveryTaskRep& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ListDeliveryTaskRep* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ttmall.WareGroup groups = 1;
  int groups_size() const;
  void clear_groups();
  static const int kGroupsFieldNumber = 1;
  const ::ttmall::WareGroup& groups(int index) const;
  ::ttmall::WareGroup* mutable_groups(int index);
  ::ttmall::WareGroup* add_groups();
  ::google::protobuf::RepeatedPtrField< ::ttmall::WareGroup >*
      mutable_groups();
  const ::google::protobuf::RepeatedPtrField< ::ttmall::WareGroup >&
      groups() const;

  // int32 total = 2;
  void clear_total();
  static const int kTotalFieldNumber = 2;
  ::google::protobuf::int32 total() const;
  void set_total(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ttmall.ListDeliveryTaskRep)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::ttmall::WareGroup > groups_;
  ::google::protobuf::int32 total_;
  mutable int _cached_size_;
  friend struct protobuf_driver_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class WorkOptReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ttmall.WorkOptReq) */ {
 public:
  WorkOptReq();
  virtual ~WorkOptReq();

  WorkOptReq(const WorkOptReq& from);

  inline WorkOptReq& operator=(const WorkOptReq& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WorkOptReq& default_instance();

  static inline const WorkOptReq* internal_default_instance() {
    return reinterpret_cast<const WorkOptReq*>(
               &_WorkOptReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(WorkOptReq* other);

  // implements Message ----------------------------------------------

  inline WorkOptReq* New() const PROTOBUF_FINAL { return New(NULL); }

  WorkOptReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const WorkOptReq& from);
  void MergeFrom(const WorkOptReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(WorkOptReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string token = 1;
  void clear_token();
  static const int kTokenFieldNumber = 1;
  const ::std::string& token() const;
  void set_token(const ::std::string& value);
  #if LANG_CXX11
  void set_token(::std::string&& value);
  #endif
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  ::std::string* mutable_token();
  ::std::string* release_token();
  void set_allocated_token(::std::string* token);

  // .ttmall.WorkOptType type = 2;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::ttmall::WorkOptType type() const;
  void set_type(::ttmall::WorkOptType value);

  // @@protoc_insertion_point(class_scope:ttmall.WorkOptReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr token_;
  int type_;
  mutable int _cached_size_;
  friend struct protobuf_driver_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class WorkOptRep : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ttmall.WorkOptRep) */ {
 public:
  WorkOptRep();
  virtual ~WorkOptRep();

  WorkOptRep(const WorkOptRep& from);

  inline WorkOptRep& operator=(const WorkOptRep& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WorkOptRep& default_instance();

  static inline const WorkOptRep* internal_default_instance() {
    return reinterpret_cast<const WorkOptRep*>(
               &_WorkOptRep_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(WorkOptRep* other);

  // implements Message ----------------------------------------------

  inline WorkOptRep* New() const PROTOBUF_FINAL { return New(NULL); }

  WorkOptRep* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const WorkOptRep& from);
  void MergeFrom(const WorkOptRep& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(WorkOptRep* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .ttmall.WorkOptType type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::ttmall::WorkOptType type() const;
  void set_type(::ttmall::WorkOptType value);

  // @@protoc_insertion_point(class_scope:ttmall.WorkOptRep)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int type_;
  mutable int _cached_size_;
  friend struct protobuf_driver_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DriverInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ttmall.DriverInfo) */ {
 public:
  DriverInfo();
  virtual ~DriverInfo();

  DriverInfo(const DriverInfo& from);

  inline DriverInfo& operator=(const DriverInfo& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DriverInfo& default_instance();

  static inline const DriverInfo* internal_default_instance() {
    return reinterpret_cast<const DriverInfo*>(
               &_DriverInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(DriverInfo* other);

  // implements Message ----------------------------------------------

  inline DriverInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  DriverInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DriverInfo& from);
  void MergeFrom(const DriverInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DriverInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ttmall.ImageInfo driving_photos = 7;
  int driving_photos_size() const;
  void clear_driving_photos();
  static const int kDrivingPhotosFieldNumber = 7;
  const ::ttmall::ImageInfo& driving_photos(int index) const;
  ::ttmall::ImageInfo* mutable_driving_photos(int index);
  ::ttmall::ImageInfo* add_driving_photos();
  ::google::protobuf::RepeatedPtrField< ::ttmall::ImageInfo >*
      mutable_driving_photos();
  const ::google::protobuf::RepeatedPtrField< ::ttmall::ImageInfo >&
      driving_photos() const;

  // repeated .ttmall.RegionInfo regions_info = 8;
  int regions_info_size() const;
  void clear_regions_info();
  static const int kRegionsInfoFieldNumber = 8;
  const ::ttmall::RegionInfo& regions_info(int index) const;
  ::ttmall::RegionInfo* mutable_regions_info(int index);
  ::ttmall::RegionInfo* add_regions_info();
  ::google::protobuf::RepeatedPtrField< ::ttmall::RegionInfo >*
      mutable_regions_info();
  const ::google::protobuf::RepeatedPtrField< ::ttmall::RegionInfo >&
      regions_info() const;

  // repeated .ttmall.ImageInfo car_licences = 9;
  int car_licences_size() const;
  void clear_car_licences();
  static const int kCarLicencesFieldNumber = 9;
  const ::ttmall::ImageInfo& car_licences(int index) const;
  ::ttmall::ImageInfo* mutable_car_licences(int index);
  ::ttmall::ImageInfo* add_car_licences();
  ::google::protobuf::RepeatedPtrField< ::ttmall::ImageInfo >*
      mutable_car_licences();
  const ::google::protobuf::RepeatedPtrField< ::ttmall::ImageInfo >&
      car_licences() const;

  // repeated string auditing_msg = 11;
  int auditing_msg_size() const;
  void clear_auditing_msg();
  static const int kAuditingMsgFieldNumber = 11;
  const ::std::string& auditing_msg(int index) const;
  ::std::string* mutable_auditing_msg(int index);
  void set_auditing_msg(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_auditing_msg(int index, ::std::string&& value);
  #endif
  void set_auditing_msg(int index, const char* value);
  void set_auditing_msg(int index, const char* value, size_t size);
  ::std::string* add_auditing_msg();
  void add_auditing_msg(const ::std::string& value);
  #if LANG_CXX11
  void add_auditing_msg(::std::string&& value);
  #endif
  void add_auditing_msg(const char* value);
  void add_auditing_msg(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& auditing_msg() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_auditing_msg();

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // string mobile = 2;
  void clear_mobile();
  static const int kMobileFieldNumber = 2;
  const ::std::string& mobile() const;
  void set_mobile(const ::std::string& value);
  #if LANG_CXX11
  void set_mobile(::std::string&& value);
  #endif
  void set_mobile(const char* value);
  void set_mobile(const char* value, size_t size);
  ::std::string* mutable_mobile();
  ::std::string* release_mobile();
  void set_allocated_mobile(::std::string* mobile);

  // string name = 4;
  void clear_name();
  static const int kNameFieldNumber = 4;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string id_number = 5;
  void clear_id_number();
  static const int kIdNumberFieldNumber = 5;
  const ::std::string& id_number() const;
  void set_id_number(const ::std::string& value);
  #if LANG_CXX11
  void set_id_number(::std::string&& value);
  #endif
  void set_id_number(const char* value);
  void set_id_number(const char* value, size_t size);
  ::std::string* mutable_id_number();
  ::std::string* release_id_number();
  void set_allocated_id_number(::std::string* id_number);

  // string driving_date = 6;
  void clear_driving_date();
  static const int kDrivingDateFieldNumber = 6;
  const ::std::string& driving_date() const;
  void set_driving_date(const ::std::string& value);
  #if LANG_CXX11
  void set_driving_date(::std::string&& value);
  #endif
  void set_driving_date(const char* value);
  void set_driving_date(const char* value, size_t size);
  ::std::string* mutable_driving_date();
  ::std::string* release_driving_date();
  void set_allocated_driving_date(::std::string* driving_date);

  // string car_number = 13;
  void clear_car_number();
  static const int kCarNumberFieldNumber = 13;
  const ::std::string& car_number() const;
  void set_car_number(const ::std::string& value);
  #if LANG_CXX11
  void set_car_number(::std::string&& value);
  #endif
  void set_car_number(const char* value);
  void set_car_number(const char* value, size_t size);
  ::std::string* mutable_car_number();
  ::std::string* release_car_number();
  void set_allocated_car_number(::std::string* car_number);

  // string car_owner = 14;
  void clear_car_owner();
  static const int kCarOwnerFieldNumber = 14;
  const ::std::string& car_owner() const;
  void set_car_owner(const ::std::string& value);
  #if LANG_CXX11
  void set_car_owner(::std::string&& value);
  #endif
  void set_car_owner(const char* value);
  void set_car_owner(const char* value, size_t size);
  ::std::string* mutable_car_owner();
  ::std::string* release_car_owner();
  void set_allocated_car_owner(::std::string* car_owner);

  // .ttmall.CarInfo car_info = 12;
  bool has_car_info() const;
  void clear_car_info();
  static const int kCarInfoFieldNumber = 12;
  const ::ttmall::CarInfo& car_info() const;
  ::ttmall::CarInfo* mutable_car_info();
  ::ttmall::CarInfo* release_car_info();
  void set_allocated_car_info(::ttmall::CarInfo* car_info);

  // int64 gen_time = 10;
  void clear_gen_time();
  static const int kGenTimeFieldNumber = 10;
  ::google::protobuf::int64 gen_time() const;
  void set_gen_time(::google::protobuf::int64 value);

  // bool is_pass = 3;
  void clear_is_pass();
  static const int kIsPassFieldNumber = 3;
  bool is_pass() const;
  void set_is_pass(bool value);

  // bool is_indep = 16;
  void clear_is_indep();
  static const int kIsIndepFieldNumber = 16;
  bool is_indep() const;
  void set_is_indep(bool value);

  // .ttmall.WorkOptType work_opt = 15;
  void clear_work_opt();
  static const int kWorkOptFieldNumber = 15;
  ::ttmall::WorkOptType work_opt() const;
  void set_work_opt(::ttmall::WorkOptType value);

  // @@protoc_insertion_point(class_scope:ttmall.DriverInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::ttmall::ImageInfo > driving_photos_;
  ::google::protobuf::RepeatedPtrField< ::ttmall::RegionInfo > regions_info_;
  ::google::protobuf::RepeatedPtrField< ::ttmall::ImageInfo > car_licences_;
  ::google::protobuf::RepeatedPtrField< ::std::string> auditing_msg_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr mobile_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr id_number_;
  ::google::protobuf::internal::ArenaStringPtr driving_date_;
  ::google::protobuf::internal::ArenaStringPtr car_number_;
  ::google::protobuf::internal::ArenaStringPtr car_owner_;
  ::ttmall::CarInfo* car_info_;
  ::google::protobuf::int64 gen_time_;
  bool is_pass_;
  bool is_indep_;
  int work_opt_;
  mutable int _cached_size_;
  friend struct protobuf_driver_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DriverLoginReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ttmall.DriverLoginReq) */ {
 public:
  DriverLoginReq();
  virtual ~DriverLoginReq();

  DriverLoginReq(const DriverLoginReq& from);

  inline DriverLoginReq& operator=(const DriverLoginReq& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DriverLoginReq& default_instance();

  static inline const DriverLoginReq* internal_default_instance() {
    return reinterpret_cast<const DriverLoginReq*>(
               &_DriverLoginReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(DriverLoginReq* other);

  // implements Message ----------------------------------------------

  inline DriverLoginReq* New() const PROTOBUF_FINAL { return New(NULL); }

  DriverLoginReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DriverLoginReq& from);
  void MergeFrom(const DriverLoginReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DriverLoginReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string mobile = 1;
  void clear_mobile();
  static const int kMobileFieldNumber = 1;
  const ::std::string& mobile() const;
  void set_mobile(const ::std::string& value);
  #if LANG_CXX11
  void set_mobile(::std::string&& value);
  #endif
  void set_mobile(const char* value);
  void set_mobile(const char* value, size_t size);
  ::std::string* mutable_mobile();
  ::std::string* release_mobile();
  void set_allocated_mobile(::std::string* mobile);

  // string pass = 2;
  void clear_pass();
  static const int kPassFieldNumber = 2;
  const ::std::string& pass() const;
  void set_pass(const ::std::string& value);
  #if LANG_CXX11
  void set_pass(::std::string&& value);
  #endif
  void set_pass(const char* value);
  void set_pass(const char* value, size_t size);
  ::std::string* mutable_pass();
  ::std::string* release_pass();
  void set_allocated_pass(::std::string* pass);

  // string platform = 3;
  void clear_platform();
  static const int kPlatformFieldNumber = 3;
  const ::std::string& platform() const;
  void set_platform(const ::std::string& value);
  #if LANG_CXX11
  void set_platform(::std::string&& value);
  #endif
  void set_platform(const char* value);
  void set_platform(const char* value, size_t size);
  ::std::string* mutable_platform();
  ::std::string* release_platform();
  void set_allocated_platform(::std::string* platform);

  // @@protoc_insertion_point(class_scope:ttmall.DriverLoginReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr mobile_;
  ::google::protobuf::internal::ArenaStringPtr pass_;
  ::google::protobuf::internal::ArenaStringPtr platform_;
  mutable int _cached_size_;
  friend struct protobuf_driver_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DriverLoginRep : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ttmall.DriverLoginRep) */ {
 public:
  DriverLoginRep();
  virtual ~DriverLoginRep();

  DriverLoginRep(const DriverLoginRep& from);

  inline DriverLoginRep& operator=(const DriverLoginRep& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DriverLoginRep& default_instance();

  static inline const DriverLoginRep* internal_default_instance() {
    return reinterpret_cast<const DriverLoginRep*>(
               &_DriverLoginRep_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    10;

  void Swap(DriverLoginRep* other);

  // implements Message ----------------------------------------------

  inline DriverLoginRep* New() const PROTOBUF_FINAL { return New(NULL); }

  DriverLoginRep* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DriverLoginRep& from);
  void MergeFrom(const DriverLoginRep& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DriverLoginRep* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string token = 1;
  void clear_token();
  static const int kTokenFieldNumber = 1;
  const ::std::string& token() const;
  void set_token(const ::std::string& value);
  #if LANG_CXX11
  void set_token(::std::string&& value);
  #endif
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  ::std::string* mutable_token();
  ::std::string* release_token();
  void set_allocated_token(::std::string* token);

  // .ttmall.DriverInfo info = 2;
  bool has_info() const;
  void clear_info();
  static const int kInfoFieldNumber = 2;
  const ::ttmall::DriverInfo& info() const;
  ::ttmall::DriverInfo* mutable_info();
  ::ttmall::DriverInfo* release_info();
  void set_allocated_info(::ttmall::DriverInfo* info);

  // @@protoc_insertion_point(class_scope:ttmall.DriverLoginRep)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr token_;
  ::ttmall::DriverInfo* info_;
  mutable int _cached_size_;
  friend struct protobuf_driver_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DriverRegisterReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ttmall.DriverRegisterReq) */ {
 public:
  DriverRegisterReq();
  virtual ~DriverRegisterReq();

  DriverRegisterReq(const DriverRegisterReq& from);

  inline DriverRegisterReq& operator=(const DriverRegisterReq& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DriverRegisterReq& default_instance();

  static inline const DriverRegisterReq* internal_default_instance() {
    return reinterpret_cast<const DriverRegisterReq*>(
               &_DriverRegisterReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    11;

  void Swap(DriverRegisterReq* other);

  // implements Message ----------------------------------------------

  inline DriverRegisterReq* New() const PROTOBUF_FINAL { return New(NULL); }

  DriverRegisterReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DriverRegisterReq& from);
  void MergeFrom(const DriverRegisterReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DriverRegisterReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string token = 1;
  void clear_token();
  static const int kTokenFieldNumber = 1;
  const ::std::string& token() const;
  void set_token(const ::std::string& value);
  #if LANG_CXX11
  void set_token(::std::string&& value);
  #endif
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  ::std::string* mutable_token();
  ::std::string* release_token();
  void set_allocated_token(::std::string* token);

  // string mobile = 2;
  void clear_mobile();
  static const int kMobileFieldNumber = 2;
  const ::std::string& mobile() const;
  void set_mobile(const ::std::string& value);
  #if LANG_CXX11
  void set_mobile(::std::string&& value);
  #endif
  void set_mobile(const char* value);
  void set_mobile(const char* value, size_t size);
  ::std::string* mutable_mobile();
  ::std::string* release_mobile();
  void set_allocated_mobile(::std::string* mobile);

  // string pass = 3;
  void clear_pass();
  static const int kPassFieldNumber = 3;
  const ::std::string& pass() const;
  void set_pass(const ::std::string& value);
  #if LANG_CXX11
  void set_pass(::std::string&& value);
  #endif
  void set_pass(const char* value);
  void set_pass(const char* value, size_t size);
  ::std::string* mutable_pass();
  ::std::string* release_pass();
  void set_allocated_pass(::std::string* pass);

  // string code = 4;
  void clear_code();
  static const int kCodeFieldNumber = 4;
  const ::std::string& code() const;
  void set_code(const ::std::string& value);
  #if LANG_CXX11
  void set_code(::std::string&& value);
  #endif
  void set_code(const char* value);
  void set_code(const char* value, size_t size);
  ::std::string* mutable_code();
  ::std::string* release_code();
  void set_allocated_code(::std::string* code);

  // @@protoc_insertion_point(class_scope:ttmall.DriverRegisterReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr token_;
  ::google::protobuf::internal::ArenaStringPtr mobile_;
  ::google::protobuf::internal::ArenaStringPtr pass_;
  ::google::protobuf::internal::ArenaStringPtr code_;
  mutable int _cached_size_;
  friend struct protobuf_driver_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DriverRegisterRep : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ttmall.DriverRegisterRep) */ {
 public:
  DriverRegisterRep();
  virtual ~DriverRegisterRep();

  DriverRegisterRep(const DriverRegisterRep& from);

  inline DriverRegisterRep& operator=(const DriverRegisterRep& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DriverRegisterRep& default_instance();

  static inline const DriverRegisterRep* internal_default_instance() {
    return reinterpret_cast<const DriverRegisterRep*>(
               &_DriverRegisterRep_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    12;

  void Swap(DriverRegisterRep* other);

  // implements Message ----------------------------------------------

  inline DriverRegisterRep* New() const PROTOBUF_FINAL { return New(NULL); }

  DriverRegisterRep* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DriverRegisterRep& from);
  void MergeFrom(const DriverRegisterRep& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DriverRegisterRep* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string token = 1;
  void clear_token();
  static const int kTokenFieldNumber = 1;
  const ::std::string& token() const;
  void set_token(const ::std::string& value);
  #if LANG_CXX11
  void set_token(::std::string&& value);
  #endif
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  ::std::string* mutable_token();
  ::std::string* release_token();
  void set_allocated_token(::std::string* token);

  // @@protoc_insertion_point(class_scope:ttmall.DriverRegisterRep)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr token_;
  mutable int _cached_size_;
  friend struct protobuf_driver_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SubmitAuthInfoReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ttmall.SubmitAuthInfoReq) */ {
 public:
  SubmitAuthInfoReq();
  virtual ~SubmitAuthInfoReq();

  SubmitAuthInfoReq(const SubmitAuthInfoReq& from);

  inline SubmitAuthInfoReq& operator=(const SubmitAuthInfoReq& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SubmitAuthInfoReq& default_instance();

  static inline const SubmitAuthInfoReq* internal_default_instance() {
    return reinterpret_cast<const SubmitAuthInfoReq*>(
               &_SubmitAuthInfoReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    13;

  void Swap(SubmitAuthInfoReq* other);

  // implements Message ----------------------------------------------

  inline SubmitAuthInfoReq* New() const PROTOBUF_FINAL { return New(NULL); }

  SubmitAuthInfoReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SubmitAuthInfoReq& from);
  void MergeFrom(const SubmitAuthInfoReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SubmitAuthInfoReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated bytes driving_photos = 5;
  int driving_photos_size() const;
  void clear_driving_photos();
  static const int kDrivingPhotosFieldNumber = 5;
  const ::std::string& driving_photos(int index) const;
  ::std::string* mutable_driving_photos(int index);
  void set_driving_photos(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_driving_photos(int index, ::std::string&& value);
  #endif
  void set_driving_photos(int index, const char* value);
  void set_driving_photos(int index, const void* value, size_t size);
  ::std::string* add_driving_photos();
  void add_driving_photos(const ::std::string& value);
  #if LANG_CXX11
  void add_driving_photos(::std::string&& value);
  #endif
  void add_driving_photos(const char* value);
  void add_driving_photos(const void* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& driving_photos() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_driving_photos();

  // repeated string regions_id = 6;
  int regions_id_size() const;
  void clear_regions_id();
  static const int kRegionsIdFieldNumber = 6;
  const ::std::string& regions_id(int index) const;
  ::std::string* mutable_regions_id(int index);
  void set_regions_id(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_regions_id(int index, ::std::string&& value);
  #endif
  void set_regions_id(int index, const char* value);
  void set_regions_id(int index, const char* value, size_t size);
  ::std::string* add_regions_id();
  void add_regions_id(const ::std::string& value);
  #if LANG_CXX11
  void add_regions_id(::std::string&& value);
  #endif
  void add_regions_id(const char* value);
  void add_regions_id(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& regions_id() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_regions_id();

  // repeated bytes car_licences = 10;
  int car_licences_size() const;
  void clear_car_licences();
  static const int kCarLicencesFieldNumber = 10;
  const ::std::string& car_licences(int index) const;
  ::std::string* mutable_car_licences(int index);
  void set_car_licences(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_car_licences(int index, ::std::string&& value);
  #endif
  void set_car_licences(int index, const char* value);
  void set_car_licences(int index, const void* value, size_t size);
  ::std::string* add_car_licences();
  void add_car_licences(const ::std::string& value);
  #if LANG_CXX11
  void add_car_licences(::std::string&& value);
  #endif
  void add_car_licences(const char* value);
  void add_car_licences(const void* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& car_licences() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_car_licences();

  // string token = 1;
  void clear_token();
  static const int kTokenFieldNumber = 1;
  const ::std::string& token() const;
  void set_token(const ::std::string& value);
  #if LANG_CXX11
  void set_token(::std::string&& value);
  #endif
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  ::std::string* mutable_token();
  ::std::string* release_token();
  void set_allocated_token(::std::string* token);

  // string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string id_number = 3;
  void clear_id_number();
  static const int kIdNumberFieldNumber = 3;
  const ::std::string& id_number() const;
  void set_id_number(const ::std::string& value);
  #if LANG_CXX11
  void set_id_number(::std::string&& value);
  #endif
  void set_id_number(const char* value);
  void set_id_number(const char* value, size_t size);
  ::std::string* mutable_id_number();
  ::std::string* release_id_number();
  void set_allocated_id_number(::std::string* id_number);

  // string driving_date = 4;
  void clear_driving_date();
  static const int kDrivingDateFieldNumber = 4;
  const ::std::string& driving_date() const;
  void set_driving_date(const ::std::string& value);
  #if LANG_CXX11
  void set_driving_date(::std::string&& value);
  #endif
  void set_driving_date(const char* value);
  void set_driving_date(const char* value, size_t size);
  ::std::string* mutable_driving_date();
  ::std::string* release_driving_date();
  void set_allocated_driving_date(::std::string* driving_date);

  // string car_id = 7;
  void clear_car_id();
  static const int kCarIdFieldNumber = 7;
  const ::std::string& car_id() const;
  void set_car_id(const ::std::string& value);
  #if LANG_CXX11
  void set_car_id(::std::string&& value);
  #endif
  void set_car_id(const char* value);
  void set_car_id(const char* value, size_t size);
  ::std::string* mutable_car_id();
  ::std::string* release_car_id();
  void set_allocated_car_id(::std::string* car_id);

  // string car_number = 8;
  void clear_car_number();
  static const int kCarNumberFieldNumber = 8;
  const ::std::string& car_number() const;
  void set_car_number(const ::std::string& value);
  #if LANG_CXX11
  void set_car_number(::std::string&& value);
  #endif
  void set_car_number(const char* value);
  void set_car_number(const char* value, size_t size);
  ::std::string* mutable_car_number();
  ::std::string* release_car_number();
  void set_allocated_car_number(::std::string* car_number);

  // string car_owner = 9;
  void clear_car_owner();
  static const int kCarOwnerFieldNumber = 9;
  const ::std::string& car_owner() const;
  void set_car_owner(const ::std::string& value);
  #if LANG_CXX11
  void set_car_owner(::std::string&& value);
  #endif
  void set_car_owner(const char* value);
  void set_car_owner(const char* value, size_t size);
  ::std::string* mutable_car_owner();
  ::std::string* release_car_owner();
  void set_allocated_car_owner(::std::string* car_owner);

  // bool is_indep = 11;
  void clear_is_indep();
  static const int kIsIndepFieldNumber = 11;
  bool is_indep() const;
  void set_is_indep(bool value);

  // @@protoc_insertion_point(class_scope:ttmall.SubmitAuthInfoReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> driving_photos_;
  ::google::protobuf::RepeatedPtrField< ::std::string> regions_id_;
  ::google::protobuf::RepeatedPtrField< ::std::string> car_licences_;
  ::google::protobuf::internal::ArenaStringPtr token_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr id_number_;
  ::google::protobuf::internal::ArenaStringPtr driving_date_;
  ::google::protobuf::internal::ArenaStringPtr car_id_;
  ::google::protobuf::internal::ArenaStringPtr car_number_;
  ::google::protobuf::internal::ArenaStringPtr car_owner_;
  bool is_indep_;
  mutable int _cached_size_;
  friend struct protobuf_driver_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SubmitAuthInfoRep : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ttmall.SubmitAuthInfoRep) */ {
 public:
  SubmitAuthInfoRep();
  virtual ~SubmitAuthInfoRep();

  SubmitAuthInfoRep(const SubmitAuthInfoRep& from);

  inline SubmitAuthInfoRep& operator=(const SubmitAuthInfoRep& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SubmitAuthInfoRep& default_instance();

  static inline const SubmitAuthInfoRep* internal_default_instance() {
    return reinterpret_cast<const SubmitAuthInfoRep*>(
               &_SubmitAuthInfoRep_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    14;

  void Swap(SubmitAuthInfoRep* other);

  // implements Message ----------------------------------------------

  inline SubmitAuthInfoRep* New() const PROTOBUF_FINAL { return New(NULL); }

  SubmitAuthInfoRep* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SubmitAuthInfoRep& from);
  void MergeFrom(const SubmitAuthInfoRep& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SubmitAuthInfoRep* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .ttmall.DriverInfo info = 1;
  bool has_info() const;
  void clear_info();
  static const int kInfoFieldNumber = 1;
  const ::ttmall::DriverInfo& info() const;
  ::ttmall::DriverInfo* mutable_info();
  ::ttmall::DriverInfo* release_info();
  void set_allocated_info(::ttmall::DriverInfo* info);

  // @@protoc_insertion_point(class_scope:ttmall.SubmitAuthInfoRep)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::ttmall::DriverInfo* info_;
  mutable int _cached_size_;
  friend struct protobuf_driver_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetDriverInfoReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ttmall.GetDriverInfoReq) */ {
 public:
  GetDriverInfoReq();
  virtual ~GetDriverInfoReq();

  GetDriverInfoReq(const GetDriverInfoReq& from);

  inline GetDriverInfoReq& operator=(const GetDriverInfoReq& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetDriverInfoReq& default_instance();

  static inline const GetDriverInfoReq* internal_default_instance() {
    return reinterpret_cast<const GetDriverInfoReq*>(
               &_GetDriverInfoReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    15;

  void Swap(GetDriverInfoReq* other);

  // implements Message ----------------------------------------------

  inline GetDriverInfoReq* New() const PROTOBUF_FINAL { return New(NULL); }

  GetDriverInfoReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetDriverInfoReq& from);
  void MergeFrom(const GetDriverInfoReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetDriverInfoReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string token = 1;
  void clear_token();
  static const int kTokenFieldNumber = 1;
  const ::std::string& token() const;
  void set_token(const ::std::string& value);
  #if LANG_CXX11
  void set_token(::std::string&& value);
  #endif
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  ::std::string* mutable_token();
  ::std::string* release_token();
  void set_allocated_token(::std::string* token);

  // @@protoc_insertion_point(class_scope:ttmall.GetDriverInfoReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr token_;
  mutable int _cached_size_;
  friend struct protobuf_driver_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetDriverInfoRep : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ttmall.GetDriverInfoRep) */ {
 public:
  GetDriverInfoRep();
  virtual ~GetDriverInfoRep();

  GetDriverInfoRep(const GetDriverInfoRep& from);

  inline GetDriverInfoRep& operator=(const GetDriverInfoRep& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetDriverInfoRep& default_instance();

  static inline const GetDriverInfoRep* internal_default_instance() {
    return reinterpret_cast<const GetDriverInfoRep*>(
               &_GetDriverInfoRep_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    16;

  void Swap(GetDriverInfoRep* other);

  // implements Message ----------------------------------------------

  inline GetDriverInfoRep* New() const PROTOBUF_FINAL { return New(NULL); }

  GetDriverInfoRep* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetDriverInfoRep& from);
  void MergeFrom(const GetDriverInfoRep& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetDriverInfoRep* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .ttmall.DriverInfo info = 1;
  bool has_info() const;
  void clear_info();
  static const int kInfoFieldNumber = 1;
  const ::ttmall::DriverInfo& info() const;
  ::ttmall::DriverInfo* mutable_info();
  ::ttmall::DriverInfo* release_info();
  void set_allocated_info(::ttmall::DriverInfo* info);

  // @@protoc_insertion_point(class_scope:ttmall.GetDriverInfoRep)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::ttmall::DriverInfo* info_;
  mutable int _cached_size_;
  friend struct protobuf_driver_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UpdateDriverStateReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ttmall.UpdateDriverStateReq) */ {
 public:
  UpdateDriverStateReq();
  virtual ~UpdateDriverStateReq();

  UpdateDriverStateReq(const UpdateDriverStateReq& from);

  inline UpdateDriverStateReq& operator=(const UpdateDriverStateReq& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateDriverStateReq& default_instance();

  static inline const UpdateDriverStateReq* internal_default_instance() {
    return reinterpret_cast<const UpdateDriverStateReq*>(
               &_UpdateDriverStateReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    17;

  void Swap(UpdateDriverStateReq* other);

  // implements Message ----------------------------------------------

  inline UpdateDriverStateReq* New() const PROTOBUF_FINAL { return New(NULL); }

  UpdateDriverStateReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UpdateDriverStateReq& from);
  void MergeFrom(const UpdateDriverStateReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UpdateDriverStateReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string token = 1;
  void clear_token();
  static const int kTokenFieldNumber = 1;
  const ::std::string& token() const;
  void set_token(const ::std::string& value);
  #if LANG_CXX11
  void set_token(::std::string&& value);
  #endif
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  ::std::string* mutable_token();
  ::std::string* release_token();
  void set_allocated_token(::std::string* token);

  // .ttmall.CoordInfo coord = 3;
  bool has_coord() const;
  void clear_coord();
  static const int kCoordFieldNumber = 3;
  const ::ttmall::CoordInfo& coord() const;
  ::ttmall::CoordInfo* mutable_coord();
  ::ttmall::CoordInfo* release_coord();
  void set_allocated_coord(::ttmall::CoordInfo* coord);

  // @@protoc_insertion_point(class_scope:ttmall.UpdateDriverStateReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr token_;
  ::ttmall::CoordInfo* coord_;
  mutable int _cached_size_;
  friend struct protobuf_driver_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UpdateDriverStateRep : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ttmall.UpdateDriverStateRep) */ {
 public:
  UpdateDriverStateRep();
  virtual ~UpdateDriverStateRep();

  UpdateDriverStateRep(const UpdateDriverStateRep& from);

  inline UpdateDriverStateRep& operator=(const UpdateDriverStateRep& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateDriverStateRep& default_instance();

  static inline const UpdateDriverStateRep* internal_default_instance() {
    return reinterpret_cast<const UpdateDriverStateRep*>(
               &_UpdateDriverStateRep_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    18;

  void Swap(UpdateDriverStateRep* other);

  // implements Message ----------------------------------------------

  inline UpdateDriverStateRep* New() const PROTOBUF_FINAL { return New(NULL); }

  UpdateDriverStateRep* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UpdateDriverStateRep& from);
  void MergeFrom(const UpdateDriverStateRep& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UpdateDriverStateRep* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:ttmall.UpdateDriverStateRep)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct protobuf_driver_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DeliveryOrderInfoReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ttmall.DeliveryOrderInfoReq) */ {
 public:
  DeliveryOrderInfoReq();
  virtual ~DeliveryOrderInfoReq();

  DeliveryOrderInfoReq(const DeliveryOrderInfoReq& from);

  inline DeliveryOrderInfoReq& operator=(const DeliveryOrderInfoReq& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DeliveryOrderInfoReq& default_instance();

  static inline const DeliveryOrderInfoReq* internal_default_instance() {
    return reinterpret_cast<const DeliveryOrderInfoReq*>(
               &_DeliveryOrderInfoReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    19;

  void Swap(DeliveryOrderInfoReq* other);

  // implements Message ----------------------------------------------

  inline DeliveryOrderInfoReq* New() const PROTOBUF_FINAL { return New(NULL); }

  DeliveryOrderInfoReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DeliveryOrderInfoReq& from);
  void MergeFrom(const DeliveryOrderInfoReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DeliveryOrderInfoReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string token = 1;
  void clear_token();
  static const int kTokenFieldNumber = 1;
  const ::std::string& token() const;
  void set_token(const ::std::string& value);
  #if LANG_CXX11
  void set_token(::std::string&& value);
  #endif
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  ::std::string* mutable_token();
  ::std::string* release_token();
  void set_allocated_token(::std::string* token);

  // string ware_id = 2;
  void clear_ware_id();
  static const int kWareIdFieldNumber = 2;
  const ::std::string& ware_id() const;
  void set_ware_id(const ::std::string& value);
  #if LANG_CXX11
  void set_ware_id(::std::string&& value);
  #endif
  void set_ware_id(const char* value);
  void set_ware_id(const char* value, size_t size);
  ::std::string* mutable_ware_id();
  ::std::string* release_ware_id();
  void set_allocated_ware_id(::std::string* ware_id);

  // @@protoc_insertion_point(class_scope:ttmall.DeliveryOrderInfoReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr token_;
  ::google::protobuf::internal::ArenaStringPtr ware_id_;
  mutable int _cached_size_;
  friend struct protobuf_driver_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DeliveryOrderInfoRep : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ttmall.DeliveryOrderInfoRep) */ {
 public:
  DeliveryOrderInfoRep();
  virtual ~DeliveryOrderInfoRep();

  DeliveryOrderInfoRep(const DeliveryOrderInfoRep& from);

  inline DeliveryOrderInfoRep& operator=(const DeliveryOrderInfoRep& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DeliveryOrderInfoRep& default_instance();

  static inline const DeliveryOrderInfoRep* internal_default_instance() {
    return reinterpret_cast<const DeliveryOrderInfoRep*>(
               &_DeliveryOrderInfoRep_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    20;

  void Swap(DeliveryOrderInfoRep* other);

  // implements Message ----------------------------------------------

  inline DeliveryOrderInfoRep* New() const PROTOBUF_FINAL { return New(NULL); }

  DeliveryOrderInfoRep* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DeliveryOrderInfoRep& from);
  void MergeFrom(const DeliveryOrderInfoRep& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DeliveryOrderInfoRep* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ttmall.DeliveryGoods items = 1;
  int items_size() const;
  void clear_items();
  static const int kItemsFieldNumber = 1;
  const ::ttmall::DeliveryGoods& items(int index) const;
  ::ttmall::DeliveryGoods* mutable_items(int index);
  ::ttmall::DeliveryGoods* add_items();
  ::google::protobuf::RepeatedPtrField< ::ttmall::DeliveryGoods >*
      mutable_items();
  const ::google::protobuf::RepeatedPtrField< ::ttmall::DeliveryGoods >&
      items() const;

  // int32 order_count = 2;
  void clear_order_count();
  static const int kOrderCountFieldNumber = 2;
  ::google::protobuf::int32 order_count() const;
  void set_order_count(::google::protobuf::int32 value);

  // int32 user_count = 3;
  void clear_user_count();
  static const int kUserCountFieldNumber = 3;
  ::google::protobuf::int32 user_count() const;
  void set_user_count(::google::protobuf::int32 value);

  // int32 goods_count = 4;
  void clear_goods_count();
  static const int kGoodsCountFieldNumber = 4;
  ::google::protobuf::int32 goods_count() const;
  void set_goods_count(::google::protobuf::int32 value);

  // bool is_trans = 5;
  void clear_is_trans();
  static const int kIsTransFieldNumber = 5;
  bool is_trans() const;
  void set_is_trans(bool value);

  // @@protoc_insertion_point(class_scope:ttmall.DeliveryOrderInfoRep)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::ttmall::DeliveryGoods > items_;
  ::google::protobuf::int32 order_count_;
  ::google::protobuf::int32 user_count_;
  ::google::protobuf::int32 goods_count_;
  bool is_trans_;
  mutable int _cached_size_;
  friend struct protobuf_driver_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ConfirmDeliveryReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ttmall.ConfirmDeliveryReq) */ {
 public:
  ConfirmDeliveryReq();
  virtual ~ConfirmDeliveryReq();

  ConfirmDeliveryReq(const ConfirmDeliveryReq& from);

  inline ConfirmDeliveryReq& operator=(const ConfirmDeliveryReq& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ConfirmDeliveryReq& default_instance();

  static inline const ConfirmDeliveryReq* internal_default_instance() {
    return reinterpret_cast<const ConfirmDeliveryReq*>(
               &_ConfirmDeliveryReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    21;

  void Swap(ConfirmDeliveryReq* other);

  // implements Message ----------------------------------------------

  inline ConfirmDeliveryReq* New() const PROTOBUF_FINAL { return New(NULL); }

  ConfirmDeliveryReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ConfirmDeliveryReq& from);
  void MergeFrom(const ConfirmDeliveryReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ConfirmDeliveryReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string token = 1;
  void clear_token();
  static const int kTokenFieldNumber = 1;
  const ::std::string& token() const;
  void set_token(const ::std::string& value);
  #if LANG_CXX11
  void set_token(::std::string&& value);
  #endif
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  ::std::string* mutable_token();
  ::std::string* release_token();
  void set_allocated_token(::std::string* token);

  // string ware_id = 2;
  void clear_ware_id();
  static const int kWareIdFieldNumber = 2;
  const ::std::string& ware_id() const;
  void set_ware_id(const ::std::string& value);
  #if LANG_CXX11
  void set_ware_id(::std::string&& value);
  #endif
  void set_ware_id(const char* value);
  void set_ware_id(const char* value, size_t size);
  ::std::string* mutable_ware_id();
  ::std::string* release_ware_id();
  void set_allocated_ware_id(::std::string* ware_id);

  // @@protoc_insertion_point(class_scope:ttmall.ConfirmDeliveryReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr token_;
  ::google::protobuf::internal::ArenaStringPtr ware_id_;
  mutable int _cached_size_;
  friend struct protobuf_driver_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ConfirmDeliveryRep : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ttmall.ConfirmDeliveryRep) */ {
 public:
  ConfirmDeliveryRep();
  virtual ~ConfirmDeliveryRep();

  ConfirmDeliveryRep(const ConfirmDeliveryRep& from);

  inline ConfirmDeliveryRep& operator=(const ConfirmDeliveryRep& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ConfirmDeliveryRep& default_instance();

  static inline const ConfirmDeliveryRep* internal_default_instance() {
    return reinterpret_cast<const ConfirmDeliveryRep*>(
               &_ConfirmDeliveryRep_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    22;

  void Swap(ConfirmDeliveryRep* other);

  // implements Message ----------------------------------------------

  inline ConfirmDeliveryRep* New() const PROTOBUF_FINAL { return New(NULL); }

  ConfirmDeliveryRep* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ConfirmDeliveryRep& from);
  void MergeFrom(const ConfirmDeliveryRep& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ConfirmDeliveryRep* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:ttmall.ConfirmDeliveryRep)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct protobuf_driver_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ListDriverOrderReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ttmall.ListDriverOrderReq) */ {
 public:
  ListDriverOrderReq();
  virtual ~ListDriverOrderReq();

  ListDriverOrderReq(const ListDriverOrderReq& from);

  inline ListDriverOrderReq& operator=(const ListDriverOrderReq& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ListDriverOrderReq& default_instance();

  static inline const ListDriverOrderReq* internal_default_instance() {
    return reinterpret_cast<const ListDriverOrderReq*>(
               &_ListDriverOrderReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    23;

  void Swap(ListDriverOrderReq* other);

  // implements Message ----------------------------------------------

  inline ListDriverOrderReq* New() const PROTOBUF_FINAL { return New(NULL); }

  ListDriverOrderReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ListDriverOrderReq& from);
  void MergeFrom(const ListDriverOrderReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ListDriverOrderReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string token = 1;
  void clear_token();
  static const int kTokenFieldNumber = 1;
  const ::std::string& token() const;
  void set_token(const ::std::string& value);
  #if LANG_CXX11
  void set_token(::std::string&& value);
  #endif
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  ::std::string* mutable_token();
  ::std::string* release_token();
  void set_allocated_token(::std::string* token);

  // .ttmall.ListDriverOrderOpt opt = 2;
  void clear_opt();
  static const int kOptFieldNumber = 2;
  ::ttmall::ListDriverOrderOpt opt() const;
  void set_opt(::ttmall::ListDriverOrderOpt value);

  // int32 skip = 3;
  void clear_skip();
  static const int kSkipFieldNumber = 3;
  ::google::protobuf::int32 skip() const;
  void set_skip(::google::protobuf::int32 value);

  // int64 beg_time = 5;
  void clear_beg_time();
  static const int kBegTimeFieldNumber = 5;
  ::google::protobuf::int64 beg_time() const;
  void set_beg_time(::google::protobuf::int64 value);

  // int64 end_time = 6;
  void clear_end_time();
  static const int kEndTimeFieldNumber = 6;
  ::google::protobuf::int64 end_time() const;
  void set_end_time(::google::protobuf::int64 value);

  // int32 limit = 4;
  void clear_limit();
  static const int kLimitFieldNumber = 4;
  ::google::protobuf::int32 limit() const;
  void set_limit(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ttmall.ListDriverOrderReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr token_;
  int opt_;
  ::google::protobuf::int32 skip_;
  ::google::protobuf::int64 beg_time_;
  ::google::protobuf::int64 end_time_;
  ::google::protobuf::int32 limit_;
  mutable int _cached_size_;
  friend struct protobuf_driver_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ListDriverOrderRep : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ttmall.ListDriverOrderRep) */ {
 public:
  ListDriverOrderRep();
  virtual ~ListDriverOrderRep();

  ListDriverOrderRep(const ListDriverOrderRep& from);

  inline ListDriverOrderRep& operator=(const ListDriverOrderRep& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ListDriverOrderRep& default_instance();

  static inline const ListDriverOrderRep* internal_default_instance() {
    return reinterpret_cast<const ListDriverOrderRep*>(
               &_ListDriverOrderRep_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    24;

  void Swap(ListDriverOrderRep* other);

  // implements Message ----------------------------------------------

  inline ListDriverOrderRep* New() const PROTOBUF_FINAL { return New(NULL); }

  ListDriverOrderRep* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ListDriverOrderRep& from);
  void MergeFrom(const ListDriverOrderRep& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ListDriverOrderRep* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ttmall.DeliveryNode items = 1;
  int items_size() const;
  void clear_items();
  static const int kItemsFieldNumber = 1;
  const ::ttmall::DeliveryNode& items(int index) const;
  ::ttmall::DeliveryNode* mutable_items(int index);
  ::ttmall::DeliveryNode* add_items();
  ::google::protobuf::RepeatedPtrField< ::ttmall::DeliveryNode >*
      mutable_items();
  const ::google::protobuf::RepeatedPtrField< ::ttmall::DeliveryNode >&
      items() const;

  // @@protoc_insertion_point(class_scope:ttmall.ListDriverOrderRep)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::ttmall::DeliveryNode > items_;
  mutable int _cached_size_;
  friend struct protobuf_driver_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SignReceivingReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ttmall.SignReceivingReq) */ {
 public:
  SignReceivingReq();
  virtual ~SignReceivingReq();

  SignReceivingReq(const SignReceivingReq& from);

  inline SignReceivingReq& operator=(const SignReceivingReq& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SignReceivingReq& default_instance();

  static inline const SignReceivingReq* internal_default_instance() {
    return reinterpret_cast<const SignReceivingReq*>(
               &_SignReceivingReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    25;

  void Swap(SignReceivingReq* other);

  // implements Message ----------------------------------------------

  inline SignReceivingReq* New() const PROTOBUF_FINAL { return New(NULL); }

  SignReceivingReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SignReceivingReq& from);
  void MergeFrom(const SignReceivingReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SignReceivingReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated bytes images = 7;
  int images_size() const;
  void clear_images();
  static const int kImagesFieldNumber = 7;
  const ::std::string& images(int index) const;
  ::std::string* mutable_images(int index);
  void set_images(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_images(int index, ::std::string&& value);
  #endif
  void set_images(int index, const char* value);
  void set_images(int index, const void* value, size_t size);
  ::std::string* add_images();
  void add_images(const ::std::string& value);
  #if LANG_CXX11
  void add_images(::std::string&& value);
  #endif
  void add_images(const char* value);
  void add_images(const void* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& images() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_images();

  // string token = 1;
  void clear_token();
  static const int kTokenFieldNumber = 1;
  const ::std::string& token() const;
  void set_token(const ::std::string& value);
  #if LANG_CXX11
  void set_token(::std::string&& value);
  #endif
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  ::std::string* mutable_token();
  ::std::string* release_token();
  void set_allocated_token(::std::string* token);

  // string id = 2;
  void clear_id();
  static const int kIdFieldNumber = 2;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // string exp_desc = 4;
  void clear_exp_desc();
  static const int kExpDescFieldNumber = 4;
  const ::std::string& exp_desc() const;
  void set_exp_desc(const ::std::string& value);
  #if LANG_CXX11
  void set_exp_desc(::std::string&& value);
  #endif
  void set_exp_desc(const char* value);
  void set_exp_desc(const char* value, size_t size);
  ::std::string* mutable_exp_desc();
  ::std::string* release_exp_desc();
  void set_allocated_exp_desc(::std::string* exp_desc);

  // string suggest = 5;
  void clear_suggest();
  static const int kSuggestFieldNumber = 5;
  const ::std::string& suggest() const;
  void set_suggest(const ::std::string& value);
  #if LANG_CXX11
  void set_suggest(::std::string&& value);
  #endif
  void set_suggest(const char* value);
  void set_suggest(const char* value, size_t size);
  ::std::string* mutable_suggest();
  ::std::string* release_suggest();
  void set_allocated_suggest(::std::string* suggest);

  // string mark = 6;
  void clear_mark();
  static const int kMarkFieldNumber = 6;
  const ::std::string& mark() const;
  void set_mark(const ::std::string& value);
  #if LANG_CXX11
  void set_mark(::std::string&& value);
  #endif
  void set_mark(const char* value);
  void set_mark(const char* value, size_t size);
  ::std::string* mutable_mark();
  ::std::string* release_mark();
  void set_allocated_mark(::std::string* mark);

  // bool is_exp = 3;
  void clear_is_exp();
  static const int kIsExpFieldNumber = 3;
  bool is_exp() const;
  void set_is_exp(bool value);

  // @@protoc_insertion_point(class_scope:ttmall.SignReceivingReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> images_;
  ::google::protobuf::internal::ArenaStringPtr token_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr exp_desc_;
  ::google::protobuf::internal::ArenaStringPtr suggest_;
  ::google::protobuf::internal::ArenaStringPtr mark_;
  bool is_exp_;
  mutable int _cached_size_;
  friend struct protobuf_driver_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SignReceivingRep : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ttmall.SignReceivingRep) */ {
 public:
  SignReceivingRep();
  virtual ~SignReceivingRep();

  SignReceivingRep(const SignReceivingRep& from);

  inline SignReceivingRep& operator=(const SignReceivingRep& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SignReceivingRep& default_instance();

  static inline const SignReceivingRep* internal_default_instance() {
    return reinterpret_cast<const SignReceivingRep*>(
               &_SignReceivingRep_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    26;

  void Swap(SignReceivingRep* other);

  // implements Message ----------------------------------------------

  inline SignReceivingRep* New() const PROTOBUF_FINAL { return New(NULL); }

  SignReceivingRep* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SignReceivingRep& from);
  void MergeFrom(const SignReceivingRep& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SignReceivingRep* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // @@protoc_insertion_point(class_scope:ttmall.SignReceivingRep)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  mutable int _cached_size_;
  friend struct protobuf_driver_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UpdateDriverPassReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ttmall.UpdateDriverPassReq) */ {
 public:
  UpdateDriverPassReq();
  virtual ~UpdateDriverPassReq();

  UpdateDriverPassReq(const UpdateDriverPassReq& from);

  inline UpdateDriverPassReq& operator=(const UpdateDriverPassReq& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateDriverPassReq& default_instance();

  static inline const UpdateDriverPassReq* internal_default_instance() {
    return reinterpret_cast<const UpdateDriverPassReq*>(
               &_UpdateDriverPassReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    27;

  void Swap(UpdateDriverPassReq* other);

  // implements Message ----------------------------------------------

  inline UpdateDriverPassReq* New() const PROTOBUF_FINAL { return New(NULL); }

  UpdateDriverPassReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UpdateDriverPassReq& from);
  void MergeFrom(const UpdateDriverPassReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UpdateDriverPassReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string token = 1;
  void clear_token();
  static const int kTokenFieldNumber = 1;
  const ::std::string& token() const;
  void set_token(const ::std::string& value);
  #if LANG_CXX11
  void set_token(::std::string&& value);
  #endif
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  ::std::string* mutable_token();
  ::std::string* release_token();
  void set_allocated_token(::std::string* token);

  // string code = 2;
  void clear_code();
  static const int kCodeFieldNumber = 2;
  const ::std::string& code() const;
  void set_code(const ::std::string& value);
  #if LANG_CXX11
  void set_code(::std::string&& value);
  #endif
  void set_code(const char* value);
  void set_code(const char* value, size_t size);
  ::std::string* mutable_code();
  ::std::string* release_code();
  void set_allocated_code(::std::string* code);

  // string pass = 3;
  void clear_pass();
  static const int kPassFieldNumber = 3;
  const ::std::string& pass() const;
  void set_pass(const ::std::string& value);
  #if LANG_CXX11
  void set_pass(::std::string&& value);
  #endif
  void set_pass(const char* value);
  void set_pass(const char* value, size_t size);
  ::std::string* mutable_pass();
  ::std::string* release_pass();
  void set_allocated_pass(::std::string* pass);

  // @@protoc_insertion_point(class_scope:ttmall.UpdateDriverPassReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr token_;
  ::google::protobuf::internal::ArenaStringPtr code_;
  ::google::protobuf::internal::ArenaStringPtr pass_;
  mutable int _cached_size_;
  friend struct protobuf_driver_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UpdateDriverPassRep : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ttmall.UpdateDriverPassRep) */ {
 public:
  UpdateDriverPassRep();
  virtual ~UpdateDriverPassRep();

  UpdateDriverPassRep(const UpdateDriverPassRep& from);

  inline UpdateDriverPassRep& operator=(const UpdateDriverPassRep& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateDriverPassRep& default_instance();

  static inline const UpdateDriverPassRep* internal_default_instance() {
    return reinterpret_cast<const UpdateDriverPassRep*>(
               &_UpdateDriverPassRep_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    28;

  void Swap(UpdateDriverPassRep* other);

  // implements Message ----------------------------------------------

  inline UpdateDriverPassRep* New() const PROTOBUF_FINAL { return New(NULL); }

  UpdateDriverPassRep* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UpdateDriverPassRep& from);
  void MergeFrom(const UpdateDriverPassRep& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UpdateDriverPassRep* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .ttmall.DriverInfo info = 1;
  bool has_info() const;
  void clear_info();
  static const int kInfoFieldNumber = 1;
  const ::ttmall::DriverInfo& info() const;
  ::ttmall::DriverInfo* mutable_info();
  ::ttmall::DriverInfo* release_info();
  void set_allocated_info(::ttmall::DriverInfo* info);

  // @@protoc_insertion_point(class_scope:ttmall.UpdateDriverPassRep)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::ttmall::DriverInfo* info_;
  mutable int _cached_size_;
  friend struct protobuf_driver_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UpdateDriverMobileReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ttmall.UpdateDriverMobileReq) */ {
 public:
  UpdateDriverMobileReq();
  virtual ~UpdateDriverMobileReq();

  UpdateDriverMobileReq(const UpdateDriverMobileReq& from);

  inline UpdateDriverMobileReq& operator=(const UpdateDriverMobileReq& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateDriverMobileReq& default_instance();

  static inline const UpdateDriverMobileReq* internal_default_instance() {
    return reinterpret_cast<const UpdateDriverMobileReq*>(
               &_UpdateDriverMobileReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    29;

  void Swap(UpdateDriverMobileReq* other);

  // implements Message ----------------------------------------------

  inline UpdateDriverMobileReq* New() const PROTOBUF_FINAL { return New(NULL); }

  UpdateDriverMobileReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UpdateDriverMobileReq& from);
  void MergeFrom(const UpdateDriverMobileReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UpdateDriverMobileReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string login_token = 1;
  void clear_login_token();
  static const int kLoginTokenFieldNumber = 1;
  const ::std::string& login_token() const;
  void set_login_token(const ::std::string& value);
  #if LANG_CXX11
  void set_login_token(::std::string&& value);
  #endif
  void set_login_token(const char* value);
  void set_login_token(const char* value, size_t size);
  ::std::string* mutable_login_token();
  ::std::string* release_login_token();
  void set_allocated_login_token(::std::string* login_token);

  // string login_pass = 2;
  void clear_login_pass();
  static const int kLoginPassFieldNumber = 2;
  const ::std::string& login_pass() const;
  void set_login_pass(const ::std::string& value);
  #if LANG_CXX11
  void set_login_pass(::std::string&& value);
  #endif
  void set_login_pass(const char* value);
  void set_login_pass(const char* value, size_t size);
  ::std::string* mutable_login_pass();
  ::std::string* release_login_pass();
  void set_allocated_login_pass(::std::string* login_pass);

  // string mobile_token = 3;
  void clear_mobile_token();
  static const int kMobileTokenFieldNumber = 3;
  const ::std::string& mobile_token() const;
  void set_mobile_token(const ::std::string& value);
  #if LANG_CXX11
  void set_mobile_token(::std::string&& value);
  #endif
  void set_mobile_token(const char* value);
  void set_mobile_token(const char* value, size_t size);
  ::std::string* mutable_mobile_token();
  ::std::string* release_mobile_token();
  void set_allocated_mobile_token(::std::string* mobile_token);

  // string mobile_code = 4;
  void clear_mobile_code();
  static const int kMobileCodeFieldNumber = 4;
  const ::std::string& mobile_code() const;
  void set_mobile_code(const ::std::string& value);
  #if LANG_CXX11
  void set_mobile_code(::std::string&& value);
  #endif
  void set_mobile_code(const char* value);
  void set_mobile_code(const char* value, size_t size);
  ::std::string* mutable_mobile_code();
  ::std::string* release_mobile_code();
  void set_allocated_mobile_code(::std::string* mobile_code);

  // @@protoc_insertion_point(class_scope:ttmall.UpdateDriverMobileReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr login_token_;
  ::google::protobuf::internal::ArenaStringPtr login_pass_;
  ::google::protobuf::internal::ArenaStringPtr mobile_token_;
  ::google::protobuf::internal::ArenaStringPtr mobile_code_;
  mutable int _cached_size_;
  friend struct protobuf_driver_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UpdateDriverMobileRep : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ttmall.UpdateDriverMobileRep) */ {
 public:
  UpdateDriverMobileRep();
  virtual ~UpdateDriverMobileRep();

  UpdateDriverMobileRep(const UpdateDriverMobileRep& from);

  inline UpdateDriverMobileRep& operator=(const UpdateDriverMobileRep& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateDriverMobileRep& default_instance();

  static inline const UpdateDriverMobileRep* internal_default_instance() {
    return reinterpret_cast<const UpdateDriverMobileRep*>(
               &_UpdateDriverMobileRep_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    30;

  void Swap(UpdateDriverMobileRep* other);

  // implements Message ----------------------------------------------

  inline UpdateDriverMobileRep* New() const PROTOBUF_FINAL { return New(NULL); }

  UpdateDriverMobileRep* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UpdateDriverMobileRep& from);
  void MergeFrom(const UpdateDriverMobileRep& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UpdateDriverMobileRep* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .ttmall.DriverInfo info = 1;
  bool has_info() const;
  void clear_info();
  static const int kInfoFieldNumber = 1;
  const ::ttmall::DriverInfo& info() const;
  ::ttmall::DriverInfo* mutable_info();
  ::ttmall::DriverInfo* release_info();
  void set_allocated_info(::ttmall::DriverInfo* info);

  // @@protoc_insertion_point(class_scope:ttmall.UpdateDriverMobileRep)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::ttmall::DriverInfo* info_;
  mutable int _cached_size_;
  friend struct protobuf_driver_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// SignInfo

// bool is_exp = 1;
inline void SignInfo::clear_is_exp() {
  is_exp_ = false;
}
inline bool SignInfo::is_exp() const {
  // @@protoc_insertion_point(field_get:ttmall.SignInfo.is_exp)
  return is_exp_;
}
inline void SignInfo::set_is_exp(bool value) {
  
  is_exp_ = value;
  // @@protoc_insertion_point(field_set:ttmall.SignInfo.is_exp)
}

// string exp_desc = 2;
inline void SignInfo::clear_exp_desc() {
  exp_desc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SignInfo::exp_desc() const {
  // @@protoc_insertion_point(field_get:ttmall.SignInfo.exp_desc)
  return exp_desc_.GetNoArena();
}
inline void SignInfo::set_exp_desc(const ::std::string& value) {
  
  exp_desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ttmall.SignInfo.exp_desc)
}
#if LANG_CXX11
inline void SignInfo::set_exp_desc(::std::string&& value) {
  
  exp_desc_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ttmall.SignInfo.exp_desc)
}
#endif
inline void SignInfo::set_exp_desc(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  exp_desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ttmall.SignInfo.exp_desc)
}
inline void SignInfo::set_exp_desc(const char* value, size_t size) {
  
  exp_desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ttmall.SignInfo.exp_desc)
}
inline ::std::string* SignInfo::mutable_exp_desc() {
  
  // @@protoc_insertion_point(field_mutable:ttmall.SignInfo.exp_desc)
  return exp_desc_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SignInfo::release_exp_desc() {
  // @@protoc_insertion_point(field_release:ttmall.SignInfo.exp_desc)
  
  return exp_desc_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SignInfo::set_allocated_exp_desc(::std::string* exp_desc) {
  if (exp_desc != NULL) {
    
  } else {
    
  }
  exp_desc_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exp_desc);
  // @@protoc_insertion_point(field_set_allocated:ttmall.SignInfo.exp_desc)
}

// string suggest = 3;
inline void SignInfo::clear_suggest() {
  suggest_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SignInfo::suggest() const {
  // @@protoc_insertion_point(field_get:ttmall.SignInfo.suggest)
  return suggest_.GetNoArena();
}
inline void SignInfo::set_suggest(const ::std::string& value) {
  
  suggest_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ttmall.SignInfo.suggest)
}
#if LANG_CXX11
inline void SignInfo::set_suggest(::std::string&& value) {
  
  suggest_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ttmall.SignInfo.suggest)
}
#endif
inline void SignInfo::set_suggest(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  suggest_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ttmall.SignInfo.suggest)
}
inline void SignInfo::set_suggest(const char* value, size_t size) {
  
  suggest_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ttmall.SignInfo.suggest)
}
inline ::std::string* SignInfo::mutable_suggest() {
  
  // @@protoc_insertion_point(field_mutable:ttmall.SignInfo.suggest)
  return suggest_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SignInfo::release_suggest() {
  // @@protoc_insertion_point(field_release:ttmall.SignInfo.suggest)
  
  return suggest_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SignInfo::set_allocated_suggest(::std::string* suggest) {
  if (suggest != NULL) {
    
  } else {
    
  }
  suggest_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), suggest);
  // @@protoc_insertion_point(field_set_allocated:ttmall.SignInfo.suggest)
}

// string mark = 4;
inline void SignInfo::clear_mark() {
  mark_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SignInfo::mark() const {
  // @@protoc_insertion_point(field_get:ttmall.SignInfo.mark)
  return mark_.GetNoArena();
}
inline void SignInfo::set_mark(const ::std::string& value) {
  
  mark_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ttmall.SignInfo.mark)
}
#if LANG_CXX11
inline void SignInfo::set_mark(::std::string&& value) {
  
  mark_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ttmall.SignInfo.mark)
}
#endif
inline void SignInfo::set_mark(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  mark_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ttmall.SignInfo.mark)
}
inline void SignInfo::set_mark(const char* value, size_t size) {
  
  mark_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ttmall.SignInfo.mark)
}
inline ::std::string* SignInfo::mutable_mark() {
  
  // @@protoc_insertion_point(field_mutable:ttmall.SignInfo.mark)
  return mark_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SignInfo::release_mark() {
  // @@protoc_insertion_point(field_release:ttmall.SignInfo.mark)
  
  return mark_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SignInfo::set_allocated_mark(::std::string* mark) {
  if (mark != NULL) {
    
  } else {
    
  }
  mark_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mark);
  // @@protoc_insertion_point(field_set_allocated:ttmall.SignInfo.mark)
}

// repeated .ttmall.ImageInfo images = 5;
inline int SignInfo::images_size() const {
  return images_.size();
}
inline void SignInfo::clear_images() {
  images_.Clear();
}
inline const ::ttmall::ImageInfo& SignInfo::images(int index) const {
  // @@protoc_insertion_point(field_get:ttmall.SignInfo.images)
  return images_.Get(index);
}
inline ::ttmall::ImageInfo* SignInfo::mutable_images(int index) {
  // @@protoc_insertion_point(field_mutable:ttmall.SignInfo.images)
  return images_.Mutable(index);
}
inline ::ttmall::ImageInfo* SignInfo::add_images() {
  // @@protoc_insertion_point(field_add:ttmall.SignInfo.images)
  return images_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ttmall::ImageInfo >*
SignInfo::mutable_images() {
  // @@protoc_insertion_point(field_mutable_list:ttmall.SignInfo.images)
  return &images_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ttmall::ImageInfo >&
SignInfo::images() const {
  // @@protoc_insertion_point(field_list:ttmall.SignInfo.images)
  return images_;
}

// int64 time = 6;
inline void SignInfo::clear_time() {
  time_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 SignInfo::time() const {
  // @@protoc_insertion_point(field_get:ttmall.SignInfo.time)
  return time_;
}
inline void SignInfo::set_time(::google::protobuf::int64 value) {
  
  time_ = value;
  // @@protoc_insertion_point(field_set:ttmall.SignInfo.time)
}

// -------------------------------------------------------------------

// DeliveryGoods

// string id = 1;
inline void DeliveryGoods::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeliveryGoods::id() const {
  // @@protoc_insertion_point(field_get:ttmall.DeliveryGoods.id)
  return id_.GetNoArena();
}
inline void DeliveryGoods::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ttmall.DeliveryGoods.id)
}
#if LANG_CXX11
inline void DeliveryGoods::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ttmall.DeliveryGoods.id)
}
#endif
inline void DeliveryGoods::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ttmall.DeliveryGoods.id)
}
inline void DeliveryGoods::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ttmall.DeliveryGoods.id)
}
inline ::std::string* DeliveryGoods::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:ttmall.DeliveryGoods.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeliveryGoods::release_id() {
  // @@protoc_insertion_point(field_release:ttmall.DeliveryGoods.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeliveryGoods::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:ttmall.DeliveryGoods.id)
}

// string key = 2;
inline void DeliveryGoods::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeliveryGoods::key() const {
  // @@protoc_insertion_point(field_get:ttmall.DeliveryGoods.key)
  return key_.GetNoArena();
}
inline void DeliveryGoods::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ttmall.DeliveryGoods.key)
}
#if LANG_CXX11
inline void DeliveryGoods::set_key(::std::string&& value) {
  
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ttmall.DeliveryGoods.key)
}
#endif
inline void DeliveryGoods::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ttmall.DeliveryGoods.key)
}
inline void DeliveryGoods::set_key(const char* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ttmall.DeliveryGoods.key)
}
inline ::std::string* DeliveryGoods::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:ttmall.DeliveryGoods.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeliveryGoods::release_key() {
  // @@protoc_insertion_point(field_release:ttmall.DeliveryGoods.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeliveryGoods::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:ttmall.DeliveryGoods.key)
}

// int32 count = 3;
inline void DeliveryGoods::clear_count() {
  count_ = 0;
}
inline ::google::protobuf::int32 DeliveryGoods::count() const {
  // @@protoc_insertion_point(field_get:ttmall.DeliveryGoods.count)
  return count_;
}
inline void DeliveryGoods::set_count(::google::protobuf::int32 value) {
  
  count_ = value;
  // @@protoc_insertion_point(field_set:ttmall.DeliveryGoods.count)
}

// string name = 4;
inline void DeliveryGoods::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeliveryGoods::name() const {
  // @@protoc_insertion_point(field_get:ttmall.DeliveryGoods.name)
  return name_.GetNoArena();
}
inline void DeliveryGoods::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ttmall.DeliveryGoods.name)
}
#if LANG_CXX11
inline void DeliveryGoods::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ttmall.DeliveryGoods.name)
}
#endif
inline void DeliveryGoods::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ttmall.DeliveryGoods.name)
}
inline void DeliveryGoods::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ttmall.DeliveryGoods.name)
}
inline ::std::string* DeliveryGoods::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:ttmall.DeliveryGoods.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeliveryGoods::release_name() {
  // @@protoc_insertion_point(field_release:ttmall.DeliveryGoods.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeliveryGoods::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:ttmall.DeliveryGoods.name)
}

// repeated .ttmall.ImageInfo images = 5;
inline int DeliveryGoods::images_size() const {
  return images_.size();
}
inline void DeliveryGoods::clear_images() {
  images_.Clear();
}
inline const ::ttmall::ImageInfo& DeliveryGoods::images(int index) const {
  // @@protoc_insertion_point(field_get:ttmall.DeliveryGoods.images)
  return images_.Get(index);
}
inline ::ttmall::ImageInfo* DeliveryGoods::mutable_images(int index) {
  // @@protoc_insertion_point(field_mutable:ttmall.DeliveryGoods.images)
  return images_.Mutable(index);
}
inline ::ttmall::ImageInfo* DeliveryGoods::add_images() {
  // @@protoc_insertion_point(field_add:ttmall.DeliveryGoods.images)
  return images_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ttmall::ImageInfo >*
DeliveryGoods::mutable_images() {
  // @@protoc_insertion_point(field_mutable_list:ttmall.DeliveryGoods.images)
  return &images_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ttmall::ImageInfo >&
DeliveryGoods::images() const {
  // @@protoc_insertion_point(field_list:ttmall.DeliveryGoods.images)
  return images_;
}

// repeated string specs = 6;
inline int DeliveryGoods::specs_size() const {
  return specs_.size();
}
inline void DeliveryGoods::clear_specs() {
  specs_.Clear();
}
inline const ::std::string& DeliveryGoods::specs(int index) const {
  // @@protoc_insertion_point(field_get:ttmall.DeliveryGoods.specs)
  return specs_.Get(index);
}
inline ::std::string* DeliveryGoods::mutable_specs(int index) {
  // @@protoc_insertion_point(field_mutable:ttmall.DeliveryGoods.specs)
  return specs_.Mutable(index);
}
inline void DeliveryGoods::set_specs(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ttmall.DeliveryGoods.specs)
  specs_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void DeliveryGoods::set_specs(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ttmall.DeliveryGoods.specs)
  specs_.Mutable(index)->assign(std::move(value));
}
#endif
inline void DeliveryGoods::set_specs(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  specs_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ttmall.DeliveryGoods.specs)
}
inline void DeliveryGoods::set_specs(int index, const char* value, size_t size) {
  specs_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ttmall.DeliveryGoods.specs)
}
inline ::std::string* DeliveryGoods::add_specs() {
  // @@protoc_insertion_point(field_add_mutable:ttmall.DeliveryGoods.specs)
  return specs_.Add();
}
inline void DeliveryGoods::add_specs(const ::std::string& value) {
  specs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ttmall.DeliveryGoods.specs)
}
#if LANG_CXX11
inline void DeliveryGoods::add_specs(::std::string&& value) {
  specs_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ttmall.DeliveryGoods.specs)
}
#endif
inline void DeliveryGoods::add_specs(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  specs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ttmall.DeliveryGoods.specs)
}
inline void DeliveryGoods::add_specs(const char* value, size_t size) {
  specs_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ttmall.DeliveryGoods.specs)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
DeliveryGoods::specs() const {
  // @@protoc_insertion_point(field_list:ttmall.DeliveryGoods.specs)
  return specs_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
DeliveryGoods::mutable_specs() {
  // @@protoc_insertion_point(field_mutable_list:ttmall.DeliveryGoods.specs)
  return &specs_;
}

// string unit = 7;
inline void DeliveryGoods::clear_unit() {
  unit_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeliveryGoods::unit() const {
  // @@protoc_insertion_point(field_get:ttmall.DeliveryGoods.unit)
  return unit_.GetNoArena();
}
inline void DeliveryGoods::set_unit(const ::std::string& value) {
  
  unit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ttmall.DeliveryGoods.unit)
}
#if LANG_CXX11
inline void DeliveryGoods::set_unit(::std::string&& value) {
  
  unit_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ttmall.DeliveryGoods.unit)
}
#endif
inline void DeliveryGoods::set_unit(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  unit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ttmall.DeliveryGoods.unit)
}
inline void DeliveryGoods::set_unit(const char* value, size_t size) {
  
  unit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ttmall.DeliveryGoods.unit)
}
inline ::std::string* DeliveryGoods::mutable_unit() {
  
  // @@protoc_insertion_point(field_mutable:ttmall.DeliveryGoods.unit)
  return unit_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeliveryGoods::release_unit() {
  // @@protoc_insertion_point(field_release:ttmall.DeliveryGoods.unit)
  
  return unit_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeliveryGoods::set_allocated_unit(::std::string* unit) {
  if (unit != NULL) {
    
  } else {
    
  }
  unit_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), unit);
  // @@protoc_insertion_point(field_set_allocated:ttmall.DeliveryGoods.unit)
}

// -------------------------------------------------------------------

// DeliveryNode

// string id = 1;
inline void DeliveryNode::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeliveryNode::id() const {
  // @@protoc_insertion_point(field_get:ttmall.DeliveryNode.id)
  return id_.GetNoArena();
}
inline void DeliveryNode::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ttmall.DeliveryNode.id)
}
#if LANG_CXX11
inline void DeliveryNode::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ttmall.DeliveryNode.id)
}
#endif
inline void DeliveryNode::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ttmall.DeliveryNode.id)
}
inline void DeliveryNode::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ttmall.DeliveryNode.id)
}
inline ::std::string* DeliveryNode::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:ttmall.DeliveryNode.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeliveryNode::release_id() {
  // @@protoc_insertion_point(field_release:ttmall.DeliveryNode.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeliveryNode::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:ttmall.DeliveryNode.id)
}

// .ttmall.WareInfo ware_info = 2;
inline bool DeliveryNode::has_ware_info() const {
  return this != internal_default_instance() && ware_info_ != NULL;
}
inline void DeliveryNode::clear_ware_info() {
  if (GetArenaNoVirtual() == NULL && ware_info_ != NULL) delete ware_info_;
  ware_info_ = NULL;
}
inline const ::ttmall::WareInfo& DeliveryNode::ware_info() const {
  // @@protoc_insertion_point(field_get:ttmall.DeliveryNode.ware_info)
  return ware_info_ != NULL ? *ware_info_
                         : *::ttmall::WareInfo::internal_default_instance();
}
inline ::ttmall::WareInfo* DeliveryNode::mutable_ware_info() {
  
  if (ware_info_ == NULL) {
    ware_info_ = new ::ttmall::WareInfo;
  }
  // @@protoc_insertion_point(field_mutable:ttmall.DeliveryNode.ware_info)
  return ware_info_;
}
inline ::ttmall::WareInfo* DeliveryNode::release_ware_info() {
  // @@protoc_insertion_point(field_release:ttmall.DeliveryNode.ware_info)
  
  ::ttmall::WareInfo* temp = ware_info_;
  ware_info_ = NULL;
  return temp;
}
inline void DeliveryNode::set_allocated_ware_info(::ttmall::WareInfo* ware_info) {
  delete ware_info_;
  ware_info_ = ware_info;
  if (ware_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ttmall.DeliveryNode.ware_info)
}

// .ttmall.AddressInfo address = 3;
inline bool DeliveryNode::has_address() const {
  return this != internal_default_instance() && address_ != NULL;
}
inline void DeliveryNode::clear_address() {
  if (GetArenaNoVirtual() == NULL && address_ != NULL) delete address_;
  address_ = NULL;
}
inline const ::ttmall::AddressInfo& DeliveryNode::address() const {
  // @@protoc_insertion_point(field_get:ttmall.DeliveryNode.address)
  return address_ != NULL ? *address_
                         : *::ttmall::AddressInfo::internal_default_instance();
}
inline ::ttmall::AddressInfo* DeliveryNode::mutable_address() {
  
  if (address_ == NULL) {
    address_ = new ::ttmall::AddressInfo;
  }
  // @@protoc_insertion_point(field_mutable:ttmall.DeliveryNode.address)
  return address_;
}
inline ::ttmall::AddressInfo* DeliveryNode::release_address() {
  // @@protoc_insertion_point(field_release:ttmall.DeliveryNode.address)
  
  ::ttmall::AddressInfo* temp = address_;
  address_ = NULL;
  return temp;
}
inline void DeliveryNode::set_allocated_address(::ttmall::AddressInfo* address) {
  delete address_;
  address_ = address;
  if (address) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ttmall.DeliveryNode.address)
}

// string user_id = 4;
inline void DeliveryNode::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeliveryNode::user_id() const {
  // @@protoc_insertion_point(field_get:ttmall.DeliveryNode.user_id)
  return user_id_.GetNoArena();
}
inline void DeliveryNode::set_user_id(const ::std::string& value) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ttmall.DeliveryNode.user_id)
}
#if LANG_CXX11
inline void DeliveryNode::set_user_id(::std::string&& value) {
  
  user_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ttmall.DeliveryNode.user_id)
}
#endif
inline void DeliveryNode::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ttmall.DeliveryNode.user_id)
}
inline void DeliveryNode::set_user_id(const char* value, size_t size) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ttmall.DeliveryNode.user_id)
}
inline ::std::string* DeliveryNode::mutable_user_id() {
  
  // @@protoc_insertion_point(field_mutable:ttmall.DeliveryNode.user_id)
  return user_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeliveryNode::release_user_id() {
  // @@protoc_insertion_point(field_release:ttmall.DeliveryNode.user_id)
  
  return user_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeliveryNode::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    
  } else {
    
  }
  user_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:ttmall.DeliveryNode.user_id)
}

// string user_name = 5;
inline void DeliveryNode::clear_user_name() {
  user_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeliveryNode::user_name() const {
  // @@protoc_insertion_point(field_get:ttmall.DeliveryNode.user_name)
  return user_name_.GetNoArena();
}
inline void DeliveryNode::set_user_name(const ::std::string& value) {
  
  user_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ttmall.DeliveryNode.user_name)
}
#if LANG_CXX11
inline void DeliveryNode::set_user_name(::std::string&& value) {
  
  user_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ttmall.DeliveryNode.user_name)
}
#endif
inline void DeliveryNode::set_user_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  user_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ttmall.DeliveryNode.user_name)
}
inline void DeliveryNode::set_user_name(const char* value, size_t size) {
  
  user_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ttmall.DeliveryNode.user_name)
}
inline ::std::string* DeliveryNode::mutable_user_name() {
  
  // @@protoc_insertion_point(field_mutable:ttmall.DeliveryNode.user_name)
  return user_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeliveryNode::release_user_name() {
  // @@protoc_insertion_point(field_release:ttmall.DeliveryNode.user_name)
  
  return user_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeliveryNode::set_allocated_user_name(::std::string* user_name) {
  if (user_name != NULL) {
    
  } else {
    
  }
  user_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_name);
  // @@protoc_insertion_point(field_set_allocated:ttmall.DeliveryNode.user_name)
}

// int32 user_level = 6;
inline void DeliveryNode::clear_user_level() {
  user_level_ = 0;
}
inline ::google::protobuf::int32 DeliveryNode::user_level() const {
  // @@protoc_insertion_point(field_get:ttmall.DeliveryNode.user_level)
  return user_level_;
}
inline void DeliveryNode::set_user_level(::google::protobuf::int32 value) {
  
  user_level_ = value;
  // @@protoc_insertion_point(field_set:ttmall.DeliveryNode.user_level)
}

// repeated .ttmall.ImageInfo user_images = 7;
inline int DeliveryNode::user_images_size() const {
  return user_images_.size();
}
inline void DeliveryNode::clear_user_images() {
  user_images_.Clear();
}
inline const ::ttmall::ImageInfo& DeliveryNode::user_images(int index) const {
  // @@protoc_insertion_point(field_get:ttmall.DeliveryNode.user_images)
  return user_images_.Get(index);
}
inline ::ttmall::ImageInfo* DeliveryNode::mutable_user_images(int index) {
  // @@protoc_insertion_point(field_mutable:ttmall.DeliveryNode.user_images)
  return user_images_.Mutable(index);
}
inline ::ttmall::ImageInfo* DeliveryNode::add_user_images() {
  // @@protoc_insertion_point(field_add:ttmall.DeliveryNode.user_images)
  return user_images_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ttmall::ImageInfo >*
DeliveryNode::mutable_user_images() {
  // @@protoc_insertion_point(field_mutable_list:ttmall.DeliveryNode.user_images)
  return &user_images_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ttmall::ImageInfo >&
DeliveryNode::user_images() const {
  // @@protoc_insertion_point(field_list:ttmall.DeliveryNode.user_images)
  return user_images_;
}

// string brife = 8;
inline void DeliveryNode::clear_brife() {
  brife_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeliveryNode::brife() const {
  // @@protoc_insertion_point(field_get:ttmall.DeliveryNode.brife)
  return brife_.GetNoArena();
}
inline void DeliveryNode::set_brife(const ::std::string& value) {
  
  brife_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ttmall.DeliveryNode.brife)
}
#if LANG_CXX11
inline void DeliveryNode::set_brife(::std::string&& value) {
  
  brife_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ttmall.DeliveryNode.brife)
}
#endif
inline void DeliveryNode::set_brife(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  brife_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ttmall.DeliveryNode.brife)
}
inline void DeliveryNode::set_brife(const char* value, size_t size) {
  
  brife_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ttmall.DeliveryNode.brife)
}
inline ::std::string* DeliveryNode::mutable_brife() {
  
  // @@protoc_insertion_point(field_mutable:ttmall.DeliveryNode.brife)
  return brife_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeliveryNode::release_brife() {
  // @@protoc_insertion_point(field_release:ttmall.DeliveryNode.brife)
  
  return brife_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeliveryNode::set_allocated_brife(::std::string* brife) {
  if (brife != NULL) {
    
  } else {
    
  }
  brife_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), brife);
  // @@protoc_insertion_point(field_set_allocated:ttmall.DeliveryNode.brife)
}

// int32 count = 9;
inline void DeliveryNode::clear_count() {
  count_ = 0;
}
inline ::google::protobuf::int32 DeliveryNode::count() const {
  // @@protoc_insertion_point(field_get:ttmall.DeliveryNode.count)
  return count_;
}
inline void DeliveryNode::set_count(::google::protobuf::int32 value) {
  
  count_ = value;
  // @@protoc_insertion_point(field_set:ttmall.DeliveryNode.count)
}

// .ttmall.DeliveryState state = 10;
inline void DeliveryNode::clear_state() {
  state_ = 0;
}
inline ::ttmall::DeliveryState DeliveryNode::state() const {
  // @@protoc_insertion_point(field_get:ttmall.DeliveryNode.state)
  return static_cast< ::ttmall::DeliveryState >(state_);
}
inline void DeliveryNode::set_state(::ttmall::DeliveryState value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:ttmall.DeliveryNode.state)
}

// .ttmall.SignInfo sign_info = 11;
inline bool DeliveryNode::has_sign_info() const {
  return this != internal_default_instance() && sign_info_ != NULL;
}
inline void DeliveryNode::clear_sign_info() {
  if (GetArenaNoVirtual() == NULL && sign_info_ != NULL) delete sign_info_;
  sign_info_ = NULL;
}
inline const ::ttmall::SignInfo& DeliveryNode::sign_info() const {
  // @@protoc_insertion_point(field_get:ttmall.DeliveryNode.sign_info)
  return sign_info_ != NULL ? *sign_info_
                         : *::ttmall::SignInfo::internal_default_instance();
}
inline ::ttmall::SignInfo* DeliveryNode::mutable_sign_info() {
  
  if (sign_info_ == NULL) {
    sign_info_ = new ::ttmall::SignInfo;
  }
  // @@protoc_insertion_point(field_mutable:ttmall.DeliveryNode.sign_info)
  return sign_info_;
}
inline ::ttmall::SignInfo* DeliveryNode::release_sign_info() {
  // @@protoc_insertion_point(field_release:ttmall.DeliveryNode.sign_info)
  
  ::ttmall::SignInfo* temp = sign_info_;
  sign_info_ = NULL;
  return temp;
}
inline void DeliveryNode::set_allocated_sign_info(::ttmall::SignInfo* sign_info) {
  delete sign_info_;
  sign_info_ = sign_info;
  if (sign_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ttmall.DeliveryNode.sign_info)
}

// repeated .ttmall.DeliveryGoods goods = 12;
inline int DeliveryNode::goods_size() const {
  return goods_.size();
}
inline void DeliveryNode::clear_goods() {
  goods_.Clear();
}
inline const ::ttmall::DeliveryGoods& DeliveryNode::goods(int index) const {
  // @@protoc_insertion_point(field_get:ttmall.DeliveryNode.goods)
  return goods_.Get(index);
}
inline ::ttmall::DeliveryGoods* DeliveryNode::mutable_goods(int index) {
  // @@protoc_insertion_point(field_mutable:ttmall.DeliveryNode.goods)
  return goods_.Mutable(index);
}
inline ::ttmall::DeliveryGoods* DeliveryNode::add_goods() {
  // @@protoc_insertion_point(field_add:ttmall.DeliveryNode.goods)
  return goods_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ttmall::DeliveryGoods >*
DeliveryNode::mutable_goods() {
  // @@protoc_insertion_point(field_mutable_list:ttmall.DeliveryNode.goods)
  return &goods_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ttmall::DeliveryGoods >&
DeliveryNode::goods() const {
  // @@protoc_insertion_point(field_list:ttmall.DeliveryNode.goods)
  return goods_;
}

// -------------------------------------------------------------------

// WareGroup

// .ttmall.WareInfo ware_info = 1;
inline bool WareGroup::has_ware_info() const {
  return this != internal_default_instance() && ware_info_ != NULL;
}
inline void WareGroup::clear_ware_info() {
  if (GetArenaNoVirtual() == NULL && ware_info_ != NULL) delete ware_info_;
  ware_info_ = NULL;
}
inline const ::ttmall::WareInfo& WareGroup::ware_info() const {
  // @@protoc_insertion_point(field_get:ttmall.WareGroup.ware_info)
  return ware_info_ != NULL ? *ware_info_
                         : *::ttmall::WareInfo::internal_default_instance();
}
inline ::ttmall::WareInfo* WareGroup::mutable_ware_info() {
  
  if (ware_info_ == NULL) {
    ware_info_ = new ::ttmall::WareInfo;
  }
  // @@protoc_insertion_point(field_mutable:ttmall.WareGroup.ware_info)
  return ware_info_;
}
inline ::ttmall::WareInfo* WareGroup::release_ware_info() {
  // @@protoc_insertion_point(field_release:ttmall.WareGroup.ware_info)
  
  ::ttmall::WareInfo* temp = ware_info_;
  ware_info_ = NULL;
  return temp;
}
inline void WareGroup::set_allocated_ware_info(::ttmall::WareInfo* ware_info) {
  delete ware_info_;
  ware_info_ = ware_info;
  if (ware_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ttmall.WareGroup.ware_info)
}

// repeated .ttmall.DeliveryNode items = 2;
inline int WareGroup::items_size() const {
  return items_.size();
}
inline void WareGroup::clear_items() {
  items_.Clear();
}
inline const ::ttmall::DeliveryNode& WareGroup::items(int index) const {
  // @@protoc_insertion_point(field_get:ttmall.WareGroup.items)
  return items_.Get(index);
}
inline ::ttmall::DeliveryNode* WareGroup::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:ttmall.WareGroup.items)
  return items_.Mutable(index);
}
inline ::ttmall::DeliveryNode* WareGroup::add_items() {
  // @@protoc_insertion_point(field_add:ttmall.WareGroup.items)
  return items_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ttmall::DeliveryNode >*
WareGroup::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:ttmall.WareGroup.items)
  return &items_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ttmall::DeliveryNode >&
WareGroup::items() const {
  // @@protoc_insertion_point(field_list:ttmall.WareGroup.items)
  return items_;
}

// -------------------------------------------------------------------

// ListDeliveryTaskReq

// string token = 1;
inline void ListDeliveryTaskReq::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ListDeliveryTaskReq::token() const {
  // @@protoc_insertion_point(field_get:ttmall.ListDeliveryTaskReq.token)
  return token_.GetNoArena();
}
inline void ListDeliveryTaskReq::set_token(const ::std::string& value) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ttmall.ListDeliveryTaskReq.token)
}
#if LANG_CXX11
inline void ListDeliveryTaskReq::set_token(::std::string&& value) {
  
  token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ttmall.ListDeliveryTaskReq.token)
}
#endif
inline void ListDeliveryTaskReq::set_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ttmall.ListDeliveryTaskReq.token)
}
inline void ListDeliveryTaskReq::set_token(const char* value, size_t size) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ttmall.ListDeliveryTaskReq.token)
}
inline ::std::string* ListDeliveryTaskReq::mutable_token() {
  
  // @@protoc_insertion_point(field_mutable:ttmall.ListDeliveryTaskReq.token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListDeliveryTaskReq::release_token() {
  // @@protoc_insertion_point(field_release:ttmall.ListDeliveryTaskReq.token)
  
  return token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListDeliveryTaskReq::set_allocated_token(::std::string* token) {
  if (token != NULL) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:ttmall.ListDeliveryTaskReq.token)
}

// .ttmall.CoordInfo coord = 2;
inline bool ListDeliveryTaskReq::has_coord() const {
  return this != internal_default_instance() && coord_ != NULL;
}
inline void ListDeliveryTaskReq::clear_coord() {
  if (GetArenaNoVirtual() == NULL && coord_ != NULL) delete coord_;
  coord_ = NULL;
}
inline const ::ttmall::CoordInfo& ListDeliveryTaskReq::coord() const {
  // @@protoc_insertion_point(field_get:ttmall.ListDeliveryTaskReq.coord)
  return coord_ != NULL ? *coord_
                         : *::ttmall::CoordInfo::internal_default_instance();
}
inline ::ttmall::CoordInfo* ListDeliveryTaskReq::mutable_coord() {
  
  if (coord_ == NULL) {
    coord_ = new ::ttmall::CoordInfo;
  }
  // @@protoc_insertion_point(field_mutable:ttmall.ListDeliveryTaskReq.coord)
  return coord_;
}
inline ::ttmall::CoordInfo* ListDeliveryTaskReq::release_coord() {
  // @@protoc_insertion_point(field_release:ttmall.ListDeliveryTaskReq.coord)
  
  ::ttmall::CoordInfo* temp = coord_;
  coord_ = NULL;
  return temp;
}
inline void ListDeliveryTaskReq::set_allocated_coord(::ttmall::CoordInfo* coord) {
  delete coord_;
  coord_ = coord;
  if (coord) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ttmall.ListDeliveryTaskReq.coord)
}

// -------------------------------------------------------------------

// ListDeliveryTaskRep

// repeated .ttmall.WareGroup groups = 1;
inline int ListDeliveryTaskRep::groups_size() const {
  return groups_.size();
}
inline void ListDeliveryTaskRep::clear_groups() {
  groups_.Clear();
}
inline const ::ttmall::WareGroup& ListDeliveryTaskRep::groups(int index) const {
  // @@protoc_insertion_point(field_get:ttmall.ListDeliveryTaskRep.groups)
  return groups_.Get(index);
}
inline ::ttmall::WareGroup* ListDeliveryTaskRep::mutable_groups(int index) {
  // @@protoc_insertion_point(field_mutable:ttmall.ListDeliveryTaskRep.groups)
  return groups_.Mutable(index);
}
inline ::ttmall::WareGroup* ListDeliveryTaskRep::add_groups() {
  // @@protoc_insertion_point(field_add:ttmall.ListDeliveryTaskRep.groups)
  return groups_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ttmall::WareGroup >*
ListDeliveryTaskRep::mutable_groups() {
  // @@protoc_insertion_point(field_mutable_list:ttmall.ListDeliveryTaskRep.groups)
  return &groups_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ttmall::WareGroup >&
ListDeliveryTaskRep::groups() const {
  // @@protoc_insertion_point(field_list:ttmall.ListDeliveryTaskRep.groups)
  return groups_;
}

// int32 total = 2;
inline void ListDeliveryTaskRep::clear_total() {
  total_ = 0;
}
inline ::google::protobuf::int32 ListDeliveryTaskRep::total() const {
  // @@protoc_insertion_point(field_get:ttmall.ListDeliveryTaskRep.total)
  return total_;
}
inline void ListDeliveryTaskRep::set_total(::google::protobuf::int32 value) {
  
  total_ = value;
  // @@protoc_insertion_point(field_set:ttmall.ListDeliveryTaskRep.total)
}

// -------------------------------------------------------------------

// WorkOptReq

// string token = 1;
inline void WorkOptReq::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& WorkOptReq::token() const {
  // @@protoc_insertion_point(field_get:ttmall.WorkOptReq.token)
  return token_.GetNoArena();
}
inline void WorkOptReq::set_token(const ::std::string& value) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ttmall.WorkOptReq.token)
}
#if LANG_CXX11
inline void WorkOptReq::set_token(::std::string&& value) {
  
  token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ttmall.WorkOptReq.token)
}
#endif
inline void WorkOptReq::set_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ttmall.WorkOptReq.token)
}
inline void WorkOptReq::set_token(const char* value, size_t size) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ttmall.WorkOptReq.token)
}
inline ::std::string* WorkOptReq::mutable_token() {
  
  // @@protoc_insertion_point(field_mutable:ttmall.WorkOptReq.token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* WorkOptReq::release_token() {
  // @@protoc_insertion_point(field_release:ttmall.WorkOptReq.token)
  
  return token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void WorkOptReq::set_allocated_token(::std::string* token) {
  if (token != NULL) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:ttmall.WorkOptReq.token)
}

// .ttmall.WorkOptType type = 2;
inline void WorkOptReq::clear_type() {
  type_ = 0;
}
inline ::ttmall::WorkOptType WorkOptReq::type() const {
  // @@protoc_insertion_point(field_get:ttmall.WorkOptReq.type)
  return static_cast< ::ttmall::WorkOptType >(type_);
}
inline void WorkOptReq::set_type(::ttmall::WorkOptType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:ttmall.WorkOptReq.type)
}

// -------------------------------------------------------------------

// WorkOptRep

// .ttmall.WorkOptType type = 1;
inline void WorkOptRep::clear_type() {
  type_ = 0;
}
inline ::ttmall::WorkOptType WorkOptRep::type() const {
  // @@protoc_insertion_point(field_get:ttmall.WorkOptRep.type)
  return static_cast< ::ttmall::WorkOptType >(type_);
}
inline void WorkOptRep::set_type(::ttmall::WorkOptType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:ttmall.WorkOptRep.type)
}

// -------------------------------------------------------------------

// DriverInfo

// string id = 1;
inline void DriverInfo::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DriverInfo::id() const {
  // @@protoc_insertion_point(field_get:ttmall.DriverInfo.id)
  return id_.GetNoArena();
}
inline void DriverInfo::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ttmall.DriverInfo.id)
}
#if LANG_CXX11
inline void DriverInfo::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ttmall.DriverInfo.id)
}
#endif
inline void DriverInfo::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ttmall.DriverInfo.id)
}
inline void DriverInfo::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ttmall.DriverInfo.id)
}
inline ::std::string* DriverInfo::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:ttmall.DriverInfo.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DriverInfo::release_id() {
  // @@protoc_insertion_point(field_release:ttmall.DriverInfo.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DriverInfo::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:ttmall.DriverInfo.id)
}

// string mobile = 2;
inline void DriverInfo::clear_mobile() {
  mobile_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DriverInfo::mobile() const {
  // @@protoc_insertion_point(field_get:ttmall.DriverInfo.mobile)
  return mobile_.GetNoArena();
}
inline void DriverInfo::set_mobile(const ::std::string& value) {
  
  mobile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ttmall.DriverInfo.mobile)
}
#if LANG_CXX11
inline void DriverInfo::set_mobile(::std::string&& value) {
  
  mobile_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ttmall.DriverInfo.mobile)
}
#endif
inline void DriverInfo::set_mobile(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  mobile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ttmall.DriverInfo.mobile)
}
inline void DriverInfo::set_mobile(const char* value, size_t size) {
  
  mobile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ttmall.DriverInfo.mobile)
}
inline ::std::string* DriverInfo::mutable_mobile() {
  
  // @@protoc_insertion_point(field_mutable:ttmall.DriverInfo.mobile)
  return mobile_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DriverInfo::release_mobile() {
  // @@protoc_insertion_point(field_release:ttmall.DriverInfo.mobile)
  
  return mobile_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DriverInfo::set_allocated_mobile(::std::string* mobile) {
  if (mobile != NULL) {
    
  } else {
    
  }
  mobile_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mobile);
  // @@protoc_insertion_point(field_set_allocated:ttmall.DriverInfo.mobile)
}

// bool is_pass = 3;
inline void DriverInfo::clear_is_pass() {
  is_pass_ = false;
}
inline bool DriverInfo::is_pass() const {
  // @@protoc_insertion_point(field_get:ttmall.DriverInfo.is_pass)
  return is_pass_;
}
inline void DriverInfo::set_is_pass(bool value) {
  
  is_pass_ = value;
  // @@protoc_insertion_point(field_set:ttmall.DriverInfo.is_pass)
}

// string name = 4;
inline void DriverInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DriverInfo::name() const {
  // @@protoc_insertion_point(field_get:ttmall.DriverInfo.name)
  return name_.GetNoArena();
}
inline void DriverInfo::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ttmall.DriverInfo.name)
}
#if LANG_CXX11
inline void DriverInfo::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ttmall.DriverInfo.name)
}
#endif
inline void DriverInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ttmall.DriverInfo.name)
}
inline void DriverInfo::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ttmall.DriverInfo.name)
}
inline ::std::string* DriverInfo::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:ttmall.DriverInfo.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DriverInfo::release_name() {
  // @@protoc_insertion_point(field_release:ttmall.DriverInfo.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DriverInfo::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:ttmall.DriverInfo.name)
}

// string id_number = 5;
inline void DriverInfo::clear_id_number() {
  id_number_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DriverInfo::id_number() const {
  // @@protoc_insertion_point(field_get:ttmall.DriverInfo.id_number)
  return id_number_.GetNoArena();
}
inline void DriverInfo::set_id_number(const ::std::string& value) {
  
  id_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ttmall.DriverInfo.id_number)
}
#if LANG_CXX11
inline void DriverInfo::set_id_number(::std::string&& value) {
  
  id_number_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ttmall.DriverInfo.id_number)
}
#endif
inline void DriverInfo::set_id_number(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ttmall.DriverInfo.id_number)
}
inline void DriverInfo::set_id_number(const char* value, size_t size) {
  
  id_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ttmall.DriverInfo.id_number)
}
inline ::std::string* DriverInfo::mutable_id_number() {
  
  // @@protoc_insertion_point(field_mutable:ttmall.DriverInfo.id_number)
  return id_number_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DriverInfo::release_id_number() {
  // @@protoc_insertion_point(field_release:ttmall.DriverInfo.id_number)
  
  return id_number_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DriverInfo::set_allocated_id_number(::std::string* id_number) {
  if (id_number != NULL) {
    
  } else {
    
  }
  id_number_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id_number);
  // @@protoc_insertion_point(field_set_allocated:ttmall.DriverInfo.id_number)
}

// string driving_date = 6;
inline void DriverInfo::clear_driving_date() {
  driving_date_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DriverInfo::driving_date() const {
  // @@protoc_insertion_point(field_get:ttmall.DriverInfo.driving_date)
  return driving_date_.GetNoArena();
}
inline void DriverInfo::set_driving_date(const ::std::string& value) {
  
  driving_date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ttmall.DriverInfo.driving_date)
}
#if LANG_CXX11
inline void DriverInfo::set_driving_date(::std::string&& value) {
  
  driving_date_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ttmall.DriverInfo.driving_date)
}
#endif
inline void DriverInfo::set_driving_date(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  driving_date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ttmall.DriverInfo.driving_date)
}
inline void DriverInfo::set_driving_date(const char* value, size_t size) {
  
  driving_date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ttmall.DriverInfo.driving_date)
}
inline ::std::string* DriverInfo::mutable_driving_date() {
  
  // @@protoc_insertion_point(field_mutable:ttmall.DriverInfo.driving_date)
  return driving_date_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DriverInfo::release_driving_date() {
  // @@protoc_insertion_point(field_release:ttmall.DriverInfo.driving_date)
  
  return driving_date_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DriverInfo::set_allocated_driving_date(::std::string* driving_date) {
  if (driving_date != NULL) {
    
  } else {
    
  }
  driving_date_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), driving_date);
  // @@protoc_insertion_point(field_set_allocated:ttmall.DriverInfo.driving_date)
}

// repeated .ttmall.ImageInfo driving_photos = 7;
inline int DriverInfo::driving_photos_size() const {
  return driving_photos_.size();
}
inline void DriverInfo::clear_driving_photos() {
  driving_photos_.Clear();
}
inline const ::ttmall::ImageInfo& DriverInfo::driving_photos(int index) const {
  // @@protoc_insertion_point(field_get:ttmall.DriverInfo.driving_photos)
  return driving_photos_.Get(index);
}
inline ::ttmall::ImageInfo* DriverInfo::mutable_driving_photos(int index) {
  // @@protoc_insertion_point(field_mutable:ttmall.DriverInfo.driving_photos)
  return driving_photos_.Mutable(index);
}
inline ::ttmall::ImageInfo* DriverInfo::add_driving_photos() {
  // @@protoc_insertion_point(field_add:ttmall.DriverInfo.driving_photos)
  return driving_photos_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ttmall::ImageInfo >*
DriverInfo::mutable_driving_photos() {
  // @@protoc_insertion_point(field_mutable_list:ttmall.DriverInfo.driving_photos)
  return &driving_photos_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ttmall::ImageInfo >&
DriverInfo::driving_photos() const {
  // @@protoc_insertion_point(field_list:ttmall.DriverInfo.driving_photos)
  return driving_photos_;
}

// repeated .ttmall.RegionInfo regions_info = 8;
inline int DriverInfo::regions_info_size() const {
  return regions_info_.size();
}
inline void DriverInfo::clear_regions_info() {
  regions_info_.Clear();
}
inline const ::ttmall::RegionInfo& DriverInfo::regions_info(int index) const {
  // @@protoc_insertion_point(field_get:ttmall.DriverInfo.regions_info)
  return regions_info_.Get(index);
}
inline ::ttmall::RegionInfo* DriverInfo::mutable_regions_info(int index) {
  // @@protoc_insertion_point(field_mutable:ttmall.DriverInfo.regions_info)
  return regions_info_.Mutable(index);
}
inline ::ttmall::RegionInfo* DriverInfo::add_regions_info() {
  // @@protoc_insertion_point(field_add:ttmall.DriverInfo.regions_info)
  return regions_info_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ttmall::RegionInfo >*
DriverInfo::mutable_regions_info() {
  // @@protoc_insertion_point(field_mutable_list:ttmall.DriverInfo.regions_info)
  return &regions_info_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ttmall::RegionInfo >&
DriverInfo::regions_info() const {
  // @@protoc_insertion_point(field_list:ttmall.DriverInfo.regions_info)
  return regions_info_;
}

// repeated .ttmall.ImageInfo car_licences = 9;
inline int DriverInfo::car_licences_size() const {
  return car_licences_.size();
}
inline void DriverInfo::clear_car_licences() {
  car_licences_.Clear();
}
inline const ::ttmall::ImageInfo& DriverInfo::car_licences(int index) const {
  // @@protoc_insertion_point(field_get:ttmall.DriverInfo.car_licences)
  return car_licences_.Get(index);
}
inline ::ttmall::ImageInfo* DriverInfo::mutable_car_licences(int index) {
  // @@protoc_insertion_point(field_mutable:ttmall.DriverInfo.car_licences)
  return car_licences_.Mutable(index);
}
inline ::ttmall::ImageInfo* DriverInfo::add_car_licences() {
  // @@protoc_insertion_point(field_add:ttmall.DriverInfo.car_licences)
  return car_licences_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ttmall::ImageInfo >*
DriverInfo::mutable_car_licences() {
  // @@protoc_insertion_point(field_mutable_list:ttmall.DriverInfo.car_licences)
  return &car_licences_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ttmall::ImageInfo >&
DriverInfo::car_licences() const {
  // @@protoc_insertion_point(field_list:ttmall.DriverInfo.car_licences)
  return car_licences_;
}

// int64 gen_time = 10;
inline void DriverInfo::clear_gen_time() {
  gen_time_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 DriverInfo::gen_time() const {
  // @@protoc_insertion_point(field_get:ttmall.DriverInfo.gen_time)
  return gen_time_;
}
inline void DriverInfo::set_gen_time(::google::protobuf::int64 value) {
  
  gen_time_ = value;
  // @@protoc_insertion_point(field_set:ttmall.DriverInfo.gen_time)
}

// repeated string auditing_msg = 11;
inline int DriverInfo::auditing_msg_size() const {
  return auditing_msg_.size();
}
inline void DriverInfo::clear_auditing_msg() {
  auditing_msg_.Clear();
}
inline const ::std::string& DriverInfo::auditing_msg(int index) const {
  // @@protoc_insertion_point(field_get:ttmall.DriverInfo.auditing_msg)
  return auditing_msg_.Get(index);
}
inline ::std::string* DriverInfo::mutable_auditing_msg(int index) {
  // @@protoc_insertion_point(field_mutable:ttmall.DriverInfo.auditing_msg)
  return auditing_msg_.Mutable(index);
}
inline void DriverInfo::set_auditing_msg(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ttmall.DriverInfo.auditing_msg)
  auditing_msg_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void DriverInfo::set_auditing_msg(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ttmall.DriverInfo.auditing_msg)
  auditing_msg_.Mutable(index)->assign(std::move(value));
}
#endif
inline void DriverInfo::set_auditing_msg(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  auditing_msg_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ttmall.DriverInfo.auditing_msg)
}
inline void DriverInfo::set_auditing_msg(int index, const char* value, size_t size) {
  auditing_msg_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ttmall.DriverInfo.auditing_msg)
}
inline ::std::string* DriverInfo::add_auditing_msg() {
  // @@protoc_insertion_point(field_add_mutable:ttmall.DriverInfo.auditing_msg)
  return auditing_msg_.Add();
}
inline void DriverInfo::add_auditing_msg(const ::std::string& value) {
  auditing_msg_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ttmall.DriverInfo.auditing_msg)
}
#if LANG_CXX11
inline void DriverInfo::add_auditing_msg(::std::string&& value) {
  auditing_msg_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ttmall.DriverInfo.auditing_msg)
}
#endif
inline void DriverInfo::add_auditing_msg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  auditing_msg_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ttmall.DriverInfo.auditing_msg)
}
inline void DriverInfo::add_auditing_msg(const char* value, size_t size) {
  auditing_msg_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ttmall.DriverInfo.auditing_msg)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
DriverInfo::auditing_msg() const {
  // @@protoc_insertion_point(field_list:ttmall.DriverInfo.auditing_msg)
  return auditing_msg_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
DriverInfo::mutable_auditing_msg() {
  // @@protoc_insertion_point(field_mutable_list:ttmall.DriverInfo.auditing_msg)
  return &auditing_msg_;
}

// .ttmall.CarInfo car_info = 12;
inline bool DriverInfo::has_car_info() const {
  return this != internal_default_instance() && car_info_ != NULL;
}
inline void DriverInfo::clear_car_info() {
  if (GetArenaNoVirtual() == NULL && car_info_ != NULL) delete car_info_;
  car_info_ = NULL;
}
inline const ::ttmall::CarInfo& DriverInfo::car_info() const {
  // @@protoc_insertion_point(field_get:ttmall.DriverInfo.car_info)
  return car_info_ != NULL ? *car_info_
                         : *::ttmall::CarInfo::internal_default_instance();
}
inline ::ttmall::CarInfo* DriverInfo::mutable_car_info() {
  
  if (car_info_ == NULL) {
    car_info_ = new ::ttmall::CarInfo;
  }
  // @@protoc_insertion_point(field_mutable:ttmall.DriverInfo.car_info)
  return car_info_;
}
inline ::ttmall::CarInfo* DriverInfo::release_car_info() {
  // @@protoc_insertion_point(field_release:ttmall.DriverInfo.car_info)
  
  ::ttmall::CarInfo* temp = car_info_;
  car_info_ = NULL;
  return temp;
}
inline void DriverInfo::set_allocated_car_info(::ttmall::CarInfo* car_info) {
  delete car_info_;
  car_info_ = car_info;
  if (car_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ttmall.DriverInfo.car_info)
}

// string car_number = 13;
inline void DriverInfo::clear_car_number() {
  car_number_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DriverInfo::car_number() const {
  // @@protoc_insertion_point(field_get:ttmall.DriverInfo.car_number)
  return car_number_.GetNoArena();
}
inline void DriverInfo::set_car_number(const ::std::string& value) {
  
  car_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ttmall.DriverInfo.car_number)
}
#if LANG_CXX11
inline void DriverInfo::set_car_number(::std::string&& value) {
  
  car_number_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ttmall.DriverInfo.car_number)
}
#endif
inline void DriverInfo::set_car_number(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  car_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ttmall.DriverInfo.car_number)
}
inline void DriverInfo::set_car_number(const char* value, size_t size) {
  
  car_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ttmall.DriverInfo.car_number)
}
inline ::std::string* DriverInfo::mutable_car_number() {
  
  // @@protoc_insertion_point(field_mutable:ttmall.DriverInfo.car_number)
  return car_number_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DriverInfo::release_car_number() {
  // @@protoc_insertion_point(field_release:ttmall.DriverInfo.car_number)
  
  return car_number_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DriverInfo::set_allocated_car_number(::std::string* car_number) {
  if (car_number != NULL) {
    
  } else {
    
  }
  car_number_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), car_number);
  // @@protoc_insertion_point(field_set_allocated:ttmall.DriverInfo.car_number)
}

// string car_owner = 14;
inline void DriverInfo::clear_car_owner() {
  car_owner_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DriverInfo::car_owner() const {
  // @@protoc_insertion_point(field_get:ttmall.DriverInfo.car_owner)
  return car_owner_.GetNoArena();
}
inline void DriverInfo::set_car_owner(const ::std::string& value) {
  
  car_owner_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ttmall.DriverInfo.car_owner)
}
#if LANG_CXX11
inline void DriverInfo::set_car_owner(::std::string&& value) {
  
  car_owner_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ttmall.DriverInfo.car_owner)
}
#endif
inline void DriverInfo::set_car_owner(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  car_owner_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ttmall.DriverInfo.car_owner)
}
inline void DriverInfo::set_car_owner(const char* value, size_t size) {
  
  car_owner_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ttmall.DriverInfo.car_owner)
}
inline ::std::string* DriverInfo::mutable_car_owner() {
  
  // @@protoc_insertion_point(field_mutable:ttmall.DriverInfo.car_owner)
  return car_owner_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DriverInfo::release_car_owner() {
  // @@protoc_insertion_point(field_release:ttmall.DriverInfo.car_owner)
  
  return car_owner_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DriverInfo::set_allocated_car_owner(::std::string* car_owner) {
  if (car_owner != NULL) {
    
  } else {
    
  }
  car_owner_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), car_owner);
  // @@protoc_insertion_point(field_set_allocated:ttmall.DriverInfo.car_owner)
}

// .ttmall.WorkOptType work_opt = 15;
inline void DriverInfo::clear_work_opt() {
  work_opt_ = 0;
}
inline ::ttmall::WorkOptType DriverInfo::work_opt() const {
  // @@protoc_insertion_point(field_get:ttmall.DriverInfo.work_opt)
  return static_cast< ::ttmall::WorkOptType >(work_opt_);
}
inline void DriverInfo::set_work_opt(::ttmall::WorkOptType value) {
  
  work_opt_ = value;
  // @@protoc_insertion_point(field_set:ttmall.DriverInfo.work_opt)
}

// bool is_indep = 16;
inline void DriverInfo::clear_is_indep() {
  is_indep_ = false;
}
inline bool DriverInfo::is_indep() const {
  // @@protoc_insertion_point(field_get:ttmall.DriverInfo.is_indep)
  return is_indep_;
}
inline void DriverInfo::set_is_indep(bool value) {
  
  is_indep_ = value;
  // @@protoc_insertion_point(field_set:ttmall.DriverInfo.is_indep)
}

// -------------------------------------------------------------------

// DriverLoginReq

// string mobile = 1;
inline void DriverLoginReq::clear_mobile() {
  mobile_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DriverLoginReq::mobile() const {
  // @@protoc_insertion_point(field_get:ttmall.DriverLoginReq.mobile)
  return mobile_.GetNoArena();
}
inline void DriverLoginReq::set_mobile(const ::std::string& value) {
  
  mobile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ttmall.DriverLoginReq.mobile)
}
#if LANG_CXX11
inline void DriverLoginReq::set_mobile(::std::string&& value) {
  
  mobile_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ttmall.DriverLoginReq.mobile)
}
#endif
inline void DriverLoginReq::set_mobile(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  mobile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ttmall.DriverLoginReq.mobile)
}
inline void DriverLoginReq::set_mobile(const char* value, size_t size) {
  
  mobile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ttmall.DriverLoginReq.mobile)
}
inline ::std::string* DriverLoginReq::mutable_mobile() {
  
  // @@protoc_insertion_point(field_mutable:ttmall.DriverLoginReq.mobile)
  return mobile_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DriverLoginReq::release_mobile() {
  // @@protoc_insertion_point(field_release:ttmall.DriverLoginReq.mobile)
  
  return mobile_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DriverLoginReq::set_allocated_mobile(::std::string* mobile) {
  if (mobile != NULL) {
    
  } else {
    
  }
  mobile_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mobile);
  // @@protoc_insertion_point(field_set_allocated:ttmall.DriverLoginReq.mobile)
}

// string pass = 2;
inline void DriverLoginReq::clear_pass() {
  pass_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DriverLoginReq::pass() const {
  // @@protoc_insertion_point(field_get:ttmall.DriverLoginReq.pass)
  return pass_.GetNoArena();
}
inline void DriverLoginReq::set_pass(const ::std::string& value) {
  
  pass_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ttmall.DriverLoginReq.pass)
}
#if LANG_CXX11
inline void DriverLoginReq::set_pass(::std::string&& value) {
  
  pass_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ttmall.DriverLoginReq.pass)
}
#endif
inline void DriverLoginReq::set_pass(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  pass_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ttmall.DriverLoginReq.pass)
}
inline void DriverLoginReq::set_pass(const char* value, size_t size) {
  
  pass_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ttmall.DriverLoginReq.pass)
}
inline ::std::string* DriverLoginReq::mutable_pass() {
  
  // @@protoc_insertion_point(field_mutable:ttmall.DriverLoginReq.pass)
  return pass_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DriverLoginReq::release_pass() {
  // @@protoc_insertion_point(field_release:ttmall.DriverLoginReq.pass)
  
  return pass_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DriverLoginReq::set_allocated_pass(::std::string* pass) {
  if (pass != NULL) {
    
  } else {
    
  }
  pass_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pass);
  // @@protoc_insertion_point(field_set_allocated:ttmall.DriverLoginReq.pass)
}

// string platform = 3;
inline void DriverLoginReq::clear_platform() {
  platform_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DriverLoginReq::platform() const {
  // @@protoc_insertion_point(field_get:ttmall.DriverLoginReq.platform)
  return platform_.GetNoArena();
}
inline void DriverLoginReq::set_platform(const ::std::string& value) {
  
  platform_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ttmall.DriverLoginReq.platform)
}
#if LANG_CXX11
inline void DriverLoginReq::set_platform(::std::string&& value) {
  
  platform_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ttmall.DriverLoginReq.platform)
}
#endif
inline void DriverLoginReq::set_platform(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  platform_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ttmall.DriverLoginReq.platform)
}
inline void DriverLoginReq::set_platform(const char* value, size_t size) {
  
  platform_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ttmall.DriverLoginReq.platform)
}
inline ::std::string* DriverLoginReq::mutable_platform() {
  
  // @@protoc_insertion_point(field_mutable:ttmall.DriverLoginReq.platform)
  return platform_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DriverLoginReq::release_platform() {
  // @@protoc_insertion_point(field_release:ttmall.DriverLoginReq.platform)
  
  return platform_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DriverLoginReq::set_allocated_platform(::std::string* platform) {
  if (platform != NULL) {
    
  } else {
    
  }
  platform_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), platform);
  // @@protoc_insertion_point(field_set_allocated:ttmall.DriverLoginReq.platform)
}

// -------------------------------------------------------------------

// DriverLoginRep

// string token = 1;
inline void DriverLoginRep::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DriverLoginRep::token() const {
  // @@protoc_insertion_point(field_get:ttmall.DriverLoginRep.token)
  return token_.GetNoArena();
}
inline void DriverLoginRep::set_token(const ::std::string& value) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ttmall.DriverLoginRep.token)
}
#if LANG_CXX11
inline void DriverLoginRep::set_token(::std::string&& value) {
  
  token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ttmall.DriverLoginRep.token)
}
#endif
inline void DriverLoginRep::set_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ttmall.DriverLoginRep.token)
}
inline void DriverLoginRep::set_token(const char* value, size_t size) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ttmall.DriverLoginRep.token)
}
inline ::std::string* DriverLoginRep::mutable_token() {
  
  // @@protoc_insertion_point(field_mutable:ttmall.DriverLoginRep.token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DriverLoginRep::release_token() {
  // @@protoc_insertion_point(field_release:ttmall.DriverLoginRep.token)
  
  return token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DriverLoginRep::set_allocated_token(::std::string* token) {
  if (token != NULL) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:ttmall.DriverLoginRep.token)
}

// .ttmall.DriverInfo info = 2;
inline bool DriverLoginRep::has_info() const {
  return this != internal_default_instance() && info_ != NULL;
}
inline void DriverLoginRep::clear_info() {
  if (GetArenaNoVirtual() == NULL && info_ != NULL) delete info_;
  info_ = NULL;
}
inline const ::ttmall::DriverInfo& DriverLoginRep::info() const {
  // @@protoc_insertion_point(field_get:ttmall.DriverLoginRep.info)
  return info_ != NULL ? *info_
                         : *::ttmall::DriverInfo::internal_default_instance();
}
inline ::ttmall::DriverInfo* DriverLoginRep::mutable_info() {
  
  if (info_ == NULL) {
    info_ = new ::ttmall::DriverInfo;
  }
  // @@protoc_insertion_point(field_mutable:ttmall.DriverLoginRep.info)
  return info_;
}
inline ::ttmall::DriverInfo* DriverLoginRep::release_info() {
  // @@protoc_insertion_point(field_release:ttmall.DriverLoginRep.info)
  
  ::ttmall::DriverInfo* temp = info_;
  info_ = NULL;
  return temp;
}
inline void DriverLoginRep::set_allocated_info(::ttmall::DriverInfo* info) {
  delete info_;
  info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ttmall.DriverLoginRep.info)
}

// -------------------------------------------------------------------

// DriverRegisterReq

// string token = 1;
inline void DriverRegisterReq::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DriverRegisterReq::token() const {
  // @@protoc_insertion_point(field_get:ttmall.DriverRegisterReq.token)
  return token_.GetNoArena();
}
inline void DriverRegisterReq::set_token(const ::std::string& value) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ttmall.DriverRegisterReq.token)
}
#if LANG_CXX11
inline void DriverRegisterReq::set_token(::std::string&& value) {
  
  token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ttmall.DriverRegisterReq.token)
}
#endif
inline void DriverRegisterReq::set_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ttmall.DriverRegisterReq.token)
}
inline void DriverRegisterReq::set_token(const char* value, size_t size) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ttmall.DriverRegisterReq.token)
}
inline ::std::string* DriverRegisterReq::mutable_token() {
  
  // @@protoc_insertion_point(field_mutable:ttmall.DriverRegisterReq.token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DriverRegisterReq::release_token() {
  // @@protoc_insertion_point(field_release:ttmall.DriverRegisterReq.token)
  
  return token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DriverRegisterReq::set_allocated_token(::std::string* token) {
  if (token != NULL) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:ttmall.DriverRegisterReq.token)
}

// string mobile = 2;
inline void DriverRegisterReq::clear_mobile() {
  mobile_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DriverRegisterReq::mobile() const {
  // @@protoc_insertion_point(field_get:ttmall.DriverRegisterReq.mobile)
  return mobile_.GetNoArena();
}
inline void DriverRegisterReq::set_mobile(const ::std::string& value) {
  
  mobile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ttmall.DriverRegisterReq.mobile)
}
#if LANG_CXX11
inline void DriverRegisterReq::set_mobile(::std::string&& value) {
  
  mobile_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ttmall.DriverRegisterReq.mobile)
}
#endif
inline void DriverRegisterReq::set_mobile(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  mobile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ttmall.DriverRegisterReq.mobile)
}
inline void DriverRegisterReq::set_mobile(const char* value, size_t size) {
  
  mobile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ttmall.DriverRegisterReq.mobile)
}
inline ::std::string* DriverRegisterReq::mutable_mobile() {
  
  // @@protoc_insertion_point(field_mutable:ttmall.DriverRegisterReq.mobile)
  return mobile_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DriverRegisterReq::release_mobile() {
  // @@protoc_insertion_point(field_release:ttmall.DriverRegisterReq.mobile)
  
  return mobile_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DriverRegisterReq::set_allocated_mobile(::std::string* mobile) {
  if (mobile != NULL) {
    
  } else {
    
  }
  mobile_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mobile);
  // @@protoc_insertion_point(field_set_allocated:ttmall.DriverRegisterReq.mobile)
}

// string pass = 3;
inline void DriverRegisterReq::clear_pass() {
  pass_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DriverRegisterReq::pass() const {
  // @@protoc_insertion_point(field_get:ttmall.DriverRegisterReq.pass)
  return pass_.GetNoArena();
}
inline void DriverRegisterReq::set_pass(const ::std::string& value) {
  
  pass_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ttmall.DriverRegisterReq.pass)
}
#if LANG_CXX11
inline void DriverRegisterReq::set_pass(::std::string&& value) {
  
  pass_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ttmall.DriverRegisterReq.pass)
}
#endif
inline void DriverRegisterReq::set_pass(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  pass_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ttmall.DriverRegisterReq.pass)
}
inline void DriverRegisterReq::set_pass(const char* value, size_t size) {
  
  pass_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ttmall.DriverRegisterReq.pass)
}
inline ::std::string* DriverRegisterReq::mutable_pass() {
  
  // @@protoc_insertion_point(field_mutable:ttmall.DriverRegisterReq.pass)
  return pass_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DriverRegisterReq::release_pass() {
  // @@protoc_insertion_point(field_release:ttmall.DriverRegisterReq.pass)
  
  return pass_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DriverRegisterReq::set_allocated_pass(::std::string* pass) {
  if (pass != NULL) {
    
  } else {
    
  }
  pass_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pass);
  // @@protoc_insertion_point(field_set_allocated:ttmall.DriverRegisterReq.pass)
}

// string code = 4;
inline void DriverRegisterReq::clear_code() {
  code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DriverRegisterReq::code() const {
  // @@protoc_insertion_point(field_get:ttmall.DriverRegisterReq.code)
  return code_.GetNoArena();
}
inline void DriverRegisterReq::set_code(const ::std::string& value) {
  
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ttmall.DriverRegisterReq.code)
}
#if LANG_CXX11
inline void DriverRegisterReq::set_code(::std::string&& value) {
  
  code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ttmall.DriverRegisterReq.code)
}
#endif
inline void DriverRegisterReq::set_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ttmall.DriverRegisterReq.code)
}
inline void DriverRegisterReq::set_code(const char* value, size_t size) {
  
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ttmall.DriverRegisterReq.code)
}
inline ::std::string* DriverRegisterReq::mutable_code() {
  
  // @@protoc_insertion_point(field_mutable:ttmall.DriverRegisterReq.code)
  return code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DriverRegisterReq::release_code() {
  // @@protoc_insertion_point(field_release:ttmall.DriverRegisterReq.code)
  
  return code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DriverRegisterReq::set_allocated_code(::std::string* code) {
  if (code != NULL) {
    
  } else {
    
  }
  code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), code);
  // @@protoc_insertion_point(field_set_allocated:ttmall.DriverRegisterReq.code)
}

// -------------------------------------------------------------------

// DriverRegisterRep

// string token = 1;
inline void DriverRegisterRep::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DriverRegisterRep::token() const {
  // @@protoc_insertion_point(field_get:ttmall.DriverRegisterRep.token)
  return token_.GetNoArena();
}
inline void DriverRegisterRep::set_token(const ::std::string& value) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ttmall.DriverRegisterRep.token)
}
#if LANG_CXX11
inline void DriverRegisterRep::set_token(::std::string&& value) {
  
  token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ttmall.DriverRegisterRep.token)
}
#endif
inline void DriverRegisterRep::set_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ttmall.DriverRegisterRep.token)
}
inline void DriverRegisterRep::set_token(const char* value, size_t size) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ttmall.DriverRegisterRep.token)
}
inline ::std::string* DriverRegisterRep::mutable_token() {
  
  // @@protoc_insertion_point(field_mutable:ttmall.DriverRegisterRep.token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DriverRegisterRep::release_token() {
  // @@protoc_insertion_point(field_release:ttmall.DriverRegisterRep.token)
  
  return token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DriverRegisterRep::set_allocated_token(::std::string* token) {
  if (token != NULL) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:ttmall.DriverRegisterRep.token)
}

// -------------------------------------------------------------------

// SubmitAuthInfoReq

// string token = 1;
inline void SubmitAuthInfoReq::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SubmitAuthInfoReq::token() const {
  // @@protoc_insertion_point(field_get:ttmall.SubmitAuthInfoReq.token)
  return token_.GetNoArena();
}
inline void SubmitAuthInfoReq::set_token(const ::std::string& value) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ttmall.SubmitAuthInfoReq.token)
}
#if LANG_CXX11
inline void SubmitAuthInfoReq::set_token(::std::string&& value) {
  
  token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ttmall.SubmitAuthInfoReq.token)
}
#endif
inline void SubmitAuthInfoReq::set_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ttmall.SubmitAuthInfoReq.token)
}
inline void SubmitAuthInfoReq::set_token(const char* value, size_t size) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ttmall.SubmitAuthInfoReq.token)
}
inline ::std::string* SubmitAuthInfoReq::mutable_token() {
  
  // @@protoc_insertion_point(field_mutable:ttmall.SubmitAuthInfoReq.token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SubmitAuthInfoReq::release_token() {
  // @@protoc_insertion_point(field_release:ttmall.SubmitAuthInfoReq.token)
  
  return token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SubmitAuthInfoReq::set_allocated_token(::std::string* token) {
  if (token != NULL) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:ttmall.SubmitAuthInfoReq.token)
}

// string name = 2;
inline void SubmitAuthInfoReq::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SubmitAuthInfoReq::name() const {
  // @@protoc_insertion_point(field_get:ttmall.SubmitAuthInfoReq.name)
  return name_.GetNoArena();
}
inline void SubmitAuthInfoReq::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ttmall.SubmitAuthInfoReq.name)
}
#if LANG_CXX11
inline void SubmitAuthInfoReq::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ttmall.SubmitAuthInfoReq.name)
}
#endif
inline void SubmitAuthInfoReq::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ttmall.SubmitAuthInfoReq.name)
}
inline void SubmitAuthInfoReq::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ttmall.SubmitAuthInfoReq.name)
}
inline ::std::string* SubmitAuthInfoReq::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:ttmall.SubmitAuthInfoReq.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SubmitAuthInfoReq::release_name() {
  // @@protoc_insertion_point(field_release:ttmall.SubmitAuthInfoReq.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SubmitAuthInfoReq::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:ttmall.SubmitAuthInfoReq.name)
}

// string id_number = 3;
inline void SubmitAuthInfoReq::clear_id_number() {
  id_number_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SubmitAuthInfoReq::id_number() const {
  // @@protoc_insertion_point(field_get:ttmall.SubmitAuthInfoReq.id_number)
  return id_number_.GetNoArena();
}
inline void SubmitAuthInfoReq::set_id_number(const ::std::string& value) {
  
  id_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ttmall.SubmitAuthInfoReq.id_number)
}
#if LANG_CXX11
inline void SubmitAuthInfoReq::set_id_number(::std::string&& value) {
  
  id_number_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ttmall.SubmitAuthInfoReq.id_number)
}
#endif
inline void SubmitAuthInfoReq::set_id_number(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ttmall.SubmitAuthInfoReq.id_number)
}
inline void SubmitAuthInfoReq::set_id_number(const char* value, size_t size) {
  
  id_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ttmall.SubmitAuthInfoReq.id_number)
}
inline ::std::string* SubmitAuthInfoReq::mutable_id_number() {
  
  // @@protoc_insertion_point(field_mutable:ttmall.SubmitAuthInfoReq.id_number)
  return id_number_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SubmitAuthInfoReq::release_id_number() {
  // @@protoc_insertion_point(field_release:ttmall.SubmitAuthInfoReq.id_number)
  
  return id_number_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SubmitAuthInfoReq::set_allocated_id_number(::std::string* id_number) {
  if (id_number != NULL) {
    
  } else {
    
  }
  id_number_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id_number);
  // @@protoc_insertion_point(field_set_allocated:ttmall.SubmitAuthInfoReq.id_number)
}

// string driving_date = 4;
inline void SubmitAuthInfoReq::clear_driving_date() {
  driving_date_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SubmitAuthInfoReq::driving_date() const {
  // @@protoc_insertion_point(field_get:ttmall.SubmitAuthInfoReq.driving_date)
  return driving_date_.GetNoArena();
}
inline void SubmitAuthInfoReq::set_driving_date(const ::std::string& value) {
  
  driving_date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ttmall.SubmitAuthInfoReq.driving_date)
}
#if LANG_CXX11
inline void SubmitAuthInfoReq::set_driving_date(::std::string&& value) {
  
  driving_date_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ttmall.SubmitAuthInfoReq.driving_date)
}
#endif
inline void SubmitAuthInfoReq::set_driving_date(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  driving_date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ttmall.SubmitAuthInfoReq.driving_date)
}
inline void SubmitAuthInfoReq::set_driving_date(const char* value, size_t size) {
  
  driving_date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ttmall.SubmitAuthInfoReq.driving_date)
}
inline ::std::string* SubmitAuthInfoReq::mutable_driving_date() {
  
  // @@protoc_insertion_point(field_mutable:ttmall.SubmitAuthInfoReq.driving_date)
  return driving_date_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SubmitAuthInfoReq::release_driving_date() {
  // @@protoc_insertion_point(field_release:ttmall.SubmitAuthInfoReq.driving_date)
  
  return driving_date_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SubmitAuthInfoReq::set_allocated_driving_date(::std::string* driving_date) {
  if (driving_date != NULL) {
    
  } else {
    
  }
  driving_date_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), driving_date);
  // @@protoc_insertion_point(field_set_allocated:ttmall.SubmitAuthInfoReq.driving_date)
}

// repeated bytes driving_photos = 5;
inline int SubmitAuthInfoReq::driving_photos_size() const {
  return driving_photos_.size();
}
inline void SubmitAuthInfoReq::clear_driving_photos() {
  driving_photos_.Clear();
}
inline const ::std::string& SubmitAuthInfoReq::driving_photos(int index) const {
  // @@protoc_insertion_point(field_get:ttmall.SubmitAuthInfoReq.driving_photos)
  return driving_photos_.Get(index);
}
inline ::std::string* SubmitAuthInfoReq::mutable_driving_photos(int index) {
  // @@protoc_insertion_point(field_mutable:ttmall.SubmitAuthInfoReq.driving_photos)
  return driving_photos_.Mutable(index);
}
inline void SubmitAuthInfoReq::set_driving_photos(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ttmall.SubmitAuthInfoReq.driving_photos)
  driving_photos_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void SubmitAuthInfoReq::set_driving_photos(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ttmall.SubmitAuthInfoReq.driving_photos)
  driving_photos_.Mutable(index)->assign(std::move(value));
}
#endif
inline void SubmitAuthInfoReq::set_driving_photos(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  driving_photos_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ttmall.SubmitAuthInfoReq.driving_photos)
}
inline void SubmitAuthInfoReq::set_driving_photos(int index, const void* value, size_t size) {
  driving_photos_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ttmall.SubmitAuthInfoReq.driving_photos)
}
inline ::std::string* SubmitAuthInfoReq::add_driving_photos() {
  // @@protoc_insertion_point(field_add_mutable:ttmall.SubmitAuthInfoReq.driving_photos)
  return driving_photos_.Add();
}
inline void SubmitAuthInfoReq::add_driving_photos(const ::std::string& value) {
  driving_photos_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ttmall.SubmitAuthInfoReq.driving_photos)
}
#if LANG_CXX11
inline void SubmitAuthInfoReq::add_driving_photos(::std::string&& value) {
  driving_photos_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ttmall.SubmitAuthInfoReq.driving_photos)
}
#endif
inline void SubmitAuthInfoReq::add_driving_photos(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  driving_photos_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ttmall.SubmitAuthInfoReq.driving_photos)
}
inline void SubmitAuthInfoReq::add_driving_photos(const void* value, size_t size) {
  driving_photos_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ttmall.SubmitAuthInfoReq.driving_photos)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
SubmitAuthInfoReq::driving_photos() const {
  // @@protoc_insertion_point(field_list:ttmall.SubmitAuthInfoReq.driving_photos)
  return driving_photos_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
SubmitAuthInfoReq::mutable_driving_photos() {
  // @@protoc_insertion_point(field_mutable_list:ttmall.SubmitAuthInfoReq.driving_photos)
  return &driving_photos_;
}

// repeated string regions_id = 6;
inline int SubmitAuthInfoReq::regions_id_size() const {
  return regions_id_.size();
}
inline void SubmitAuthInfoReq::clear_regions_id() {
  regions_id_.Clear();
}
inline const ::std::string& SubmitAuthInfoReq::regions_id(int index) const {
  // @@protoc_insertion_point(field_get:ttmall.SubmitAuthInfoReq.regions_id)
  return regions_id_.Get(index);
}
inline ::std::string* SubmitAuthInfoReq::mutable_regions_id(int index) {
  // @@protoc_insertion_point(field_mutable:ttmall.SubmitAuthInfoReq.regions_id)
  return regions_id_.Mutable(index);
}
inline void SubmitAuthInfoReq::set_regions_id(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ttmall.SubmitAuthInfoReq.regions_id)
  regions_id_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void SubmitAuthInfoReq::set_regions_id(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ttmall.SubmitAuthInfoReq.regions_id)
  regions_id_.Mutable(index)->assign(std::move(value));
}
#endif
inline void SubmitAuthInfoReq::set_regions_id(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  regions_id_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ttmall.SubmitAuthInfoReq.regions_id)
}
inline void SubmitAuthInfoReq::set_regions_id(int index, const char* value, size_t size) {
  regions_id_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ttmall.SubmitAuthInfoReq.regions_id)
}
inline ::std::string* SubmitAuthInfoReq::add_regions_id() {
  // @@protoc_insertion_point(field_add_mutable:ttmall.SubmitAuthInfoReq.regions_id)
  return regions_id_.Add();
}
inline void SubmitAuthInfoReq::add_regions_id(const ::std::string& value) {
  regions_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ttmall.SubmitAuthInfoReq.regions_id)
}
#if LANG_CXX11
inline void SubmitAuthInfoReq::add_regions_id(::std::string&& value) {
  regions_id_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ttmall.SubmitAuthInfoReq.regions_id)
}
#endif
inline void SubmitAuthInfoReq::add_regions_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  regions_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ttmall.SubmitAuthInfoReq.regions_id)
}
inline void SubmitAuthInfoReq::add_regions_id(const char* value, size_t size) {
  regions_id_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ttmall.SubmitAuthInfoReq.regions_id)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
SubmitAuthInfoReq::regions_id() const {
  // @@protoc_insertion_point(field_list:ttmall.SubmitAuthInfoReq.regions_id)
  return regions_id_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
SubmitAuthInfoReq::mutable_regions_id() {
  // @@protoc_insertion_point(field_mutable_list:ttmall.SubmitAuthInfoReq.regions_id)
  return &regions_id_;
}

// string car_id = 7;
inline void SubmitAuthInfoReq::clear_car_id() {
  car_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SubmitAuthInfoReq::car_id() const {
  // @@protoc_insertion_point(field_get:ttmall.SubmitAuthInfoReq.car_id)
  return car_id_.GetNoArena();
}
inline void SubmitAuthInfoReq::set_car_id(const ::std::string& value) {
  
  car_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ttmall.SubmitAuthInfoReq.car_id)
}
#if LANG_CXX11
inline void SubmitAuthInfoReq::set_car_id(::std::string&& value) {
  
  car_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ttmall.SubmitAuthInfoReq.car_id)
}
#endif
inline void SubmitAuthInfoReq::set_car_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  car_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ttmall.SubmitAuthInfoReq.car_id)
}
inline void SubmitAuthInfoReq::set_car_id(const char* value, size_t size) {
  
  car_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ttmall.SubmitAuthInfoReq.car_id)
}
inline ::std::string* SubmitAuthInfoReq::mutable_car_id() {
  
  // @@protoc_insertion_point(field_mutable:ttmall.SubmitAuthInfoReq.car_id)
  return car_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SubmitAuthInfoReq::release_car_id() {
  // @@protoc_insertion_point(field_release:ttmall.SubmitAuthInfoReq.car_id)
  
  return car_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SubmitAuthInfoReq::set_allocated_car_id(::std::string* car_id) {
  if (car_id != NULL) {
    
  } else {
    
  }
  car_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), car_id);
  // @@protoc_insertion_point(field_set_allocated:ttmall.SubmitAuthInfoReq.car_id)
}

// string car_number = 8;
inline void SubmitAuthInfoReq::clear_car_number() {
  car_number_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SubmitAuthInfoReq::car_number() const {
  // @@protoc_insertion_point(field_get:ttmall.SubmitAuthInfoReq.car_number)
  return car_number_.GetNoArena();
}
inline void SubmitAuthInfoReq::set_car_number(const ::std::string& value) {
  
  car_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ttmall.SubmitAuthInfoReq.car_number)
}
#if LANG_CXX11
inline void SubmitAuthInfoReq::set_car_number(::std::string&& value) {
  
  car_number_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ttmall.SubmitAuthInfoReq.car_number)
}
#endif
inline void SubmitAuthInfoReq::set_car_number(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  car_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ttmall.SubmitAuthInfoReq.car_number)
}
inline void SubmitAuthInfoReq::set_car_number(const char* value, size_t size) {
  
  car_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ttmall.SubmitAuthInfoReq.car_number)
}
inline ::std::string* SubmitAuthInfoReq::mutable_car_number() {
  
  // @@protoc_insertion_point(field_mutable:ttmall.SubmitAuthInfoReq.car_number)
  return car_number_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SubmitAuthInfoReq::release_car_number() {
  // @@protoc_insertion_point(field_release:ttmall.SubmitAuthInfoReq.car_number)
  
  return car_number_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SubmitAuthInfoReq::set_allocated_car_number(::std::string* car_number) {
  if (car_number != NULL) {
    
  } else {
    
  }
  car_number_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), car_number);
  // @@protoc_insertion_point(field_set_allocated:ttmall.SubmitAuthInfoReq.car_number)
}

// string car_owner = 9;
inline void SubmitAuthInfoReq::clear_car_owner() {
  car_owner_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SubmitAuthInfoReq::car_owner() const {
  // @@protoc_insertion_point(field_get:ttmall.SubmitAuthInfoReq.car_owner)
  return car_owner_.GetNoArena();
}
inline void SubmitAuthInfoReq::set_car_owner(const ::std::string& value) {
  
  car_owner_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ttmall.SubmitAuthInfoReq.car_owner)
}
#if LANG_CXX11
inline void SubmitAuthInfoReq::set_car_owner(::std::string&& value) {
  
  car_owner_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ttmall.SubmitAuthInfoReq.car_owner)
}
#endif
inline void SubmitAuthInfoReq::set_car_owner(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  car_owner_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ttmall.SubmitAuthInfoReq.car_owner)
}
inline void SubmitAuthInfoReq::set_car_owner(const char* value, size_t size) {
  
  car_owner_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ttmall.SubmitAuthInfoReq.car_owner)
}
inline ::std::string* SubmitAuthInfoReq::mutable_car_owner() {
  
  // @@protoc_insertion_point(field_mutable:ttmall.SubmitAuthInfoReq.car_owner)
  return car_owner_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SubmitAuthInfoReq::release_car_owner() {
  // @@protoc_insertion_point(field_release:ttmall.SubmitAuthInfoReq.car_owner)
  
  return car_owner_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SubmitAuthInfoReq::set_allocated_car_owner(::std::string* car_owner) {
  if (car_owner != NULL) {
    
  } else {
    
  }
  car_owner_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), car_owner);
  // @@protoc_insertion_point(field_set_allocated:ttmall.SubmitAuthInfoReq.car_owner)
}

// repeated bytes car_licences = 10;
inline int SubmitAuthInfoReq::car_licences_size() const {
  return car_licences_.size();
}
inline void SubmitAuthInfoReq::clear_car_licences() {
  car_licences_.Clear();
}
inline const ::std::string& SubmitAuthInfoReq::car_licences(int index) const {
  // @@protoc_insertion_point(field_get:ttmall.SubmitAuthInfoReq.car_licences)
  return car_licences_.Get(index);
}
inline ::std::string* SubmitAuthInfoReq::mutable_car_licences(int index) {
  // @@protoc_insertion_point(field_mutable:ttmall.SubmitAuthInfoReq.car_licences)
  return car_licences_.Mutable(index);
}
inline void SubmitAuthInfoReq::set_car_licences(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ttmall.SubmitAuthInfoReq.car_licences)
  car_licences_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void SubmitAuthInfoReq::set_car_licences(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ttmall.SubmitAuthInfoReq.car_licences)
  car_licences_.Mutable(index)->assign(std::move(value));
}
#endif
inline void SubmitAuthInfoReq::set_car_licences(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  car_licences_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ttmall.SubmitAuthInfoReq.car_licences)
}
inline void SubmitAuthInfoReq::set_car_licences(int index, const void* value, size_t size) {
  car_licences_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ttmall.SubmitAuthInfoReq.car_licences)
}
inline ::std::string* SubmitAuthInfoReq::add_car_licences() {
  // @@protoc_insertion_point(field_add_mutable:ttmall.SubmitAuthInfoReq.car_licences)
  return car_licences_.Add();
}
inline void SubmitAuthInfoReq::add_car_licences(const ::std::string& value) {
  car_licences_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ttmall.SubmitAuthInfoReq.car_licences)
}
#if LANG_CXX11
inline void SubmitAuthInfoReq::add_car_licences(::std::string&& value) {
  car_licences_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ttmall.SubmitAuthInfoReq.car_licences)
}
#endif
inline void SubmitAuthInfoReq::add_car_licences(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  car_licences_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ttmall.SubmitAuthInfoReq.car_licences)
}
inline void SubmitAuthInfoReq::add_car_licences(const void* value, size_t size) {
  car_licences_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ttmall.SubmitAuthInfoReq.car_licences)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
SubmitAuthInfoReq::car_licences() const {
  // @@protoc_insertion_point(field_list:ttmall.SubmitAuthInfoReq.car_licences)
  return car_licences_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
SubmitAuthInfoReq::mutable_car_licences() {
  // @@protoc_insertion_point(field_mutable_list:ttmall.SubmitAuthInfoReq.car_licences)
  return &car_licences_;
}

// bool is_indep = 11;
inline void SubmitAuthInfoReq::clear_is_indep() {
  is_indep_ = false;
}
inline bool SubmitAuthInfoReq::is_indep() const {
  // @@protoc_insertion_point(field_get:ttmall.SubmitAuthInfoReq.is_indep)
  return is_indep_;
}
inline void SubmitAuthInfoReq::set_is_indep(bool value) {
  
  is_indep_ = value;
  // @@protoc_insertion_point(field_set:ttmall.SubmitAuthInfoReq.is_indep)
}

// -------------------------------------------------------------------

// SubmitAuthInfoRep

// .ttmall.DriverInfo info = 1;
inline bool SubmitAuthInfoRep::has_info() const {
  return this != internal_default_instance() && info_ != NULL;
}
inline void SubmitAuthInfoRep::clear_info() {
  if (GetArenaNoVirtual() == NULL && info_ != NULL) delete info_;
  info_ = NULL;
}
inline const ::ttmall::DriverInfo& SubmitAuthInfoRep::info() const {
  // @@protoc_insertion_point(field_get:ttmall.SubmitAuthInfoRep.info)
  return info_ != NULL ? *info_
                         : *::ttmall::DriverInfo::internal_default_instance();
}
inline ::ttmall::DriverInfo* SubmitAuthInfoRep::mutable_info() {
  
  if (info_ == NULL) {
    info_ = new ::ttmall::DriverInfo;
  }
  // @@protoc_insertion_point(field_mutable:ttmall.SubmitAuthInfoRep.info)
  return info_;
}
inline ::ttmall::DriverInfo* SubmitAuthInfoRep::release_info() {
  // @@protoc_insertion_point(field_release:ttmall.SubmitAuthInfoRep.info)
  
  ::ttmall::DriverInfo* temp = info_;
  info_ = NULL;
  return temp;
}
inline void SubmitAuthInfoRep::set_allocated_info(::ttmall::DriverInfo* info) {
  delete info_;
  info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ttmall.SubmitAuthInfoRep.info)
}

// -------------------------------------------------------------------

// GetDriverInfoReq

// string token = 1;
inline void GetDriverInfoReq::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetDriverInfoReq::token() const {
  // @@protoc_insertion_point(field_get:ttmall.GetDriverInfoReq.token)
  return token_.GetNoArena();
}
inline void GetDriverInfoReq::set_token(const ::std::string& value) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ttmall.GetDriverInfoReq.token)
}
#if LANG_CXX11
inline void GetDriverInfoReq::set_token(::std::string&& value) {
  
  token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ttmall.GetDriverInfoReq.token)
}
#endif
inline void GetDriverInfoReq::set_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ttmall.GetDriverInfoReq.token)
}
inline void GetDriverInfoReq::set_token(const char* value, size_t size) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ttmall.GetDriverInfoReq.token)
}
inline ::std::string* GetDriverInfoReq::mutable_token() {
  
  // @@protoc_insertion_point(field_mutable:ttmall.GetDriverInfoReq.token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetDriverInfoReq::release_token() {
  // @@protoc_insertion_point(field_release:ttmall.GetDriverInfoReq.token)
  
  return token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetDriverInfoReq::set_allocated_token(::std::string* token) {
  if (token != NULL) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:ttmall.GetDriverInfoReq.token)
}

// -------------------------------------------------------------------

// GetDriverInfoRep

// .ttmall.DriverInfo info = 1;
inline bool GetDriverInfoRep::has_info() const {
  return this != internal_default_instance() && info_ != NULL;
}
inline void GetDriverInfoRep::clear_info() {
  if (GetArenaNoVirtual() == NULL && info_ != NULL) delete info_;
  info_ = NULL;
}
inline const ::ttmall::DriverInfo& GetDriverInfoRep::info() const {
  // @@protoc_insertion_point(field_get:ttmall.GetDriverInfoRep.info)
  return info_ != NULL ? *info_
                         : *::ttmall::DriverInfo::internal_default_instance();
}
inline ::ttmall::DriverInfo* GetDriverInfoRep::mutable_info() {
  
  if (info_ == NULL) {
    info_ = new ::ttmall::DriverInfo;
  }
  // @@protoc_insertion_point(field_mutable:ttmall.GetDriverInfoRep.info)
  return info_;
}
inline ::ttmall::DriverInfo* GetDriverInfoRep::release_info() {
  // @@protoc_insertion_point(field_release:ttmall.GetDriverInfoRep.info)
  
  ::ttmall::DriverInfo* temp = info_;
  info_ = NULL;
  return temp;
}
inline void GetDriverInfoRep::set_allocated_info(::ttmall::DriverInfo* info) {
  delete info_;
  info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ttmall.GetDriverInfoRep.info)
}

// -------------------------------------------------------------------

// UpdateDriverStateReq

// string token = 1;
inline void UpdateDriverStateReq::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UpdateDriverStateReq::token() const {
  // @@protoc_insertion_point(field_get:ttmall.UpdateDriverStateReq.token)
  return token_.GetNoArena();
}
inline void UpdateDriverStateReq::set_token(const ::std::string& value) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ttmall.UpdateDriverStateReq.token)
}
#if LANG_CXX11
inline void UpdateDriverStateReq::set_token(::std::string&& value) {
  
  token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ttmall.UpdateDriverStateReq.token)
}
#endif
inline void UpdateDriverStateReq::set_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ttmall.UpdateDriverStateReq.token)
}
inline void UpdateDriverStateReq::set_token(const char* value, size_t size) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ttmall.UpdateDriverStateReq.token)
}
inline ::std::string* UpdateDriverStateReq::mutable_token() {
  
  // @@protoc_insertion_point(field_mutable:ttmall.UpdateDriverStateReq.token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UpdateDriverStateReq::release_token() {
  // @@protoc_insertion_point(field_release:ttmall.UpdateDriverStateReq.token)
  
  return token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UpdateDriverStateReq::set_allocated_token(::std::string* token) {
  if (token != NULL) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:ttmall.UpdateDriverStateReq.token)
}

// .ttmall.CoordInfo coord = 3;
inline bool UpdateDriverStateReq::has_coord() const {
  return this != internal_default_instance() && coord_ != NULL;
}
inline void UpdateDriverStateReq::clear_coord() {
  if (GetArenaNoVirtual() == NULL && coord_ != NULL) delete coord_;
  coord_ = NULL;
}
inline const ::ttmall::CoordInfo& UpdateDriverStateReq::coord() const {
  // @@protoc_insertion_point(field_get:ttmall.UpdateDriverStateReq.coord)
  return coord_ != NULL ? *coord_
                         : *::ttmall::CoordInfo::internal_default_instance();
}
inline ::ttmall::CoordInfo* UpdateDriverStateReq::mutable_coord() {
  
  if (coord_ == NULL) {
    coord_ = new ::ttmall::CoordInfo;
  }
  // @@protoc_insertion_point(field_mutable:ttmall.UpdateDriverStateReq.coord)
  return coord_;
}
inline ::ttmall::CoordInfo* UpdateDriverStateReq::release_coord() {
  // @@protoc_insertion_point(field_release:ttmall.UpdateDriverStateReq.coord)
  
  ::ttmall::CoordInfo* temp = coord_;
  coord_ = NULL;
  return temp;
}
inline void UpdateDriverStateReq::set_allocated_coord(::ttmall::CoordInfo* coord) {
  delete coord_;
  coord_ = coord;
  if (coord) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ttmall.UpdateDriverStateReq.coord)
}

// -------------------------------------------------------------------

// UpdateDriverStateRep

// -------------------------------------------------------------------

// DeliveryOrderInfoReq

// string token = 1;
inline void DeliveryOrderInfoReq::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeliveryOrderInfoReq::token() const {
  // @@protoc_insertion_point(field_get:ttmall.DeliveryOrderInfoReq.token)
  return token_.GetNoArena();
}
inline void DeliveryOrderInfoReq::set_token(const ::std::string& value) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ttmall.DeliveryOrderInfoReq.token)
}
#if LANG_CXX11
inline void DeliveryOrderInfoReq::set_token(::std::string&& value) {
  
  token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ttmall.DeliveryOrderInfoReq.token)
}
#endif
inline void DeliveryOrderInfoReq::set_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ttmall.DeliveryOrderInfoReq.token)
}
inline void DeliveryOrderInfoReq::set_token(const char* value, size_t size) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ttmall.DeliveryOrderInfoReq.token)
}
inline ::std::string* DeliveryOrderInfoReq::mutable_token() {
  
  // @@protoc_insertion_point(field_mutable:ttmall.DeliveryOrderInfoReq.token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeliveryOrderInfoReq::release_token() {
  // @@protoc_insertion_point(field_release:ttmall.DeliveryOrderInfoReq.token)
  
  return token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeliveryOrderInfoReq::set_allocated_token(::std::string* token) {
  if (token != NULL) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:ttmall.DeliveryOrderInfoReq.token)
}

// string ware_id = 2;
inline void DeliveryOrderInfoReq::clear_ware_id() {
  ware_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeliveryOrderInfoReq::ware_id() const {
  // @@protoc_insertion_point(field_get:ttmall.DeliveryOrderInfoReq.ware_id)
  return ware_id_.GetNoArena();
}
inline void DeliveryOrderInfoReq::set_ware_id(const ::std::string& value) {
  
  ware_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ttmall.DeliveryOrderInfoReq.ware_id)
}
#if LANG_CXX11
inline void DeliveryOrderInfoReq::set_ware_id(::std::string&& value) {
  
  ware_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ttmall.DeliveryOrderInfoReq.ware_id)
}
#endif
inline void DeliveryOrderInfoReq::set_ware_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ware_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ttmall.DeliveryOrderInfoReq.ware_id)
}
inline void DeliveryOrderInfoReq::set_ware_id(const char* value, size_t size) {
  
  ware_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ttmall.DeliveryOrderInfoReq.ware_id)
}
inline ::std::string* DeliveryOrderInfoReq::mutable_ware_id() {
  
  // @@protoc_insertion_point(field_mutable:ttmall.DeliveryOrderInfoReq.ware_id)
  return ware_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeliveryOrderInfoReq::release_ware_id() {
  // @@protoc_insertion_point(field_release:ttmall.DeliveryOrderInfoReq.ware_id)
  
  return ware_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeliveryOrderInfoReq::set_allocated_ware_id(::std::string* ware_id) {
  if (ware_id != NULL) {
    
  } else {
    
  }
  ware_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ware_id);
  // @@protoc_insertion_point(field_set_allocated:ttmall.DeliveryOrderInfoReq.ware_id)
}

// -------------------------------------------------------------------

// DeliveryOrderInfoRep

// repeated .ttmall.DeliveryGoods items = 1;
inline int DeliveryOrderInfoRep::items_size() const {
  return items_.size();
}
inline void DeliveryOrderInfoRep::clear_items() {
  items_.Clear();
}
inline const ::ttmall::DeliveryGoods& DeliveryOrderInfoRep::items(int index) const {
  // @@protoc_insertion_point(field_get:ttmall.DeliveryOrderInfoRep.items)
  return items_.Get(index);
}
inline ::ttmall::DeliveryGoods* DeliveryOrderInfoRep::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:ttmall.DeliveryOrderInfoRep.items)
  return items_.Mutable(index);
}
inline ::ttmall::DeliveryGoods* DeliveryOrderInfoRep::add_items() {
  // @@protoc_insertion_point(field_add:ttmall.DeliveryOrderInfoRep.items)
  return items_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ttmall::DeliveryGoods >*
DeliveryOrderInfoRep::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:ttmall.DeliveryOrderInfoRep.items)
  return &items_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ttmall::DeliveryGoods >&
DeliveryOrderInfoRep::items() const {
  // @@protoc_insertion_point(field_list:ttmall.DeliveryOrderInfoRep.items)
  return items_;
}

// int32 order_count = 2;
inline void DeliveryOrderInfoRep::clear_order_count() {
  order_count_ = 0;
}
inline ::google::protobuf::int32 DeliveryOrderInfoRep::order_count() const {
  // @@protoc_insertion_point(field_get:ttmall.DeliveryOrderInfoRep.order_count)
  return order_count_;
}
inline void DeliveryOrderInfoRep::set_order_count(::google::protobuf::int32 value) {
  
  order_count_ = value;
  // @@protoc_insertion_point(field_set:ttmall.DeliveryOrderInfoRep.order_count)
}

// int32 user_count = 3;
inline void DeliveryOrderInfoRep::clear_user_count() {
  user_count_ = 0;
}
inline ::google::protobuf::int32 DeliveryOrderInfoRep::user_count() const {
  // @@protoc_insertion_point(field_get:ttmall.DeliveryOrderInfoRep.user_count)
  return user_count_;
}
inline void DeliveryOrderInfoRep::set_user_count(::google::protobuf::int32 value) {
  
  user_count_ = value;
  // @@protoc_insertion_point(field_set:ttmall.DeliveryOrderInfoRep.user_count)
}

// int32 goods_count = 4;
inline void DeliveryOrderInfoRep::clear_goods_count() {
  goods_count_ = 0;
}
inline ::google::protobuf::int32 DeliveryOrderInfoRep::goods_count() const {
  // @@protoc_insertion_point(field_get:ttmall.DeliveryOrderInfoRep.goods_count)
  return goods_count_;
}
inline void DeliveryOrderInfoRep::set_goods_count(::google::protobuf::int32 value) {
  
  goods_count_ = value;
  // @@protoc_insertion_point(field_set:ttmall.DeliveryOrderInfoRep.goods_count)
}

// bool is_trans = 5;
inline void DeliveryOrderInfoRep::clear_is_trans() {
  is_trans_ = false;
}
inline bool DeliveryOrderInfoRep::is_trans() const {
  // @@protoc_insertion_point(field_get:ttmall.DeliveryOrderInfoRep.is_trans)
  return is_trans_;
}
inline void DeliveryOrderInfoRep::set_is_trans(bool value) {
  
  is_trans_ = value;
  // @@protoc_insertion_point(field_set:ttmall.DeliveryOrderInfoRep.is_trans)
}

// -------------------------------------------------------------------

// ConfirmDeliveryReq

// string token = 1;
inline void ConfirmDeliveryReq::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ConfirmDeliveryReq::token() const {
  // @@protoc_insertion_point(field_get:ttmall.ConfirmDeliveryReq.token)
  return token_.GetNoArena();
}
inline void ConfirmDeliveryReq::set_token(const ::std::string& value) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ttmall.ConfirmDeliveryReq.token)
}
#if LANG_CXX11
inline void ConfirmDeliveryReq::set_token(::std::string&& value) {
  
  token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ttmall.ConfirmDeliveryReq.token)
}
#endif
inline void ConfirmDeliveryReq::set_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ttmall.ConfirmDeliveryReq.token)
}
inline void ConfirmDeliveryReq::set_token(const char* value, size_t size) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ttmall.ConfirmDeliveryReq.token)
}
inline ::std::string* ConfirmDeliveryReq::mutable_token() {
  
  // @@protoc_insertion_point(field_mutable:ttmall.ConfirmDeliveryReq.token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ConfirmDeliveryReq::release_token() {
  // @@protoc_insertion_point(field_release:ttmall.ConfirmDeliveryReq.token)
  
  return token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ConfirmDeliveryReq::set_allocated_token(::std::string* token) {
  if (token != NULL) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:ttmall.ConfirmDeliveryReq.token)
}

// string ware_id = 2;
inline void ConfirmDeliveryReq::clear_ware_id() {
  ware_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ConfirmDeliveryReq::ware_id() const {
  // @@protoc_insertion_point(field_get:ttmall.ConfirmDeliveryReq.ware_id)
  return ware_id_.GetNoArena();
}
inline void ConfirmDeliveryReq::set_ware_id(const ::std::string& value) {
  
  ware_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ttmall.ConfirmDeliveryReq.ware_id)
}
#if LANG_CXX11
inline void ConfirmDeliveryReq::set_ware_id(::std::string&& value) {
  
  ware_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ttmall.ConfirmDeliveryReq.ware_id)
}
#endif
inline void ConfirmDeliveryReq::set_ware_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ware_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ttmall.ConfirmDeliveryReq.ware_id)
}
inline void ConfirmDeliveryReq::set_ware_id(const char* value, size_t size) {
  
  ware_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ttmall.ConfirmDeliveryReq.ware_id)
}
inline ::std::string* ConfirmDeliveryReq::mutable_ware_id() {
  
  // @@protoc_insertion_point(field_mutable:ttmall.ConfirmDeliveryReq.ware_id)
  return ware_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ConfirmDeliveryReq::release_ware_id() {
  // @@protoc_insertion_point(field_release:ttmall.ConfirmDeliveryReq.ware_id)
  
  return ware_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ConfirmDeliveryReq::set_allocated_ware_id(::std::string* ware_id) {
  if (ware_id != NULL) {
    
  } else {
    
  }
  ware_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ware_id);
  // @@protoc_insertion_point(field_set_allocated:ttmall.ConfirmDeliveryReq.ware_id)
}

// -------------------------------------------------------------------

// ConfirmDeliveryRep

// -------------------------------------------------------------------

// ListDriverOrderReq

// string token = 1;
inline void ListDriverOrderReq::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ListDriverOrderReq::token() const {
  // @@protoc_insertion_point(field_get:ttmall.ListDriverOrderReq.token)
  return token_.GetNoArena();
}
inline void ListDriverOrderReq::set_token(const ::std::string& value) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ttmall.ListDriverOrderReq.token)
}
#if LANG_CXX11
inline void ListDriverOrderReq::set_token(::std::string&& value) {
  
  token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ttmall.ListDriverOrderReq.token)
}
#endif
inline void ListDriverOrderReq::set_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ttmall.ListDriverOrderReq.token)
}
inline void ListDriverOrderReq::set_token(const char* value, size_t size) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ttmall.ListDriverOrderReq.token)
}
inline ::std::string* ListDriverOrderReq::mutable_token() {
  
  // @@protoc_insertion_point(field_mutable:ttmall.ListDriverOrderReq.token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListDriverOrderReq::release_token() {
  // @@protoc_insertion_point(field_release:ttmall.ListDriverOrderReq.token)
  
  return token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListDriverOrderReq::set_allocated_token(::std::string* token) {
  if (token != NULL) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:ttmall.ListDriverOrderReq.token)
}

// .ttmall.ListDriverOrderOpt opt = 2;
inline void ListDriverOrderReq::clear_opt() {
  opt_ = 0;
}
inline ::ttmall::ListDriverOrderOpt ListDriverOrderReq::opt() const {
  // @@protoc_insertion_point(field_get:ttmall.ListDriverOrderReq.opt)
  return static_cast< ::ttmall::ListDriverOrderOpt >(opt_);
}
inline void ListDriverOrderReq::set_opt(::ttmall::ListDriverOrderOpt value) {
  
  opt_ = value;
  // @@protoc_insertion_point(field_set:ttmall.ListDriverOrderReq.opt)
}

// int32 skip = 3;
inline void ListDriverOrderReq::clear_skip() {
  skip_ = 0;
}
inline ::google::protobuf::int32 ListDriverOrderReq::skip() const {
  // @@protoc_insertion_point(field_get:ttmall.ListDriverOrderReq.skip)
  return skip_;
}
inline void ListDriverOrderReq::set_skip(::google::protobuf::int32 value) {
  
  skip_ = value;
  // @@protoc_insertion_point(field_set:ttmall.ListDriverOrderReq.skip)
}

// int32 limit = 4;
inline void ListDriverOrderReq::clear_limit() {
  limit_ = 0;
}
inline ::google::protobuf::int32 ListDriverOrderReq::limit() const {
  // @@protoc_insertion_point(field_get:ttmall.ListDriverOrderReq.limit)
  return limit_;
}
inline void ListDriverOrderReq::set_limit(::google::protobuf::int32 value) {
  
  limit_ = value;
  // @@protoc_insertion_point(field_set:ttmall.ListDriverOrderReq.limit)
}

// int64 beg_time = 5;
inline void ListDriverOrderReq::clear_beg_time() {
  beg_time_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 ListDriverOrderReq::beg_time() const {
  // @@protoc_insertion_point(field_get:ttmall.ListDriverOrderReq.beg_time)
  return beg_time_;
}
inline void ListDriverOrderReq::set_beg_time(::google::protobuf::int64 value) {
  
  beg_time_ = value;
  // @@protoc_insertion_point(field_set:ttmall.ListDriverOrderReq.beg_time)
}

// int64 end_time = 6;
inline void ListDriverOrderReq::clear_end_time() {
  end_time_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 ListDriverOrderReq::end_time() const {
  // @@protoc_insertion_point(field_get:ttmall.ListDriverOrderReq.end_time)
  return end_time_;
}
inline void ListDriverOrderReq::set_end_time(::google::protobuf::int64 value) {
  
  end_time_ = value;
  // @@protoc_insertion_point(field_set:ttmall.ListDriverOrderReq.end_time)
}

// -------------------------------------------------------------------

// ListDriverOrderRep

// repeated .ttmall.DeliveryNode items = 1;
inline int ListDriverOrderRep::items_size() const {
  return items_.size();
}
inline void ListDriverOrderRep::clear_items() {
  items_.Clear();
}
inline const ::ttmall::DeliveryNode& ListDriverOrderRep::items(int index) const {
  // @@protoc_insertion_point(field_get:ttmall.ListDriverOrderRep.items)
  return items_.Get(index);
}
inline ::ttmall::DeliveryNode* ListDriverOrderRep::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:ttmall.ListDriverOrderRep.items)
  return items_.Mutable(index);
}
inline ::ttmall::DeliveryNode* ListDriverOrderRep::add_items() {
  // @@protoc_insertion_point(field_add:ttmall.ListDriverOrderRep.items)
  return items_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ttmall::DeliveryNode >*
ListDriverOrderRep::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:ttmall.ListDriverOrderRep.items)
  return &items_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ttmall::DeliveryNode >&
ListDriverOrderRep::items() const {
  // @@protoc_insertion_point(field_list:ttmall.ListDriverOrderRep.items)
  return items_;
}

// -------------------------------------------------------------------

// SignReceivingReq

// string token = 1;
inline void SignReceivingReq::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SignReceivingReq::token() const {
  // @@protoc_insertion_point(field_get:ttmall.SignReceivingReq.token)
  return token_.GetNoArena();
}
inline void SignReceivingReq::set_token(const ::std::string& value) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ttmall.SignReceivingReq.token)
}
#if LANG_CXX11
inline void SignReceivingReq::set_token(::std::string&& value) {
  
  token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ttmall.SignReceivingReq.token)
}
#endif
inline void SignReceivingReq::set_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ttmall.SignReceivingReq.token)
}
inline void SignReceivingReq::set_token(const char* value, size_t size) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ttmall.SignReceivingReq.token)
}
inline ::std::string* SignReceivingReq::mutable_token() {
  
  // @@protoc_insertion_point(field_mutable:ttmall.SignReceivingReq.token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SignReceivingReq::release_token() {
  // @@protoc_insertion_point(field_release:ttmall.SignReceivingReq.token)
  
  return token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SignReceivingReq::set_allocated_token(::std::string* token) {
  if (token != NULL) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:ttmall.SignReceivingReq.token)
}

// string id = 2;
inline void SignReceivingReq::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SignReceivingReq::id() const {
  // @@protoc_insertion_point(field_get:ttmall.SignReceivingReq.id)
  return id_.GetNoArena();
}
inline void SignReceivingReq::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ttmall.SignReceivingReq.id)
}
#if LANG_CXX11
inline void SignReceivingReq::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ttmall.SignReceivingReq.id)
}
#endif
inline void SignReceivingReq::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ttmall.SignReceivingReq.id)
}
inline void SignReceivingReq::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ttmall.SignReceivingReq.id)
}
inline ::std::string* SignReceivingReq::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:ttmall.SignReceivingReq.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SignReceivingReq::release_id() {
  // @@protoc_insertion_point(field_release:ttmall.SignReceivingReq.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SignReceivingReq::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:ttmall.SignReceivingReq.id)
}

// bool is_exp = 3;
inline void SignReceivingReq::clear_is_exp() {
  is_exp_ = false;
}
inline bool SignReceivingReq::is_exp() const {
  // @@protoc_insertion_point(field_get:ttmall.SignReceivingReq.is_exp)
  return is_exp_;
}
inline void SignReceivingReq::set_is_exp(bool value) {
  
  is_exp_ = value;
  // @@protoc_insertion_point(field_set:ttmall.SignReceivingReq.is_exp)
}

// string exp_desc = 4;
inline void SignReceivingReq::clear_exp_desc() {
  exp_desc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SignReceivingReq::exp_desc() const {
  // @@protoc_insertion_point(field_get:ttmall.SignReceivingReq.exp_desc)
  return exp_desc_.GetNoArena();
}
inline void SignReceivingReq::set_exp_desc(const ::std::string& value) {
  
  exp_desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ttmall.SignReceivingReq.exp_desc)
}
#if LANG_CXX11
inline void SignReceivingReq::set_exp_desc(::std::string&& value) {
  
  exp_desc_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ttmall.SignReceivingReq.exp_desc)
}
#endif
inline void SignReceivingReq::set_exp_desc(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  exp_desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ttmall.SignReceivingReq.exp_desc)
}
inline void SignReceivingReq::set_exp_desc(const char* value, size_t size) {
  
  exp_desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ttmall.SignReceivingReq.exp_desc)
}
inline ::std::string* SignReceivingReq::mutable_exp_desc() {
  
  // @@protoc_insertion_point(field_mutable:ttmall.SignReceivingReq.exp_desc)
  return exp_desc_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SignReceivingReq::release_exp_desc() {
  // @@protoc_insertion_point(field_release:ttmall.SignReceivingReq.exp_desc)
  
  return exp_desc_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SignReceivingReq::set_allocated_exp_desc(::std::string* exp_desc) {
  if (exp_desc != NULL) {
    
  } else {
    
  }
  exp_desc_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exp_desc);
  // @@protoc_insertion_point(field_set_allocated:ttmall.SignReceivingReq.exp_desc)
}

// string suggest = 5;
inline void SignReceivingReq::clear_suggest() {
  suggest_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SignReceivingReq::suggest() const {
  // @@protoc_insertion_point(field_get:ttmall.SignReceivingReq.suggest)
  return suggest_.GetNoArena();
}
inline void SignReceivingReq::set_suggest(const ::std::string& value) {
  
  suggest_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ttmall.SignReceivingReq.suggest)
}
#if LANG_CXX11
inline void SignReceivingReq::set_suggest(::std::string&& value) {
  
  suggest_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ttmall.SignReceivingReq.suggest)
}
#endif
inline void SignReceivingReq::set_suggest(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  suggest_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ttmall.SignReceivingReq.suggest)
}
inline void SignReceivingReq::set_suggest(const char* value, size_t size) {
  
  suggest_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ttmall.SignReceivingReq.suggest)
}
inline ::std::string* SignReceivingReq::mutable_suggest() {
  
  // @@protoc_insertion_point(field_mutable:ttmall.SignReceivingReq.suggest)
  return suggest_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SignReceivingReq::release_suggest() {
  // @@protoc_insertion_point(field_release:ttmall.SignReceivingReq.suggest)
  
  return suggest_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SignReceivingReq::set_allocated_suggest(::std::string* suggest) {
  if (suggest != NULL) {
    
  } else {
    
  }
  suggest_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), suggest);
  // @@protoc_insertion_point(field_set_allocated:ttmall.SignReceivingReq.suggest)
}

// string mark = 6;
inline void SignReceivingReq::clear_mark() {
  mark_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SignReceivingReq::mark() const {
  // @@protoc_insertion_point(field_get:ttmall.SignReceivingReq.mark)
  return mark_.GetNoArena();
}
inline void SignReceivingReq::set_mark(const ::std::string& value) {
  
  mark_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ttmall.SignReceivingReq.mark)
}
#if LANG_CXX11
inline void SignReceivingReq::set_mark(::std::string&& value) {
  
  mark_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ttmall.SignReceivingReq.mark)
}
#endif
inline void SignReceivingReq::set_mark(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  mark_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ttmall.SignReceivingReq.mark)
}
inline void SignReceivingReq::set_mark(const char* value, size_t size) {
  
  mark_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ttmall.SignReceivingReq.mark)
}
inline ::std::string* SignReceivingReq::mutable_mark() {
  
  // @@protoc_insertion_point(field_mutable:ttmall.SignReceivingReq.mark)
  return mark_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SignReceivingReq::release_mark() {
  // @@protoc_insertion_point(field_release:ttmall.SignReceivingReq.mark)
  
  return mark_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SignReceivingReq::set_allocated_mark(::std::string* mark) {
  if (mark != NULL) {
    
  } else {
    
  }
  mark_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mark);
  // @@protoc_insertion_point(field_set_allocated:ttmall.SignReceivingReq.mark)
}

// repeated bytes images = 7;
inline int SignReceivingReq::images_size() const {
  return images_.size();
}
inline void SignReceivingReq::clear_images() {
  images_.Clear();
}
inline const ::std::string& SignReceivingReq::images(int index) const {
  // @@protoc_insertion_point(field_get:ttmall.SignReceivingReq.images)
  return images_.Get(index);
}
inline ::std::string* SignReceivingReq::mutable_images(int index) {
  // @@protoc_insertion_point(field_mutable:ttmall.SignReceivingReq.images)
  return images_.Mutable(index);
}
inline void SignReceivingReq::set_images(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ttmall.SignReceivingReq.images)
  images_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void SignReceivingReq::set_images(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ttmall.SignReceivingReq.images)
  images_.Mutable(index)->assign(std::move(value));
}
#endif
inline void SignReceivingReq::set_images(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  images_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ttmall.SignReceivingReq.images)
}
inline void SignReceivingReq::set_images(int index, const void* value, size_t size) {
  images_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ttmall.SignReceivingReq.images)
}
inline ::std::string* SignReceivingReq::add_images() {
  // @@protoc_insertion_point(field_add_mutable:ttmall.SignReceivingReq.images)
  return images_.Add();
}
inline void SignReceivingReq::add_images(const ::std::string& value) {
  images_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ttmall.SignReceivingReq.images)
}
#if LANG_CXX11
inline void SignReceivingReq::add_images(::std::string&& value) {
  images_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ttmall.SignReceivingReq.images)
}
#endif
inline void SignReceivingReq::add_images(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  images_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ttmall.SignReceivingReq.images)
}
inline void SignReceivingReq::add_images(const void* value, size_t size) {
  images_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ttmall.SignReceivingReq.images)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
SignReceivingReq::images() const {
  // @@protoc_insertion_point(field_list:ttmall.SignReceivingReq.images)
  return images_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
SignReceivingReq::mutable_images() {
  // @@protoc_insertion_point(field_mutable_list:ttmall.SignReceivingReq.images)
  return &images_;
}

// -------------------------------------------------------------------

// SignReceivingRep

// string id = 1;
inline void SignReceivingRep::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SignReceivingRep::id() const {
  // @@protoc_insertion_point(field_get:ttmall.SignReceivingRep.id)
  return id_.GetNoArena();
}
inline void SignReceivingRep::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ttmall.SignReceivingRep.id)
}
#if LANG_CXX11
inline void SignReceivingRep::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ttmall.SignReceivingRep.id)
}
#endif
inline void SignReceivingRep::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ttmall.SignReceivingRep.id)
}
inline void SignReceivingRep::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ttmall.SignReceivingRep.id)
}
inline ::std::string* SignReceivingRep::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:ttmall.SignReceivingRep.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SignReceivingRep::release_id() {
  // @@protoc_insertion_point(field_release:ttmall.SignReceivingRep.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SignReceivingRep::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:ttmall.SignReceivingRep.id)
}

// -------------------------------------------------------------------

// UpdateDriverPassReq

// string token = 1;
inline void UpdateDriverPassReq::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UpdateDriverPassReq::token() const {
  // @@protoc_insertion_point(field_get:ttmall.UpdateDriverPassReq.token)
  return token_.GetNoArena();
}
inline void UpdateDriverPassReq::set_token(const ::std::string& value) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ttmall.UpdateDriverPassReq.token)
}
#if LANG_CXX11
inline void UpdateDriverPassReq::set_token(::std::string&& value) {
  
  token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ttmall.UpdateDriverPassReq.token)
}
#endif
inline void UpdateDriverPassReq::set_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ttmall.UpdateDriverPassReq.token)
}
inline void UpdateDriverPassReq::set_token(const char* value, size_t size) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ttmall.UpdateDriverPassReq.token)
}
inline ::std::string* UpdateDriverPassReq::mutable_token() {
  
  // @@protoc_insertion_point(field_mutable:ttmall.UpdateDriverPassReq.token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UpdateDriverPassReq::release_token() {
  // @@protoc_insertion_point(field_release:ttmall.UpdateDriverPassReq.token)
  
  return token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UpdateDriverPassReq::set_allocated_token(::std::string* token) {
  if (token != NULL) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:ttmall.UpdateDriverPassReq.token)
}

// string code = 2;
inline void UpdateDriverPassReq::clear_code() {
  code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UpdateDriverPassReq::code() const {
  // @@protoc_insertion_point(field_get:ttmall.UpdateDriverPassReq.code)
  return code_.GetNoArena();
}
inline void UpdateDriverPassReq::set_code(const ::std::string& value) {
  
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ttmall.UpdateDriverPassReq.code)
}
#if LANG_CXX11
inline void UpdateDriverPassReq::set_code(::std::string&& value) {
  
  code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ttmall.UpdateDriverPassReq.code)
}
#endif
inline void UpdateDriverPassReq::set_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ttmall.UpdateDriverPassReq.code)
}
inline void UpdateDriverPassReq::set_code(const char* value, size_t size) {
  
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ttmall.UpdateDriverPassReq.code)
}
inline ::std::string* UpdateDriverPassReq::mutable_code() {
  
  // @@protoc_insertion_point(field_mutable:ttmall.UpdateDriverPassReq.code)
  return code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UpdateDriverPassReq::release_code() {
  // @@protoc_insertion_point(field_release:ttmall.UpdateDriverPassReq.code)
  
  return code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UpdateDriverPassReq::set_allocated_code(::std::string* code) {
  if (code != NULL) {
    
  } else {
    
  }
  code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), code);
  // @@protoc_insertion_point(field_set_allocated:ttmall.UpdateDriverPassReq.code)
}

// string pass = 3;
inline void UpdateDriverPassReq::clear_pass() {
  pass_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UpdateDriverPassReq::pass() const {
  // @@protoc_insertion_point(field_get:ttmall.UpdateDriverPassReq.pass)
  return pass_.GetNoArena();
}
inline void UpdateDriverPassReq::set_pass(const ::std::string& value) {
  
  pass_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ttmall.UpdateDriverPassReq.pass)
}
#if LANG_CXX11
inline void UpdateDriverPassReq::set_pass(::std::string&& value) {
  
  pass_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ttmall.UpdateDriverPassReq.pass)
}
#endif
inline void UpdateDriverPassReq::set_pass(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  pass_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ttmall.UpdateDriverPassReq.pass)
}
inline void UpdateDriverPassReq::set_pass(const char* value, size_t size) {
  
  pass_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ttmall.UpdateDriverPassReq.pass)
}
inline ::std::string* UpdateDriverPassReq::mutable_pass() {
  
  // @@protoc_insertion_point(field_mutable:ttmall.UpdateDriverPassReq.pass)
  return pass_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UpdateDriverPassReq::release_pass() {
  // @@protoc_insertion_point(field_release:ttmall.UpdateDriverPassReq.pass)
  
  return pass_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UpdateDriverPassReq::set_allocated_pass(::std::string* pass) {
  if (pass != NULL) {
    
  } else {
    
  }
  pass_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pass);
  // @@protoc_insertion_point(field_set_allocated:ttmall.UpdateDriverPassReq.pass)
}

// -------------------------------------------------------------------

// UpdateDriverPassRep

// .ttmall.DriverInfo info = 1;
inline bool UpdateDriverPassRep::has_info() const {
  return this != internal_default_instance() && info_ != NULL;
}
inline void UpdateDriverPassRep::clear_info() {
  if (GetArenaNoVirtual() == NULL && info_ != NULL) delete info_;
  info_ = NULL;
}
inline const ::ttmall::DriverInfo& UpdateDriverPassRep::info() const {
  // @@protoc_insertion_point(field_get:ttmall.UpdateDriverPassRep.info)
  return info_ != NULL ? *info_
                         : *::ttmall::DriverInfo::internal_default_instance();
}
inline ::ttmall::DriverInfo* UpdateDriverPassRep::mutable_info() {
  
  if (info_ == NULL) {
    info_ = new ::ttmall::DriverInfo;
  }
  // @@protoc_insertion_point(field_mutable:ttmall.UpdateDriverPassRep.info)
  return info_;
}
inline ::ttmall::DriverInfo* UpdateDriverPassRep::release_info() {
  // @@protoc_insertion_point(field_release:ttmall.UpdateDriverPassRep.info)
  
  ::ttmall::DriverInfo* temp = info_;
  info_ = NULL;
  return temp;
}
inline void UpdateDriverPassRep::set_allocated_info(::ttmall::DriverInfo* info) {
  delete info_;
  info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ttmall.UpdateDriverPassRep.info)
}

// -------------------------------------------------------------------

// UpdateDriverMobileReq

// string login_token = 1;
inline void UpdateDriverMobileReq::clear_login_token() {
  login_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UpdateDriverMobileReq::login_token() const {
  // @@protoc_insertion_point(field_get:ttmall.UpdateDriverMobileReq.login_token)
  return login_token_.GetNoArena();
}
inline void UpdateDriverMobileReq::set_login_token(const ::std::string& value) {
  
  login_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ttmall.UpdateDriverMobileReq.login_token)
}
#if LANG_CXX11
inline void UpdateDriverMobileReq::set_login_token(::std::string&& value) {
  
  login_token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ttmall.UpdateDriverMobileReq.login_token)
}
#endif
inline void UpdateDriverMobileReq::set_login_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  login_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ttmall.UpdateDriverMobileReq.login_token)
}
inline void UpdateDriverMobileReq::set_login_token(const char* value, size_t size) {
  
  login_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ttmall.UpdateDriverMobileReq.login_token)
}
inline ::std::string* UpdateDriverMobileReq::mutable_login_token() {
  
  // @@protoc_insertion_point(field_mutable:ttmall.UpdateDriverMobileReq.login_token)
  return login_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UpdateDriverMobileReq::release_login_token() {
  // @@protoc_insertion_point(field_release:ttmall.UpdateDriverMobileReq.login_token)
  
  return login_token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UpdateDriverMobileReq::set_allocated_login_token(::std::string* login_token) {
  if (login_token != NULL) {
    
  } else {
    
  }
  login_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), login_token);
  // @@protoc_insertion_point(field_set_allocated:ttmall.UpdateDriverMobileReq.login_token)
}

// string login_pass = 2;
inline void UpdateDriverMobileReq::clear_login_pass() {
  login_pass_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UpdateDriverMobileReq::login_pass() const {
  // @@protoc_insertion_point(field_get:ttmall.UpdateDriverMobileReq.login_pass)
  return login_pass_.GetNoArena();
}
inline void UpdateDriverMobileReq::set_login_pass(const ::std::string& value) {
  
  login_pass_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ttmall.UpdateDriverMobileReq.login_pass)
}
#if LANG_CXX11
inline void UpdateDriverMobileReq::set_login_pass(::std::string&& value) {
  
  login_pass_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ttmall.UpdateDriverMobileReq.login_pass)
}
#endif
inline void UpdateDriverMobileReq::set_login_pass(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  login_pass_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ttmall.UpdateDriverMobileReq.login_pass)
}
inline void UpdateDriverMobileReq::set_login_pass(const char* value, size_t size) {
  
  login_pass_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ttmall.UpdateDriverMobileReq.login_pass)
}
inline ::std::string* UpdateDriverMobileReq::mutable_login_pass() {
  
  // @@protoc_insertion_point(field_mutable:ttmall.UpdateDriverMobileReq.login_pass)
  return login_pass_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UpdateDriverMobileReq::release_login_pass() {
  // @@protoc_insertion_point(field_release:ttmall.UpdateDriverMobileReq.login_pass)
  
  return login_pass_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UpdateDriverMobileReq::set_allocated_login_pass(::std::string* login_pass) {
  if (login_pass != NULL) {
    
  } else {
    
  }
  login_pass_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), login_pass);
  // @@protoc_insertion_point(field_set_allocated:ttmall.UpdateDriverMobileReq.login_pass)
}

// string mobile_token = 3;
inline void UpdateDriverMobileReq::clear_mobile_token() {
  mobile_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UpdateDriverMobileReq::mobile_token() const {
  // @@protoc_insertion_point(field_get:ttmall.UpdateDriverMobileReq.mobile_token)
  return mobile_token_.GetNoArena();
}
inline void UpdateDriverMobileReq::set_mobile_token(const ::std::string& value) {
  
  mobile_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ttmall.UpdateDriverMobileReq.mobile_token)
}
#if LANG_CXX11
inline void UpdateDriverMobileReq::set_mobile_token(::std::string&& value) {
  
  mobile_token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ttmall.UpdateDriverMobileReq.mobile_token)
}
#endif
inline void UpdateDriverMobileReq::set_mobile_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  mobile_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ttmall.UpdateDriverMobileReq.mobile_token)
}
inline void UpdateDriverMobileReq::set_mobile_token(const char* value, size_t size) {
  
  mobile_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ttmall.UpdateDriverMobileReq.mobile_token)
}
inline ::std::string* UpdateDriverMobileReq::mutable_mobile_token() {
  
  // @@protoc_insertion_point(field_mutable:ttmall.UpdateDriverMobileReq.mobile_token)
  return mobile_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UpdateDriverMobileReq::release_mobile_token() {
  // @@protoc_insertion_point(field_release:ttmall.UpdateDriverMobileReq.mobile_token)
  
  return mobile_token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UpdateDriverMobileReq::set_allocated_mobile_token(::std::string* mobile_token) {
  if (mobile_token != NULL) {
    
  } else {
    
  }
  mobile_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mobile_token);
  // @@protoc_insertion_point(field_set_allocated:ttmall.UpdateDriverMobileReq.mobile_token)
}

// string mobile_code = 4;
inline void UpdateDriverMobileReq::clear_mobile_code() {
  mobile_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UpdateDriverMobileReq::mobile_code() const {
  // @@protoc_insertion_point(field_get:ttmall.UpdateDriverMobileReq.mobile_code)
  return mobile_code_.GetNoArena();
}
inline void UpdateDriverMobileReq::set_mobile_code(const ::std::string& value) {
  
  mobile_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ttmall.UpdateDriverMobileReq.mobile_code)
}
#if LANG_CXX11
inline void UpdateDriverMobileReq::set_mobile_code(::std::string&& value) {
  
  mobile_code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ttmall.UpdateDriverMobileReq.mobile_code)
}
#endif
inline void UpdateDriverMobileReq::set_mobile_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  mobile_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ttmall.UpdateDriverMobileReq.mobile_code)
}
inline void UpdateDriverMobileReq::set_mobile_code(const char* value, size_t size) {
  
  mobile_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ttmall.UpdateDriverMobileReq.mobile_code)
}
inline ::std::string* UpdateDriverMobileReq::mutable_mobile_code() {
  
  // @@protoc_insertion_point(field_mutable:ttmall.UpdateDriverMobileReq.mobile_code)
  return mobile_code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UpdateDriverMobileReq::release_mobile_code() {
  // @@protoc_insertion_point(field_release:ttmall.UpdateDriverMobileReq.mobile_code)
  
  return mobile_code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UpdateDriverMobileReq::set_allocated_mobile_code(::std::string* mobile_code) {
  if (mobile_code != NULL) {
    
  } else {
    
  }
  mobile_code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mobile_code);
  // @@protoc_insertion_point(field_set_allocated:ttmall.UpdateDriverMobileReq.mobile_code)
}

// -------------------------------------------------------------------

// UpdateDriverMobileRep

// .ttmall.DriverInfo info = 1;
inline bool UpdateDriverMobileRep::has_info() const {
  return this != internal_default_instance() && info_ != NULL;
}
inline void UpdateDriverMobileRep::clear_info() {
  if (GetArenaNoVirtual() == NULL && info_ != NULL) delete info_;
  info_ = NULL;
}
inline const ::ttmall::DriverInfo& UpdateDriverMobileRep::info() const {
  // @@protoc_insertion_point(field_get:ttmall.UpdateDriverMobileRep.info)
  return info_ != NULL ? *info_
                         : *::ttmall::DriverInfo::internal_default_instance();
}
inline ::ttmall::DriverInfo* UpdateDriverMobileRep::mutable_info() {
  
  if (info_ == NULL) {
    info_ = new ::ttmall::DriverInfo;
  }
  // @@protoc_insertion_point(field_mutable:ttmall.UpdateDriverMobileRep.info)
  return info_;
}
inline ::ttmall::DriverInfo* UpdateDriverMobileRep::release_info() {
  // @@protoc_insertion_point(field_release:ttmall.UpdateDriverMobileRep.info)
  
  ::ttmall::DriverInfo* temp = info_;
  info_ = NULL;
  return temp;
}
inline void UpdateDriverMobileRep::set_allocated_info(::ttmall::DriverInfo* info) {
  delete info_;
  info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ttmall.UpdateDriverMobileRep.info)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace ttmall

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::ttmall::DeliveryState> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ttmall::DeliveryState>() {
  return ::ttmall::DeliveryState_descriptor();
}
template <> struct is_proto_enum< ::ttmall::WorkOptType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ttmall::WorkOptType>() {
  return ::ttmall::WorkOptType_descriptor();
}
template <> struct is_proto_enum< ::ttmall::ListDriverOrderOpt> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ttmall::ListDriverOrderOpt>() {
  return ::ttmall::ListDriverOrderOpt_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_driver_2eproto__INCLUDED
