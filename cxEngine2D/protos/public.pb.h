// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: public.proto

#ifndef PROTOBUF_public_2eproto__INCLUDED
#define PROTOBUF_public_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace ttmall {
class AddressInfo;
class AddressInfoDefaultTypeInternal;
extern AddressInfoDefaultTypeInternal _AddressInfo_default_instance_;
class AttrGroup;
class AttrGroupDefaultTypeInternal;
extern AttrGroupDefaultTypeInternal _AttrGroup_default_instance_;
class AttrInfo;
class AttrInfoDefaultTypeInternal;
extern AttrInfoDefaultTypeInternal _AttrInfo_default_instance_;
class BrandInfo;
class BrandInfoDefaultTypeInternal;
extern BrandInfoDefaultTypeInternal _BrandInfo_default_instance_;
class CarInfo;
class CarInfoDefaultTypeInternal;
extern CarInfoDefaultTypeInternal _CarInfo_default_instance_;
class CheckUpdateRep;
class CheckUpdateRepDefaultTypeInternal;
extern CheckUpdateRepDefaultTypeInternal _CheckUpdateRep_default_instance_;
class CheckUpdateReq;
class CheckUpdateReqDefaultTypeInternal;
extern CheckUpdateReqDefaultTypeInternal _CheckUpdateReq_default_instance_;
class CoordInfo;
class CoordInfoDefaultTypeInternal;
extern CoordInfoDefaultTypeInternal _CoordInfo_default_instance_;
class CouponInfo;
class CouponInfoDefaultTypeInternal;
extern CouponInfoDefaultTypeInternal _CouponInfo_default_instance_;
class DeleteMessageRep;
class DeleteMessageRepDefaultTypeInternal;
extern DeleteMessageRepDefaultTypeInternal _DeleteMessageRep_default_instance_;
class DeleteMessageReq;
class DeleteMessageReqDefaultTypeInternal;
extern DeleteMessageReqDefaultTypeInternal _DeleteMessageReq_default_instance_;
class ExtInfo;
class ExtInfoDefaultTypeInternal;
extern ExtInfoDefaultTypeInternal _ExtInfo_default_instance_;
class GetNewMessageRep;
class GetNewMessageRepDefaultTypeInternal;
extern GetNewMessageRepDefaultTypeInternal _GetNewMessageRep_default_instance_;
class GetNewMessageReq;
class GetNewMessageReqDefaultTypeInternal;
extern GetNewMessageReqDefaultTypeInternal _GetNewMessageReq_default_instance_;
class GoodsInfo;
class GoodsInfoDefaultTypeInternal;
extern GoodsInfoDefaultTypeInternal _GoodsInfo_default_instance_;
class GoodsInfo_AttrsEntry;
class GoodsInfo_AttrsEntryDefaultTypeInternal;
extern GoodsInfo_AttrsEntryDefaultTypeInternal _GoodsInfo_AttrsEntry_default_instance_;
class GoodsInfo_MapsEntry;
class GoodsInfo_MapsEntryDefaultTypeInternal;
extern GoodsInfo_MapsEntryDefaultTypeInternal _GoodsInfo_MapsEntry_default_instance_;
class GoodsInfo_PricesEntry;
class GoodsInfo_PricesEntryDefaultTypeInternal;
extern GoodsInfo_PricesEntryDefaultTypeInternal _GoodsInfo_PricesEntry_default_instance_;
class ImageInfo;
class ImageInfoDefaultTypeInternal;
extern ImageInfoDefaultTypeInternal _ImageInfo_default_instance_;
class IndexAd;
class IndexAdDefaultTypeInternal;
extern IndexAdDefaultTypeInternal _IndexAd_default_instance_;
class IndexAdGroup;
class IndexAdGroupDefaultTypeInternal;
extern IndexAdGroupDefaultTypeInternal _IndexAdGroup_default_instance_;
class IndexAdInfoRep;
class IndexAdInfoRepDefaultTypeInternal;
extern IndexAdInfoRepDefaultTypeInternal _IndexAdInfoRep_default_instance_;
class IndexAdInfoReq;
class IndexAdInfoReqDefaultTypeInternal;
extern IndexAdInfoReqDefaultTypeInternal _IndexAdInfoReq_default_instance_;
class IndexRep;
class IndexRepDefaultTypeInternal;
extern IndexRepDefaultTypeInternal _IndexRep_default_instance_;
class IndexRep_GroupsEntry;
class IndexRep_GroupsEntryDefaultTypeInternal;
extern IndexRep_GroupsEntryDefaultTypeInternal _IndexRep_GroupsEntry_default_instance_;
class IndexReq;
class IndexReqDefaultTypeInternal;
extern IndexReqDefaultTypeInternal _IndexReq_default_instance_;
class IndexType;
class IndexTypeDefaultTypeInternal;
extern IndexTypeDefaultTypeInternal _IndexType_default_instance_;
class ListCarRep;
class ListCarRepDefaultTypeInternal;
extern ListCarRepDefaultTypeInternal _ListCarRep_default_instance_;
class ListCarReq;
class ListCarReqDefaultTypeInternal;
extern ListCarReqDefaultTypeInternal _ListCarReq_default_instance_;
class ListMessageRep;
class ListMessageRepDefaultTypeInternal;
extern ListMessageRepDefaultTypeInternal _ListMessageRep_default_instance_;
class ListMessageReq;
class ListMessageReqDefaultTypeInternal;
extern ListMessageReqDefaultTypeInternal _ListMessageReq_default_instance_;
class ListNoticeRep;
class ListNoticeRepDefaultTypeInternal;
extern ListNoticeRepDefaultTypeInternal _ListNoticeRep_default_instance_;
class ListNoticeReq;
class ListNoticeReqDefaultTypeInternal;
extern ListNoticeReqDefaultTypeInternal _ListNoticeReq_default_instance_;
class ListRegionsRep;
class ListRegionsRepDefaultTypeInternal;
extern ListRegionsRepDefaultTypeInternal _ListRegionsRep_default_instance_;
class ListRegionsReq;
class ListRegionsReqDefaultTypeInternal;
extern ListRegionsReqDefaultTypeInternal _ListRegionsReq_default_instance_;
class ListUserTypeRep;
class ListUserTypeRepDefaultTypeInternal;
extern ListUserTypeRepDefaultTypeInternal _ListUserTypeRep_default_instance_;
class ListUserTypeReq;
class ListUserTypeReqDefaultTypeInternal;
extern ListUserTypeReqDefaultTypeInternal _ListUserTypeReq_default_instance_;
class MapInfo;
class MapInfoDefaultTypeInternal;
extern MapInfoDefaultTypeInternal _MapInfo_default_instance_;
class MessageInfo;
class MessageInfoDefaultTypeInternal;
extern MessageInfoDefaultTypeInternal _MessageInfo_default_instance_;
class NoticeInfo;
class NoticeInfoDefaultTypeInternal;
extern NoticeInfoDefaultTypeInternal _NoticeInfo_default_instance_;
class PriceInfo;
class PriceInfoDefaultTypeInternal;
extern PriceInfoDefaultTypeInternal _PriceInfo_default_instance_;
class PriceRange;
class PriceRangeDefaultTypeInternal;
extern PriceRangeDefaultTypeInternal _PriceRange_default_instance_;
class PublicInfoRep;
class PublicInfoRepDefaultTypeInternal;
extern PublicInfoRepDefaultTypeInternal _PublicInfoRep_default_instance_;
class PublicInfoReq;
class PublicInfoReqDefaultTypeInternal;
extern PublicInfoReqDefaultTypeInternal _PublicInfoReq_default_instance_;
class RegionInfo;
class RegionInfoDefaultTypeInternal;
extern RegionInfoDefaultTypeInternal _RegionInfo_default_instance_;
class SendAuthRep;
class SendAuthRepDefaultTypeInternal;
extern SendAuthRepDefaultTypeInternal _SendAuthRep_default_instance_;
class SendAuthReq;
class SendAuthReqDefaultTypeInternal;
extern SendAuthReqDefaultTypeInternal _SendAuthReq_default_instance_;
class SetDeviceIdRep;
class SetDeviceIdRepDefaultTypeInternal;
extern SetDeviceIdRepDefaultTypeInternal _SetDeviceIdRep_default_instance_;
class SetDeviceIdReq;
class SetDeviceIdReqDefaultTypeInternal;
extern SetDeviceIdReqDefaultTypeInternal _SetDeviceIdReq_default_instance_;
class SetInfo;
class SetInfoDefaultTypeInternal;
extern SetInfoDefaultTypeInternal _SetInfo_default_instance_;
class SetMessageReadRep;
class SetMessageReadRepDefaultTypeInternal;
extern SetMessageReadRepDefaultTypeInternal _SetMessageReadRep_default_instance_;
class SetMessageReadReq;
class SetMessageReadReqDefaultTypeInternal;
extern SetMessageReadReqDefaultTypeInternal _SetMessageReadReq_default_instance_;
class TypeInfo;
class TypeInfoDefaultTypeInternal;
extern TypeInfoDefaultTypeInternal _TypeInfo_default_instance_;
class UserInfo;
class UserInfoDefaultTypeInternal;
extern UserInfoDefaultTypeInternal _UserInfo_default_instance_;
class UserType;
class UserTypeDefaultTypeInternal;
extern UserTypeDefaultTypeInternal _UserType_default_instance_;
class WareInfo;
class WareInfoDefaultTypeInternal;
extern WareInfoDefaultTypeInternal _WareInfo_default_instance_;
}  // namespace ttmall

namespace ttmall {

namespace protobuf_public_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_public_2eproto

enum DevicePlatform {
  DEVICE_PLATFORM_NONE = 0,
  DEVICE_PLATFORM_ANDROID = 1,
  DEVICE_PLATFORM_IOS = 2,
  DevicePlatform_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  DevicePlatform_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool DevicePlatform_IsValid(int value);
const DevicePlatform DevicePlatform_MIN = DEVICE_PLATFORM_NONE;
const DevicePlatform DevicePlatform_MAX = DEVICE_PLATFORM_IOS;
const int DevicePlatform_ARRAYSIZE = DevicePlatform_MAX + 1;

const ::google::protobuf::EnumDescriptor* DevicePlatform_descriptor();
inline const ::std::string& DevicePlatform_Name(DevicePlatform value) {
  return ::google::protobuf::internal::NameOfEnum(
    DevicePlatform_descriptor(), value);
}
inline bool DevicePlatform_Parse(
    const ::std::string& name, DevicePlatform* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DevicePlatform>(
    DevicePlatform_descriptor(), name, value);
}
enum SaleType {
  FIX_PRICE = 0,
  DIS_GIFT = 1,
  DIS_REBATE = 2,
  RANGE_PRICE = 3,
  SaleType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  SaleType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool SaleType_IsValid(int value);
const SaleType SaleType_MIN = FIX_PRICE;
const SaleType SaleType_MAX = RANGE_PRICE;
const int SaleType_ARRAYSIZE = SaleType_MAX + 1;

const ::google::protobuf::EnumDescriptor* SaleType_descriptor();
inline const ::std::string& SaleType_Name(SaleType value) {
  return ::google::protobuf::internal::NameOfEnum(
    SaleType_descriptor(), value);
}
inline bool SaleType_Parse(
    const ::std::string& name, SaleType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SaleType>(
    SaleType_descriptor(), name, value);
}
enum MessageType {
  MT_NONE = 0,
  MT_PUSH = 1,
  MT_SMS = 2,
  MessageType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  MessageType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool MessageType_IsValid(int value);
const MessageType MessageType_MIN = MT_NONE;
const MessageType MessageType_MAX = MT_SMS;
const int MessageType_ARRAYSIZE = MessageType_MAX + 1;

const ::google::protobuf::EnumDescriptor* MessageType_descriptor();
inline const ::std::string& MessageType_Name(MessageType value) {
  return ::google::protobuf::internal::NameOfEnum(
    MessageType_descriptor(), value);
}
inline bool MessageType_Parse(
    const ::std::string& name, MessageType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MessageType>(
    MessageType_descriptor(), name, value);
}
enum Error {
  SUCCESS = 0,
  PANIC = 100,
  ARGS_MISS = 1000,
  NEED_LOGIN = 10000,
  DB_MISS = 10001,
  LOGIN_FAILED = 10002,
  USER_DISABLE = 10003,
  AUTH_NOT_VALID = 10004,
  MOBILE_EXISTS = 10005,
  USER_NOT_EXISTS = 10006,
  DRIVER_IS_PASS = 10007,
  DRIVER_NOT_PASS = 10008,
  ADDRESS_DISABLED = 10009,
  MISS_PRIVILAGE = 10010,
  Error_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Error_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Error_IsValid(int value);
const Error Error_MIN = SUCCESS;
const Error Error_MAX = MISS_PRIVILAGE;
const int Error_ARRAYSIZE = Error_MAX + 1;

const ::google::protobuf::EnumDescriptor* Error_descriptor();
inline const ::std::string& Error_Name(Error value) {
  return ::google::protobuf::internal::NameOfEnum(
    Error_descriptor(), value);
}
inline bool Error_Parse(
    const ::std::string& name, Error* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Error>(
    Error_descriptor(), name, value);
}
enum AdPosition {
  AD1 = 0,
  AD2 = 1,
  RECOMMEND1 = 2,
  RECOMMEND2 = 3,
  RECOMMEND3 = 4,
  RECOMMEND4 = 5,
  AdPosition_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  AdPosition_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool AdPosition_IsValid(int value);
const AdPosition AdPosition_MIN = AD1;
const AdPosition AdPosition_MAX = RECOMMEND4;
const int AdPosition_ARRAYSIZE = AdPosition_MAX + 1;

const ::google::protobuf::EnumDescriptor* AdPosition_descriptor();
inline const ::std::string& AdPosition_Name(AdPosition value) {
  return ::google::protobuf::internal::NameOfEnum(
    AdPosition_descriptor(), value);
}
inline bool AdPosition_Parse(
    const ::std::string& name, AdPosition* value) {
  return ::google::protobuf::internal::ParseNamedEnum<AdPosition>(
    AdPosition_descriptor(), name, value);
}
enum UpdateType {
  UPDATE_TYPE_NONE = 0,
  UPDATE_TYPE_TTMALL = 1,
  UPDATE_TYPE_DRIVER = 2,
  UPDATE_TYPE_SALER = 3,
  UpdateType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  UpdateType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool UpdateType_IsValid(int value);
const UpdateType UpdateType_MIN = UPDATE_TYPE_NONE;
const UpdateType UpdateType_MAX = UPDATE_TYPE_SALER;
const int UpdateType_ARRAYSIZE = UpdateType_MAX + 1;

const ::google::protobuf::EnumDescriptor* UpdateType_descriptor();
inline const ::std::string& UpdateType_Name(UpdateType value) {
  return ::google::protobuf::internal::NameOfEnum(
    UpdateType_descriptor(), value);
}
inline bool UpdateType_Parse(
    const ::std::string& name, UpdateType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<UpdateType>(
    UpdateType_descriptor(), name, value);
}
// ===================================================================

class BrandInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ttmall.BrandInfo) */ {
 public:
  BrandInfo();
  virtual ~BrandInfo();

  BrandInfo(const BrandInfo& from);

  inline BrandInfo& operator=(const BrandInfo& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BrandInfo& default_instance();

  static inline const BrandInfo* internal_default_instance() {
    return reinterpret_cast<const BrandInfo*>(
               &_BrandInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(BrandInfo* other);

  // implements Message ----------------------------------------------

  inline BrandInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  BrandInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const BrandInfo& from);
  void MergeFrom(const BrandInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(BrandInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // .ttmall.ImageInfo icon = 3;
  bool has_icon() const;
  void clear_icon();
  static const int kIconFieldNumber = 3;
  const ::ttmall::ImageInfo& icon() const;
  ::ttmall::ImageInfo* mutable_icon();
  ::ttmall::ImageInfo* release_icon();
  void set_allocated_icon(::ttmall::ImageInfo* icon);

  // @@protoc_insertion_point(class_scope:ttmall.BrandInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::ttmall::ImageInfo* icon_;
  mutable int _cached_size_;
  friend struct protobuf_public_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TypeInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ttmall.TypeInfo) */ {
 public:
  TypeInfo();
  virtual ~TypeInfo();

  TypeInfo(const TypeInfo& from);

  inline TypeInfo& operator=(const TypeInfo& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TypeInfo& default_instance();

  static inline const TypeInfo* internal_default_instance() {
    return reinterpret_cast<const TypeInfo*>(
               &_TypeInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(TypeInfo* other);

  // implements Message ----------------------------------------------

  inline TypeInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  TypeInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TypeInfo& from);
  void MergeFrom(const TypeInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TypeInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string parent = 3;
  void clear_parent();
  static const int kParentFieldNumber = 3;
  const ::std::string& parent() const;
  void set_parent(const ::std::string& value);
  #if LANG_CXX11
  void set_parent(::std::string&& value);
  #endif
  void set_parent(const char* value);
  void set_parent(const char* value, size_t size);
  ::std::string* mutable_parent();
  ::std::string* release_parent();
  void set_allocated_parent(::std::string* parent);

  // string icon_m = 4;
  void clear_icon_m();
  static const int kIconMFieldNumber = 4;
  const ::std::string& icon_m() const;
  void set_icon_m(const ::std::string& value);
  #if LANG_CXX11
  void set_icon_m(::std::string&& value);
  #endif
  void set_icon_m(const char* value);
  void set_icon_m(const char* value, size_t size);
  ::std::string* mutable_icon_m();
  ::std::string* release_icon_m();
  void set_allocated_icon_m(::std::string* icon_m);

  // string icon_s = 5;
  void clear_icon_s();
  static const int kIconSFieldNumber = 5;
  const ::std::string& icon_s() const;
  void set_icon_s(const ::std::string& value);
  #if LANG_CXX11
  void set_icon_s(::std::string&& value);
  #endif
  void set_icon_s(const char* value);
  void set_icon_s(const char* value, size_t size);
  ::std::string* mutable_icon_s();
  ::std::string* release_icon_s();
  void set_allocated_icon_s(::std::string* icon_s);

  // string notice = 7;
  void clear_notice();
  static const int kNoticeFieldNumber = 7;
  const ::std::string& notice() const;
  void set_notice(const ::std::string& value);
  #if LANG_CXX11
  void set_notice(::std::string&& value);
  #endif
  void set_notice(const char* value);
  void set_notice(const char* value, size_t size);
  ::std::string* mutable_notice();
  ::std::string* release_notice();
  void set_allocated_notice(::std::string* notice);

  // bool recommend = 6;
  void clear_recommend();
  static const int kRecommendFieldNumber = 6;
  bool recommend() const;
  void set_recommend(bool value);

  // @@protoc_insertion_point(class_scope:ttmall.TypeInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr parent_;
  ::google::protobuf::internal::ArenaStringPtr icon_m_;
  ::google::protobuf::internal::ArenaStringPtr icon_s_;
  ::google::protobuf::internal::ArenaStringPtr notice_;
  bool recommend_;
  mutable int _cached_size_;
  friend struct protobuf_public_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PriceRange : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ttmall.PriceRange) */ {
 public:
  PriceRange();
  virtual ~PriceRange();

  PriceRange(const PriceRange& from);

  inline PriceRange& operator=(const PriceRange& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PriceRange& default_instance();

  static inline const PriceRange* internal_default_instance() {
    return reinterpret_cast<const PriceRange*>(
               &_PriceRange_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(PriceRange* other);

  // implements Message ----------------------------------------------

  inline PriceRange* New() const PROTOBUF_FINAL { return New(NULL); }

  PriceRange* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PriceRange& from);
  void MergeFrom(const PriceRange& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PriceRange* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 beg = 1;
  void clear_beg();
  static const int kBegFieldNumber = 1;
  ::google::protobuf::int32 beg() const;
  void set_beg(::google::protobuf::int32 value);

  // int32 end = 2;
  void clear_end();
  static const int kEndFieldNumber = 2;
  ::google::protobuf::int32 end() const;
  void set_end(::google::protobuf::int32 value);

  // int32 price = 3;
  void clear_price();
  static const int kPriceFieldNumber = 3;
  ::google::protobuf::int32 price() const;
  void set_price(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ttmall.PriceRange)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 beg_;
  ::google::protobuf::int32 end_;
  ::google::protobuf::int32 price_;
  mutable int _cached_size_;
  friend struct protobuf_public_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SetInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ttmall.SetInfo) */ {
 public:
  SetInfo();
  virtual ~SetInfo();

  SetInfo(const SetInfo& from);

  inline SetInfo& operator=(const SetInfo& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SetInfo& default_instance();

  static inline const SetInfo* internal_default_instance() {
    return reinterpret_cast<const SetInfo*>(
               &_SetInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(SetInfo* other);

  // implements Message ----------------------------------------------

  inline SetInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  SetInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SetInfo& from);
  void MergeFrom(const SetInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SetInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string brief = 4;
  void clear_brief();
  static const int kBriefFieldNumber = 4;
  const ::std::string& brief() const;
  void set_brief(const ::std::string& value);
  #if LANG_CXX11
  void set_brief(::std::string&& value);
  #endif
  void set_brief(const char* value);
  void set_brief(const char* value, size_t size);
  ::std::string* mutable_brief();
  ::std::string* release_brief();
  void set_allocated_brief(::std::string* brief);

  // int32 count = 3;
  void clear_count();
  static const int kCountFieldNumber = 3;
  ::google::protobuf::int32 count() const;
  void set_count(::google::protobuf::int32 value);

  // int32 price = 5;
  void clear_price();
  static const int kPriceFieldNumber = 5;
  ::google::protobuf::int32 price() const;
  void set_price(::google::protobuf::int32 value);

  // int32 discount = 6;
  void clear_discount();
  static const int kDiscountFieldNumber = 6;
  ::google::protobuf::int32 discount() const;
  void set_discount(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ttmall.SetInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr brief_;
  ::google::protobuf::int32 count_;
  ::google::protobuf::int32 price_;
  ::google::protobuf::int32 discount_;
  mutable int _cached_size_;
  friend struct protobuf_public_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PriceInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ttmall.PriceInfo) */ {
 public:
  PriceInfo();
  virtual ~PriceInfo();

  PriceInfo(const PriceInfo& from);

  inline PriceInfo& operator=(const PriceInfo& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PriceInfo& default_instance();

  static inline const PriceInfo* internal_default_instance() {
    return reinterpret_cast<const PriceInfo*>(
               &_PriceInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(PriceInfo* other);

  // implements Message ----------------------------------------------

  inline PriceInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  PriceInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PriceInfo& from);
  void MergeFrom(const PriceInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PriceInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ttmall.PriceRange ranges = 9;
  int ranges_size() const;
  void clear_ranges();
  static const int kRangesFieldNumber = 9;
  const ::ttmall::PriceRange& ranges(int index) const;
  ::ttmall::PriceRange* mutable_ranges(int index);
  ::ttmall::PriceRange* add_ranges();
  ::google::protobuf::RepeatedPtrField< ::ttmall::PriceRange >*
      mutable_ranges();
  const ::google::protobuf::RepeatedPtrField< ::ttmall::PriceRange >&
      ranges() const;

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string unit = 10;
  void clear_unit();
  static const int kUnitFieldNumber = 10;
  const ::std::string& unit() const;
  void set_unit(const ::std::string& value);
  #if LANG_CXX11
  void set_unit(::std::string&& value);
  #endif
  void set_unit(const char* value);
  void set_unit(const char* value, size_t size);
  ::std::string* mutable_unit();
  ::std::string* release_unit();
  void set_allocated_unit(::std::string* unit);

  // .ttmall.SaleType type = 3;
  void clear_type();
  static const int kTypeFieldNumber = 3;
  ::ttmall::SaleType type() const;
  void set_type(::ttmall::SaleType value);

  // int32 price = 4;
  void clear_price();
  static const int kPriceFieldNumber = 4;
  ::google::protobuf::int32 price() const;
  void set_price(::google::protobuf::int32 value);

  // int32 original = 5;
  void clear_original();
  static const int kOriginalFieldNumber = 5;
  ::google::protobuf::int32 original() const;
  void set_original(::google::protobuf::int32 value);

  // int32 buy_num = 6;
  void clear_buy_num();
  static const int kBuyNumFieldNumber = 6;
  ::google::protobuf::int32 buy_num() const;
  void set_buy_num(::google::protobuf::int32 value);

  // int32 add_num = 7;
  void clear_add_num();
  static const int kAddNumFieldNumber = 7;
  ::google::protobuf::int32 add_num() const;
  void set_add_num(::google::protobuf::int32 value);

  // int32 discount = 8;
  void clear_discount();
  static const int kDiscountFieldNumber = 8;
  ::google::protobuf::int32 discount() const;
  void set_discount(::google::protobuf::int32 value);

  // int32 start = 11;
  void clear_start();
  static const int kStartFieldNumber = 11;
  ::google::protobuf::int32 start() const;
  void set_start(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ttmall.PriceInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::ttmall::PriceRange > ranges_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr unit_;
  int type_;
  ::google::protobuf::int32 price_;
  ::google::protobuf::int32 original_;
  ::google::protobuf::int32 buy_num_;
  ::google::protobuf::int32 add_num_;
  ::google::protobuf::int32 discount_;
  ::google::protobuf::int32 start_;
  mutable int _cached_size_;
  friend struct protobuf_public_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AttrInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ttmall.AttrInfo) */ {
 public:
  AttrInfo();
  virtual ~AttrInfo();

  AttrInfo(const AttrInfo& from);

  inline AttrInfo& operator=(const AttrInfo& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AttrInfo& default_instance();

  static inline const AttrInfo* internal_default_instance() {
    return reinterpret_cast<const AttrInfo*>(
               &_AttrInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(AttrInfo* other);

  // implements Message ----------------------------------------------

  inline AttrInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  AttrInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AttrInfo& from);
  void MergeFrom(const AttrInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AttrInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string code = 1;
  void clear_code();
  static const int kCodeFieldNumber = 1;
  const ::std::string& code() const;
  void set_code(const ::std::string& value);
  #if LANG_CXX11
  void set_code(::std::string&& value);
  #endif
  void set_code(const char* value);
  void set_code(const char* value, size_t size);
  ::std::string* mutable_code();
  ::std::string* release_code();
  void set_allocated_code(::std::string* code);

  // string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:ttmall.AttrInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr code_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable int _cached_size_;
  friend struct protobuf_public_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AttrGroup : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ttmall.AttrGroup) */ {
 public:
  AttrGroup();
  virtual ~AttrGroup();

  AttrGroup(const AttrGroup& from);

  inline AttrGroup& operator=(const AttrGroup& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AttrGroup& default_instance();

  static inline const AttrGroup* internal_default_instance() {
    return reinterpret_cast<const AttrGroup*>(
               &_AttrGroup_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(AttrGroup* other);

  // implements Message ----------------------------------------------

  inline AttrGroup* New() const PROTOBUF_FINAL { return New(NULL); }

  AttrGroup* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AttrGroup& from);
  void MergeFrom(const AttrGroup& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AttrGroup* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ttmall.AttrInfo attrs = 3;
  int attrs_size() const;
  void clear_attrs();
  static const int kAttrsFieldNumber = 3;
  const ::ttmall::AttrInfo& attrs(int index) const;
  ::ttmall::AttrInfo* mutable_attrs(int index);
  ::ttmall::AttrInfo* add_attrs();
  ::google::protobuf::RepeatedPtrField< ::ttmall::AttrInfo >*
      mutable_attrs();
  const ::google::protobuf::RepeatedPtrField< ::ttmall::AttrInfo >&
      attrs() const;

  // string code = 1;
  void clear_code();
  static const int kCodeFieldNumber = 1;
  const ::std::string& code() const;
  void set_code(const ::std::string& value);
  #if LANG_CXX11
  void set_code(::std::string&& value);
  #endif
  void set_code(const char* value);
  void set_code(const char* value, size_t size);
  ::std::string* mutable_code();
  ::std::string* release_code();
  void set_allocated_code(::std::string* code);

  // string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:ttmall.AttrGroup)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::ttmall::AttrInfo > attrs_;
  ::google::protobuf::internal::ArenaStringPtr code_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable int _cached_size_;
  friend struct protobuf_public_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MapInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ttmall.MapInfo) */ {
 public:
  MapInfo();
  virtual ~MapInfo();

  MapInfo(const MapInfo& from);

  inline MapInfo& operator=(const MapInfo& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MapInfo& default_instance();

  static inline const MapInfo* internal_default_instance() {
    return reinterpret_cast<const MapInfo*>(
               &_MapInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(MapInfo* other);

  // implements Message ----------------------------------------------

  inline MapInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  MapInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MapInfo& from);
  void MergeFrom(const MapInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MapInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ttmall.ImageInfo images = 3;
  int images_size() const;
  void clear_images();
  static const int kImagesFieldNumber = 3;
  const ::ttmall::ImageInfo& images(int index) const;
  ::ttmall::ImageInfo* mutable_images(int index);
  ::ttmall::ImageInfo* add_images();
  ::google::protobuf::RepeatedPtrField< ::ttmall::ImageInfo >*
      mutable_images();
  const ::google::protobuf::RepeatedPtrField< ::ttmall::ImageInfo >&
      images() const;

  // repeated .ttmall.SetInfo sets = 5;
  int sets_size() const;
  void clear_sets();
  static const int kSetsFieldNumber = 5;
  const ::ttmall::SetInfo& sets(int index) const;
  ::ttmall::SetInfo* mutable_sets(int index);
  ::ttmall::SetInfo* add_sets();
  ::google::protobuf::RepeatedPtrField< ::ttmall::SetInfo >*
      mutable_sets();
  const ::google::protobuf::RepeatedPtrField< ::ttmall::SetInfo >&
      sets() const;

  // string key = 1;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  #if LANG_CXX11
  void set_key(::std::string&& value);
  #endif
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // string price = 2;
  void clear_price();
  static const int kPriceFieldNumber = 2;
  const ::std::string& price() const;
  void set_price(const ::std::string& value);
  #if LANG_CXX11
  void set_price(::std::string&& value);
  #endif
  void set_price(const char* value);
  void set_price(const char* value, size_t size);
  ::std::string* mutable_price();
  ::std::string* release_price();
  void set_allocated_price(::std::string* price);

  // int32 inventory = 4;
  void clear_inventory();
  static const int kInventoryFieldNumber = 4;
  ::google::protobuf::int32 inventory() const;
  void set_inventory(::google::protobuf::int32 value);

  // bool disabled = 6;
  void clear_disabled();
  static const int kDisabledFieldNumber = 6;
  bool disabled() const;
  void set_disabled(bool value);

  // @@protoc_insertion_point(class_scope:ttmall.MapInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::ttmall::ImageInfo > images_;
  ::google::protobuf::RepeatedPtrField< ::ttmall::SetInfo > sets_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  ::google::protobuf::internal::ArenaStringPtr price_;
  ::google::protobuf::int32 inventory_;
  bool disabled_;
  mutable int _cached_size_;
  friend struct protobuf_public_2eproto::TableStruct;
};
// -------------------------------------------------------------------


// -------------------------------------------------------------------


// -------------------------------------------------------------------


// -------------------------------------------------------------------

class GoodsInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ttmall.GoodsInfo) */ {
 public:
  GoodsInfo();
  virtual ~GoodsInfo();

  GoodsInfo(const GoodsInfo& from);

  inline GoodsInfo& operator=(const GoodsInfo& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GoodsInfo& default_instance();

  static inline const GoodsInfo* internal_default_instance() {
    return reinterpret_cast<const GoodsInfo*>(
               &_GoodsInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    11;

  void Swap(GoodsInfo* other);

  // implements Message ----------------------------------------------

  inline GoodsInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  GoodsInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GoodsInfo& from);
  void MergeFrom(const GoodsInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GoodsInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // repeated string alias = 3;
  int alias_size() const;
  void clear_alias();
  static const int kAliasFieldNumber = 3;
  const ::std::string& alias(int index) const;
  ::std::string* mutable_alias(int index);
  void set_alias(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_alias(int index, ::std::string&& value);
  #endif
  void set_alias(int index, const char* value);
  void set_alias(int index, const char* value, size_t size);
  ::std::string* add_alias();
  void add_alias(const ::std::string& value);
  #if LANG_CXX11
  void add_alias(::std::string&& value);
  #endif
  void add_alias(const char* value);
  void add_alias(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& alias() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_alias();

  // repeated .ttmall.ImageInfo images = 4;
  int images_size() const;
  void clear_images();
  static const int kImagesFieldNumber = 4;
  const ::ttmall::ImageInfo& images(int index) const;
  ::ttmall::ImageInfo* mutable_images(int index);
  ::ttmall::ImageInfo* add_images();
  ::google::protobuf::RepeatedPtrField< ::ttmall::ImageInfo >*
      mutable_images();
  const ::google::protobuf::RepeatedPtrField< ::ttmall::ImageInfo >&
      images() const;

  // repeated string type_id = 7;
  int type_id_size() const;
  void clear_type_id();
  static const int kTypeIdFieldNumber = 7;
  const ::std::string& type_id(int index) const;
  ::std::string* mutable_type_id(int index);
  void set_type_id(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_type_id(int index, ::std::string&& value);
  #endif
  void set_type_id(int index, const char* value);
  void set_type_id(int index, const char* value, size_t size);
  ::std::string* add_type_id();
  void add_type_id(const ::std::string& value);
  #if LANG_CXX11
  void add_type_id(::std::string&& value);
  #endif
  void add_type_id(const char* value);
  void add_type_id(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& type_id() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_type_id();

  // map<string, .ttmall.PriceInfo> prices = 8;
  int prices_size() const;
  void clear_prices();
  static const int kPricesFieldNumber = 8;
  const ::google::protobuf::Map< ::std::string, ::ttmall::PriceInfo >&
      prices() const;
  ::google::protobuf::Map< ::std::string, ::ttmall::PriceInfo >*
      mutable_prices();

  // map<string, .ttmall.AttrGroup> attrs = 9;
  int attrs_size() const;
  void clear_attrs();
  static const int kAttrsFieldNumber = 9;
  const ::google::protobuf::Map< ::std::string, ::ttmall::AttrGroup >&
      attrs() const;
  ::google::protobuf::Map< ::std::string, ::ttmall::AttrGroup >*
      mutable_attrs();

  // map<string, .ttmall.MapInfo> maps = 10;
  int maps_size() const;
  void clear_maps();
  static const int kMapsFieldNumber = 10;
  const ::google::protobuf::Map< ::std::string, ::ttmall::MapInfo >&
      maps() const;
  ::google::protobuf::Map< ::std::string, ::ttmall::MapInfo >*
      mutable_maps();

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string area = 5;
  void clear_area();
  static const int kAreaFieldNumber = 5;
  const ::std::string& area() const;
  void set_area(const ::std::string& value);
  #if LANG_CXX11
  void set_area(::std::string&& value);
  #endif
  void set_area(const char* value);
  void set_area(const char* value, size_t size);
  ::std::string* mutable_area();
  ::std::string* release_area();
  void set_allocated_area(::std::string* area);

  // string desc = 6;
  void clear_desc();
  static const int kDescFieldNumber = 6;
  const ::std::string& desc() const;
  void set_desc(const ::std::string& value);
  #if LANG_CXX11
  void set_desc(::std::string&& value);
  #endif
  void set_desc(const char* value);
  void set_desc(const char* value, size_t size);
  ::std::string* mutable_desc();
  ::std::string* release_desc();
  void set_allocated_desc(::std::string* desc);

  // string key_id = 11;
  void clear_key_id();
  static const int kKeyIdFieldNumber = 11;
  const ::std::string& key_id() const;
  void set_key_id(const ::std::string& value);
  #if LANG_CXX11
  void set_key_id(::std::string&& value);
  #endif
  void set_key_id(const char* value);
  void set_key_id(const char* value, size_t size);
  ::std::string* mutable_key_id();
  ::std::string* release_key_id();
  void set_allocated_key_id(::std::string* key_id);

  // string brief = 12;
  void clear_brief();
  static const int kBriefFieldNumber = 12;
  const ::std::string& brief() const;
  void set_brief(const ::std::string& value);
  #if LANG_CXX11
  void set_brief(::std::string&& value);
  #endif
  void set_brief(const char* value);
  void set_brief(const char* value, size_t size);
  ::std::string* mutable_brief();
  ::std::string* release_brief();
  void set_allocated_brief(::std::string* brief);

  // string code = 14;
  void clear_code();
  static const int kCodeFieldNumber = 14;
  const ::std::string& code() const;
  void set_code(const ::std::string& value);
  #if LANG_CXX11
  void set_code(::std::string&& value);
  #endif
  void set_code(const char* value);
  void set_code(const char* value, size_t size);
  ::std::string* mutable_code();
  ::std::string* release_code();
  void set_allocated_code(::std::string* code);

  // bool disabled = 13;
  void clear_disabled();
  static const int kDisabledFieldNumber = 13;
  bool disabled() const;
  void set_disabled(bool value);

  // bool is_collect = 15;
  void clear_is_collect();
  static const int kIsCollectFieldNumber = 15;
  bool is_collect() const;
  void set_is_collect(bool value);

  // @@protoc_insertion_point(class_scope:ttmall.GoodsInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> alias_;
  ::google::protobuf::RepeatedPtrField< ::ttmall::ImageInfo > images_;
  ::google::protobuf::RepeatedPtrField< ::std::string> type_id_;
  public:
  class GoodsInfo_PricesEntry : public ::google::protobuf::internal::MapEntry<GoodsInfo_PricesEntry, 
      ::std::string, ::ttmall::PriceInfo,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > {
  public:
    typedef ::google::protobuf::internal::MapEntry<GoodsInfo_PricesEntry, 
      ::std::string, ::ttmall::PriceInfo,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > SuperType;
    GoodsInfo_PricesEntry();
    GoodsInfo_PricesEntry(::google::protobuf::Arena* arena);
    void MergeFrom(const ::google::protobuf::Message& other) PROTOBUF_FINAL;
    void MergeFrom(const GoodsInfo_PricesEntry& other);
    static const Message* internal_default_instance() { return reinterpret_cast<const Message*>(&_GoodsInfo_PricesEntry_default_instance_); }
    ::google::protobuf::Metadata GetMetadata() const;
  };
  ::google::protobuf::internal::MapField<
      GoodsInfo_PricesEntry,
      ::std::string, ::ttmall::PriceInfo,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > prices_;
  private:
  public:
  class GoodsInfo_AttrsEntry : public ::google::protobuf::internal::MapEntry<GoodsInfo_AttrsEntry, 
      ::std::string, ::ttmall::AttrGroup,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > {
  public:
    typedef ::google::protobuf::internal::MapEntry<GoodsInfo_AttrsEntry, 
      ::std::string, ::ttmall::AttrGroup,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > SuperType;
    GoodsInfo_AttrsEntry();
    GoodsInfo_AttrsEntry(::google::protobuf::Arena* arena);
    void MergeFrom(const ::google::protobuf::Message& other) PROTOBUF_FINAL;
    void MergeFrom(const GoodsInfo_AttrsEntry& other);
    static const Message* internal_default_instance() { return reinterpret_cast<const Message*>(&_GoodsInfo_AttrsEntry_default_instance_); }
    ::google::protobuf::Metadata GetMetadata() const;
  };
  ::google::protobuf::internal::MapField<
      GoodsInfo_AttrsEntry,
      ::std::string, ::ttmall::AttrGroup,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > attrs_;
  private:
  public:
  class GoodsInfo_MapsEntry : public ::google::protobuf::internal::MapEntry<GoodsInfo_MapsEntry, 
      ::std::string, ::ttmall::MapInfo,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > {
  public:
    typedef ::google::protobuf::internal::MapEntry<GoodsInfo_MapsEntry, 
      ::std::string, ::ttmall::MapInfo,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > SuperType;
    GoodsInfo_MapsEntry();
    GoodsInfo_MapsEntry(::google::protobuf::Arena* arena);
    void MergeFrom(const ::google::protobuf::Message& other) PROTOBUF_FINAL;
    void MergeFrom(const GoodsInfo_MapsEntry& other);
    static const Message* internal_default_instance() { return reinterpret_cast<const Message*>(&_GoodsInfo_MapsEntry_default_instance_); }
    ::google::protobuf::Metadata GetMetadata() const;
  };
  ::google::protobuf::internal::MapField<
      GoodsInfo_MapsEntry,
      ::std::string, ::ttmall::MapInfo,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > maps_;
  private:
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr area_;
  ::google::protobuf::internal::ArenaStringPtr desc_;
  ::google::protobuf::internal::ArenaStringPtr key_id_;
  ::google::protobuf::internal::ArenaStringPtr brief_;
  ::google::protobuf::internal::ArenaStringPtr code_;
  bool disabled_;
  bool is_collect_;
  mutable int _cached_size_;
  friend struct protobuf_public_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class NoticeInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ttmall.NoticeInfo) */ {
 public:
  NoticeInfo();
  virtual ~NoticeInfo();

  NoticeInfo(const NoticeInfo& from);

  inline NoticeInfo& operator=(const NoticeInfo& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NoticeInfo& default_instance();

  static inline const NoticeInfo* internal_default_instance() {
    return reinterpret_cast<const NoticeInfo*>(
               &_NoticeInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    12;

  void Swap(NoticeInfo* other);

  // implements Message ----------------------------------------------

  inline NoticeInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  NoticeInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const NoticeInfo& from);
  void MergeFrom(const NoticeInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(NoticeInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // string content = 2;
  void clear_content();
  static const int kContentFieldNumber = 2;
  const ::std::string& content() const;
  void set_content(const ::std::string& value);
  #if LANG_CXX11
  void set_content(::std::string&& value);
  #endif
  void set_content(const char* value);
  void set_content(const char* value, size_t size);
  ::std::string* mutable_content();
  ::std::string* release_content();
  void set_allocated_content(::std::string* content);

  // int64 time = 3;
  void clear_time();
  static const int kTimeFieldNumber = 3;
  ::google::protobuf::int64 time() const;
  void set_time(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:ttmall.NoticeInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr content_;
  ::google::protobuf::int64 time_;
  mutable int _cached_size_;
  friend struct protobuf_public_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ListNoticeReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ttmall.ListNoticeReq) */ {
 public:
  ListNoticeReq();
  virtual ~ListNoticeReq();

  ListNoticeReq(const ListNoticeReq& from);

  inline ListNoticeReq& operator=(const ListNoticeReq& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ListNoticeReq& default_instance();

  static inline const ListNoticeReq* internal_default_instance() {
    return reinterpret_cast<const ListNoticeReq*>(
               &_ListNoticeReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    13;

  void Swap(ListNoticeReq* other);

  // implements Message ----------------------------------------------

  inline ListNoticeReq* New() const PROTOBUF_FINAL { return New(NULL); }

  ListNoticeReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ListNoticeReq& from);
  void MergeFrom(const ListNoticeReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ListNoticeReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string token = 1;
  void clear_token();
  static const int kTokenFieldNumber = 1;
  const ::std::string& token() const;
  void set_token(const ::std::string& value);
  #if LANG_CXX11
  void set_token(::std::string&& value);
  #endif
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  ::std::string* mutable_token();
  ::std::string* release_token();
  void set_allocated_token(::std::string* token);

  // @@protoc_insertion_point(class_scope:ttmall.ListNoticeReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr token_;
  mutable int _cached_size_;
  friend struct protobuf_public_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ListNoticeRep : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ttmall.ListNoticeRep) */ {
 public:
  ListNoticeRep();
  virtual ~ListNoticeRep();

  ListNoticeRep(const ListNoticeRep& from);

  inline ListNoticeRep& operator=(const ListNoticeRep& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ListNoticeRep& default_instance();

  static inline const ListNoticeRep* internal_default_instance() {
    return reinterpret_cast<const ListNoticeRep*>(
               &_ListNoticeRep_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    14;

  void Swap(ListNoticeRep* other);

  // implements Message ----------------------------------------------

  inline ListNoticeRep* New() const PROTOBUF_FINAL { return New(NULL); }

  ListNoticeRep* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ListNoticeRep& from);
  void MergeFrom(const ListNoticeRep& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ListNoticeRep* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ttmall.NoticeInfo items = 1;
  int items_size() const;
  void clear_items();
  static const int kItemsFieldNumber = 1;
  const ::ttmall::NoticeInfo& items(int index) const;
  ::ttmall::NoticeInfo* mutable_items(int index);
  ::ttmall::NoticeInfo* add_items();
  ::google::protobuf::RepeatedPtrField< ::ttmall::NoticeInfo >*
      mutable_items();
  const ::google::protobuf::RepeatedPtrField< ::ttmall::NoticeInfo >&
      items() const;

  // @@protoc_insertion_point(class_scope:ttmall.ListNoticeRep)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::ttmall::NoticeInfo > items_;
  mutable int _cached_size_;
  friend struct protobuf_public_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ExtInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ttmall.ExtInfo) */ {
 public:
  ExtInfo();
  virtual ~ExtInfo();

  ExtInfo(const ExtInfo& from);

  inline ExtInfo& operator=(const ExtInfo& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ExtInfo& default_instance();

  static inline const ExtInfo* internal_default_instance() {
    return reinterpret_cast<const ExtInfo*>(
               &_ExtInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    15;

  void Swap(ExtInfo* other);

  // implements Message ----------------------------------------------

  inline ExtInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  ExtInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ExtInfo& from);
  void MergeFrom(const ExtInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ExtInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string id = 2;
  void clear_id();
  static const int kIdFieldNumber = 2;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // int32 type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ttmall.ExtInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::int32 type_;
  mutable int _cached_size_;
  friend struct protobuf_public_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MessageInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ttmall.MessageInfo) */ {
 public:
  MessageInfo();
  virtual ~MessageInfo();

  MessageInfo(const MessageInfo& from);

  inline MessageInfo& operator=(const MessageInfo& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MessageInfo& default_instance();

  static inline const MessageInfo* internal_default_instance() {
    return reinterpret_cast<const MessageInfo*>(
               &_MessageInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    16;

  void Swap(MessageInfo* other);

  // implements Message ----------------------------------------------

  inline MessageInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  MessageInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MessageInfo& from);
  void MergeFrom(const MessageInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MessageInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // string title = 3;
  void clear_title();
  static const int kTitleFieldNumber = 3;
  const ::std::string& title() const;
  void set_title(const ::std::string& value);
  #if LANG_CXX11
  void set_title(::std::string&& value);
  #endif
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  ::std::string* mutable_title();
  ::std::string* release_title();
  void set_allocated_title(::std::string* title);

  // string content = 4;
  void clear_content();
  static const int kContentFieldNumber = 4;
  const ::std::string& content() const;
  void set_content(const ::std::string& value);
  #if LANG_CXX11
  void set_content(::std::string&& value);
  #endif
  void set_content(const char* value);
  void set_content(const char* value, size_t size);
  ::std::string* mutable_content();
  ::std::string* release_content();
  void set_allocated_content(::std::string* content);

  // .ttmall.ExtInfo ext = 7;
  bool has_ext() const;
  void clear_ext();
  static const int kExtFieldNumber = 7;
  const ::ttmall::ExtInfo& ext() const;
  ::ttmall::ExtInfo* mutable_ext();
  ::ttmall::ExtInfo* release_ext();
  void set_allocated_ext(::ttmall::ExtInfo* ext);

  // .ttmall.MessageType type = 2;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::ttmall::MessageType type() const;
  void set_type(::ttmall::MessageType value);

  // bool is_read = 5;
  void clear_is_read();
  static const int kIsReadFieldNumber = 5;
  bool is_read() const;
  void set_is_read(bool value);

  // int64 time = 6;
  void clear_time();
  static const int kTimeFieldNumber = 6;
  ::google::protobuf::int64 time() const;
  void set_time(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:ttmall.MessageInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr title_;
  ::google::protobuf::internal::ArenaStringPtr content_;
  ::ttmall::ExtInfo* ext_;
  int type_;
  bool is_read_;
  ::google::protobuf::int64 time_;
  mutable int _cached_size_;
  friend struct protobuf_public_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ListMessageReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ttmall.ListMessageReq) */ {
 public:
  ListMessageReq();
  virtual ~ListMessageReq();

  ListMessageReq(const ListMessageReq& from);

  inline ListMessageReq& operator=(const ListMessageReq& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ListMessageReq& default_instance();

  static inline const ListMessageReq* internal_default_instance() {
    return reinterpret_cast<const ListMessageReq*>(
               &_ListMessageReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    17;

  void Swap(ListMessageReq* other);

  // implements Message ----------------------------------------------

  inline ListMessageReq* New() const PROTOBUF_FINAL { return New(NULL); }

  ListMessageReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ListMessageReq& from);
  void MergeFrom(const ListMessageReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ListMessageReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string token = 1;
  void clear_token();
  static const int kTokenFieldNumber = 1;
  const ::std::string& token() const;
  void set_token(const ::std::string& value);
  #if LANG_CXX11
  void set_token(::std::string&& value);
  #endif
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  ::std::string* mutable_token();
  ::std::string* release_token();
  void set_allocated_token(::std::string* token);

  // int32 skip = 2;
  void clear_skip();
  static const int kSkipFieldNumber = 2;
  ::google::protobuf::int32 skip() const;
  void set_skip(::google::protobuf::int32 value);

  // int32 limit = 3;
  void clear_limit();
  static const int kLimitFieldNumber = 3;
  ::google::protobuf::int32 limit() const;
  void set_limit(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ttmall.ListMessageReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr token_;
  ::google::protobuf::int32 skip_;
  ::google::protobuf::int32 limit_;
  mutable int _cached_size_;
  friend struct protobuf_public_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ListMessageRep : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ttmall.ListMessageRep) */ {
 public:
  ListMessageRep();
  virtual ~ListMessageRep();

  ListMessageRep(const ListMessageRep& from);

  inline ListMessageRep& operator=(const ListMessageRep& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ListMessageRep& default_instance();

  static inline const ListMessageRep* internal_default_instance() {
    return reinterpret_cast<const ListMessageRep*>(
               &_ListMessageRep_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    18;

  void Swap(ListMessageRep* other);

  // implements Message ----------------------------------------------

  inline ListMessageRep* New() const PROTOBUF_FINAL { return New(NULL); }

  ListMessageRep* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ListMessageRep& from);
  void MergeFrom(const ListMessageRep& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ListMessageRep* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ttmall.MessageInfo items = 1;
  int items_size() const;
  void clear_items();
  static const int kItemsFieldNumber = 1;
  const ::ttmall::MessageInfo& items(int index) const;
  ::ttmall::MessageInfo* mutable_items(int index);
  ::ttmall::MessageInfo* add_items();
  ::google::protobuf::RepeatedPtrField< ::ttmall::MessageInfo >*
      mutable_items();
  const ::google::protobuf::RepeatedPtrField< ::ttmall::MessageInfo >&
      items() const;

  // @@protoc_insertion_point(class_scope:ttmall.ListMessageRep)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::ttmall::MessageInfo > items_;
  mutable int _cached_size_;
  friend struct protobuf_public_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DeleteMessageReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ttmall.DeleteMessageReq) */ {
 public:
  DeleteMessageReq();
  virtual ~DeleteMessageReq();

  DeleteMessageReq(const DeleteMessageReq& from);

  inline DeleteMessageReq& operator=(const DeleteMessageReq& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DeleteMessageReq& default_instance();

  static inline const DeleteMessageReq* internal_default_instance() {
    return reinterpret_cast<const DeleteMessageReq*>(
               &_DeleteMessageReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    19;

  void Swap(DeleteMessageReq* other);

  // implements Message ----------------------------------------------

  inline DeleteMessageReq* New() const PROTOBUF_FINAL { return New(NULL); }

  DeleteMessageReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DeleteMessageReq& from);
  void MergeFrom(const DeleteMessageReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DeleteMessageReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string token = 1;
  void clear_token();
  static const int kTokenFieldNumber = 1;
  const ::std::string& token() const;
  void set_token(const ::std::string& value);
  #if LANG_CXX11
  void set_token(::std::string&& value);
  #endif
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  ::std::string* mutable_token();
  ::std::string* release_token();
  void set_allocated_token(::std::string* token);

  // string id = 2;
  void clear_id();
  static const int kIdFieldNumber = 2;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // @@protoc_insertion_point(class_scope:ttmall.DeleteMessageReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr token_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  mutable int _cached_size_;
  friend struct protobuf_public_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DeleteMessageRep : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ttmall.DeleteMessageRep) */ {
 public:
  DeleteMessageRep();
  virtual ~DeleteMessageRep();

  DeleteMessageRep(const DeleteMessageRep& from);

  inline DeleteMessageRep& operator=(const DeleteMessageRep& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DeleteMessageRep& default_instance();

  static inline const DeleteMessageRep* internal_default_instance() {
    return reinterpret_cast<const DeleteMessageRep*>(
               &_DeleteMessageRep_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    20;

  void Swap(DeleteMessageRep* other);

  // implements Message ----------------------------------------------

  inline DeleteMessageRep* New() const PROTOBUF_FINAL { return New(NULL); }

  DeleteMessageRep* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DeleteMessageRep& from);
  void MergeFrom(const DeleteMessageRep& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DeleteMessageRep* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // @@protoc_insertion_point(class_scope:ttmall.DeleteMessageRep)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  mutable int _cached_size_;
  friend struct protobuf_public_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SetMessageReadReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ttmall.SetMessageReadReq) */ {
 public:
  SetMessageReadReq();
  virtual ~SetMessageReadReq();

  SetMessageReadReq(const SetMessageReadReq& from);

  inline SetMessageReadReq& operator=(const SetMessageReadReq& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SetMessageReadReq& default_instance();

  static inline const SetMessageReadReq* internal_default_instance() {
    return reinterpret_cast<const SetMessageReadReq*>(
               &_SetMessageReadReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    21;

  void Swap(SetMessageReadReq* other);

  // implements Message ----------------------------------------------

  inline SetMessageReadReq* New() const PROTOBUF_FINAL { return New(NULL); }

  SetMessageReadReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SetMessageReadReq& from);
  void MergeFrom(const SetMessageReadReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SetMessageReadReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string token = 1;
  void clear_token();
  static const int kTokenFieldNumber = 1;
  const ::std::string& token() const;
  void set_token(const ::std::string& value);
  #if LANG_CXX11
  void set_token(::std::string&& value);
  #endif
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  ::std::string* mutable_token();
  ::std::string* release_token();
  void set_allocated_token(::std::string* token);

  // string id = 2;
  void clear_id();
  static const int kIdFieldNumber = 2;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // @@protoc_insertion_point(class_scope:ttmall.SetMessageReadReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr token_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  mutable int _cached_size_;
  friend struct protobuf_public_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SetMessageReadRep : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ttmall.SetMessageReadRep) */ {
 public:
  SetMessageReadRep();
  virtual ~SetMessageReadRep();

  SetMessageReadRep(const SetMessageReadRep& from);

  inline SetMessageReadRep& operator=(const SetMessageReadRep& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SetMessageReadRep& default_instance();

  static inline const SetMessageReadRep* internal_default_instance() {
    return reinterpret_cast<const SetMessageReadRep*>(
               &_SetMessageReadRep_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    22;

  void Swap(SetMessageReadRep* other);

  // implements Message ----------------------------------------------

  inline SetMessageReadRep* New() const PROTOBUF_FINAL { return New(NULL); }

  SetMessageReadRep* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SetMessageReadRep& from);
  void MergeFrom(const SetMessageReadRep& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SetMessageReadRep* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // int32 count = 2;
  void clear_count();
  static const int kCountFieldNumber = 2;
  ::google::protobuf::int32 count() const;
  void set_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ttmall.SetMessageReadRep)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::int32 count_;
  mutable int _cached_size_;
  friend struct protobuf_public_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetNewMessageReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ttmall.GetNewMessageReq) */ {
 public:
  GetNewMessageReq();
  virtual ~GetNewMessageReq();

  GetNewMessageReq(const GetNewMessageReq& from);

  inline GetNewMessageReq& operator=(const GetNewMessageReq& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetNewMessageReq& default_instance();

  static inline const GetNewMessageReq* internal_default_instance() {
    return reinterpret_cast<const GetNewMessageReq*>(
               &_GetNewMessageReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    23;

  void Swap(GetNewMessageReq* other);

  // implements Message ----------------------------------------------

  inline GetNewMessageReq* New() const PROTOBUF_FINAL { return New(NULL); }

  GetNewMessageReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetNewMessageReq& from);
  void MergeFrom(const GetNewMessageReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetNewMessageReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string token = 1;
  void clear_token();
  static const int kTokenFieldNumber = 1;
  const ::std::string& token() const;
  void set_token(const ::std::string& value);
  #if LANG_CXX11
  void set_token(::std::string&& value);
  #endif
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  ::std::string* mutable_token();
  ::std::string* release_token();
  void set_allocated_token(::std::string* token);

  // @@protoc_insertion_point(class_scope:ttmall.GetNewMessageReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr token_;
  mutable int _cached_size_;
  friend struct protobuf_public_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetNewMessageRep : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ttmall.GetNewMessageRep) */ {
 public:
  GetNewMessageRep();
  virtual ~GetNewMessageRep();

  GetNewMessageRep(const GetNewMessageRep& from);

  inline GetNewMessageRep& operator=(const GetNewMessageRep& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetNewMessageRep& default_instance();

  static inline const GetNewMessageRep* internal_default_instance() {
    return reinterpret_cast<const GetNewMessageRep*>(
               &_GetNewMessageRep_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    24;

  void Swap(GetNewMessageRep* other);

  // implements Message ----------------------------------------------

  inline GetNewMessageRep* New() const PROTOBUF_FINAL { return New(NULL); }

  GetNewMessageRep* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetNewMessageRep& from);
  void MergeFrom(const GetNewMessageRep& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetNewMessageRep* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 count = 1;
  void clear_count();
  static const int kCountFieldNumber = 1;
  ::google::protobuf::int32 count() const;
  void set_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ttmall.GetNewMessageRep)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 count_;
  mutable int _cached_size_;
  friend struct protobuf_public_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CoordInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ttmall.CoordInfo) */ {
 public:
  CoordInfo();
  virtual ~CoordInfo();

  CoordInfo(const CoordInfo& from);

  inline CoordInfo& operator=(const CoordInfo& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CoordInfo& default_instance();

  static inline const CoordInfo* internal_default_instance() {
    return reinterpret_cast<const CoordInfo*>(
               &_CoordInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    25;

  void Swap(CoordInfo* other);

  // implements Message ----------------------------------------------

  inline CoordInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  CoordInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CoordInfo& from);
  void MergeFrom(const CoordInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CoordInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double lng = 1;
  void clear_lng();
  static const int kLngFieldNumber = 1;
  double lng() const;
  void set_lng(double value);

  // double lat = 2;
  void clear_lat();
  static const int kLatFieldNumber = 2;
  double lat() const;
  void set_lat(double value);

  // @@protoc_insertion_point(class_scope:ttmall.CoordInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  double lng_;
  double lat_;
  mutable int _cached_size_;
  friend struct protobuf_public_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RegionInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ttmall.RegionInfo) */ {
 public:
  RegionInfo();
  virtual ~RegionInfo();

  RegionInfo(const RegionInfo& from);

  inline RegionInfo& operator=(const RegionInfo& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RegionInfo& default_instance();

  static inline const RegionInfo* internal_default_instance() {
    return reinterpret_cast<const RegionInfo*>(
               &_RegionInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    26;

  void Swap(RegionInfo* other);

  // implements Message ----------------------------------------------

  inline RegionInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  RegionInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RegionInfo& from);
  void MergeFrom(const RegionInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RegionInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string parent = 3;
  void clear_parent();
  static const int kParentFieldNumber = 3;
  const ::std::string& parent() const;
  void set_parent(const ::std::string& value);
  #if LANG_CXX11
  void set_parent(::std::string&& value);
  #endif
  void set_parent(const char* value);
  void set_parent(const char* value, size_t size);
  ::std::string* mutable_parent();
  ::std::string* release_parent();
  void set_allocated_parent(::std::string* parent);

  // string code = 4;
  void clear_code();
  static const int kCodeFieldNumber = 4;
  const ::std::string& code() const;
  void set_code(const ::std::string& value);
  #if LANG_CXX11
  void set_code(::std::string&& value);
  #endif
  void set_code(const char* value);
  void set_code(const char* value, size_t size);
  ::std::string* mutable_code();
  ::std::string* release_code();
  void set_allocated_code(::std::string* code);

  // @@protoc_insertion_point(class_scope:ttmall.RegionInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr parent_;
  ::google::protobuf::internal::ArenaStringPtr code_;
  mutable int _cached_size_;
  friend struct protobuf_public_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ImageInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ttmall.ImageInfo) */ {
 public:
  ImageInfo();
  virtual ~ImageInfo();

  ImageInfo(const ImageInfo& from);

  inline ImageInfo& operator=(const ImageInfo& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ImageInfo& default_instance();

  static inline const ImageInfo* internal_default_instance() {
    return reinterpret_cast<const ImageInfo*>(
               &_ImageInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    27;

  void Swap(ImageInfo* other);

  // implements Message ----------------------------------------------

  inline ImageInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  ImageInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ImageInfo& from);
  void MergeFrom(const ImageInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ImageInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string small = 1;
  void clear_small();
  static const int kSmallFieldNumber = 1;
  const ::std::string& small() const;
  void set_small(const ::std::string& value);
  #if LANG_CXX11
  void set_small(::std::string&& value);
  #endif
  void set_small(const char* value);
  void set_small(const char* value, size_t size);
  ::std::string* mutable_small();
  ::std::string* release_small();
  void set_allocated_small(::std::string* small);

  // string big = 2;
  void clear_big();
  static const int kBigFieldNumber = 2;
  const ::std::string& big() const;
  void set_big(const ::std::string& value);
  #if LANG_CXX11
  void set_big(::std::string&& value);
  #endif
  void set_big(const char* value);
  void set_big(const char* value, size_t size);
  ::std::string* mutable_big();
  ::std::string* release_big();
  void set_allocated_big(::std::string* big);

  // string md5 = 3;
  void clear_md5();
  static const int kMd5FieldNumber = 3;
  const ::std::string& md5() const;
  void set_md5(const ::std::string& value);
  #if LANG_CXX11
  void set_md5(::std::string&& value);
  #endif
  void set_md5(const char* value);
  void set_md5(const char* value, size_t size);
  ::std::string* mutable_md5();
  ::std::string* release_md5();
  void set_allocated_md5(::std::string* md5);

  // @@protoc_insertion_point(class_scope:ttmall.ImageInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr small_;
  ::google::protobuf::internal::ArenaStringPtr big_;
  ::google::protobuf::internal::ArenaStringPtr md5_;
  mutable int _cached_size_;
  friend struct protobuf_public_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CouponInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ttmall.CouponInfo) */ {
 public:
  CouponInfo();
  virtual ~CouponInfo();

  CouponInfo(const CouponInfo& from);

  inline CouponInfo& operator=(const CouponInfo& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CouponInfo& default_instance();

  static inline const CouponInfo* internal_default_instance() {
    return reinterpret_cast<const CouponInfo*>(
               &_CouponInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    28;

  void Swap(CouponInfo* other);

  // implements Message ----------------------------------------------

  inline CouponInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  CouponInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CouponInfo& from);
  void MergeFrom(const CouponInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CouponInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // int32 amount = 3;
  void clear_amount();
  static const int kAmountFieldNumber = 3;
  ::google::protobuf::int32 amount() const;
  void set_amount(::google::protobuf::int32 value);

  // int32 discount = 4;
  void clear_discount();
  static const int kDiscountFieldNumber = 4;
  ::google::protobuf::int32 discount() const;
  void set_discount(::google::protobuf::int32 value);

  // int64 exp_time = 5;
  void clear_exp_time();
  static const int kExpTimeFieldNumber = 5;
  ::google::protobuf::int64 exp_time() const;
  void set_exp_time(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:ttmall.CouponInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::int32 amount_;
  ::google::protobuf::int32 discount_;
  ::google::protobuf::int64 exp_time_;
  mutable int _cached_size_;
  friend struct protobuf_public_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CarInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ttmall.CarInfo) */ {
 public:
  CarInfo();
  virtual ~CarInfo();

  CarInfo(const CarInfo& from);

  inline CarInfo& operator=(const CarInfo& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CarInfo& default_instance();

  static inline const CarInfo* internal_default_instance() {
    return reinterpret_cast<const CarInfo*>(
               &_CarInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    29;

  void Swap(CarInfo* other);

  // implements Message ----------------------------------------------

  inline CarInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  CarInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CarInfo& from);
  void MergeFrom(const CarInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CarInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ttmall.ImageInfo photos = 9;
  int photos_size() const;
  void clear_photos();
  static const int kPhotosFieldNumber = 9;
  const ::ttmall::ImageInfo& photos(int index) const;
  ::ttmall::ImageInfo* mutable_photos(int index);
  ::ttmall::ImageInfo* add_photos();
  ::google::protobuf::RepeatedPtrField< ::ttmall::ImageInfo >*
      mutable_photos();
  const ::google::protobuf::RepeatedPtrField< ::ttmall::ImageInfo >&
      photos() const;

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string model = 3;
  void clear_model();
  static const int kModelFieldNumber = 3;
  const ::std::string& model() const;
  void set_model(const ::std::string& value);
  #if LANG_CXX11
  void set_model(::std::string&& value);
  #endif
  void set_model(const char* value);
  void set_model(const char* value, size_t size);
  ::std::string* mutable_model();
  ::std::string* release_model();
  void set_allocated_model(::std::string* model);

  // string length = 4;
  void clear_length();
  static const int kLengthFieldNumber = 4;
  const ::std::string& length() const;
  void set_length(const ::std::string& value);
  #if LANG_CXX11
  void set_length(::std::string&& value);
  #endif
  void set_length(const char* value);
  void set_length(const char* value, size_t size);
  ::std::string* mutable_length();
  ::std::string* release_length();
  void set_allocated_length(::std::string* length);

  // string load = 5;
  void clear_load();
  static const int kLoadFieldNumber = 5;
  const ::std::string& load() const;
  void set_load(const ::std::string& value);
  #if LANG_CXX11
  void set_load(::std::string&& value);
  #endif
  void set_load(const char* value);
  void set_load(const char* value, size_t size);
  ::std::string* mutable_load();
  ::std::string* release_load();
  void set_allocated_load(::std::string* load);

  // string capacity = 6;
  void clear_capacity();
  static const int kCapacityFieldNumber = 6;
  const ::std::string& capacity() const;
  void set_capacity(const ::std::string& value);
  #if LANG_CXX11
  void set_capacity(::std::string&& value);
  #endif
  void set_capacity(const char* value);
  void set_capacity(const char* value, size_t size);
  ::std::string* mutable_capacity();
  ::std::string* release_capacity();
  void set_allocated_capacity(::std::string* capacity);

  // string color = 7;
  void clear_color();
  static const int kColorFieldNumber = 7;
  const ::std::string& color() const;
  void set_color(const ::std::string& value);
  #if LANG_CXX11
  void set_color(::std::string&& value);
  #endif
  void set_color(const char* value);
  void set_color(const char* value, size_t size);
  ::std::string* mutable_color();
  ::std::string* release_color();
  void set_allocated_color(::std::string* color);

  // string mark = 8;
  void clear_mark();
  static const int kMarkFieldNumber = 8;
  const ::std::string& mark() const;
  void set_mark(const ::std::string& value);
  #if LANG_CXX11
  void set_mark(::std::string&& value);
  #endif
  void set_mark(const char* value);
  void set_mark(const char* value, size_t size);
  ::std::string* mutable_mark();
  ::std::string* release_mark();
  void set_allocated_mark(::std::string* mark);

  // @@protoc_insertion_point(class_scope:ttmall.CarInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::ttmall::ImageInfo > photos_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr model_;
  ::google::protobuf::internal::ArenaStringPtr length_;
  ::google::protobuf::internal::ArenaStringPtr load_;
  ::google::protobuf::internal::ArenaStringPtr capacity_;
  ::google::protobuf::internal::ArenaStringPtr color_;
  ::google::protobuf::internal::ArenaStringPtr mark_;
  mutable int _cached_size_;
  friend struct protobuf_public_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AddressInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ttmall.AddressInfo) */ {
 public:
  AddressInfo();
  virtual ~AddressInfo();

  AddressInfo(const AddressInfo& from);

  inline AddressInfo& operator=(const AddressInfo& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AddressInfo& default_instance();

  static inline const AddressInfo* internal_default_instance() {
    return reinterpret_cast<const AddressInfo*>(
               &_AddressInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    30;

  void Swap(AddressInfo* other);

  // implements Message ----------------------------------------------

  inline AddressInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  AddressInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AddressInfo& from);
  void MergeFrom(const AddressInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AddressInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string regions = 11;
  int regions_size() const;
  void clear_regions();
  static const int kRegionsFieldNumber = 11;
  const ::std::string& regions(int index) const;
  ::std::string* mutable_regions(int index);
  void set_regions(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_regions(int index, ::std::string&& value);
  #endif
  void set_regions(int index, const char* value);
  void set_regions(int index, const char* value, size_t size);
  ::std::string* add_regions();
  void add_regions(const ::std::string& value);
  #if LANG_CXX11
  void add_regions(::std::string&& value);
  #endif
  void add_regions(const char* value);
  void add_regions(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& regions() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_regions();

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string province = 3;
  void clear_province();
  static const int kProvinceFieldNumber = 3;
  const ::std::string& province() const;
  void set_province(const ::std::string& value);
  #if LANG_CXX11
  void set_province(::std::string&& value);
  #endif
  void set_province(const char* value);
  void set_province(const char* value, size_t size);
  ::std::string* mutable_province();
  ::std::string* release_province();
  void set_allocated_province(::std::string* province);

  // string city = 4;
  void clear_city();
  static const int kCityFieldNumber = 4;
  const ::std::string& city() const;
  void set_city(const ::std::string& value);
  #if LANG_CXX11
  void set_city(::std::string&& value);
  #endif
  void set_city(const char* value);
  void set_city(const char* value, size_t size);
  ::std::string* mutable_city();
  ::std::string* release_city();
  void set_allocated_city(::std::string* city);

  // string area = 5;
  void clear_area();
  static const int kAreaFieldNumber = 5;
  const ::std::string& area() const;
  void set_area(const ::std::string& value);
  #if LANG_CXX11
  void set_area(::std::string&& value);
  #endif
  void set_area(const char* value);
  void set_area(const char* value, size_t size);
  ::std::string* mutable_area();
  ::std::string* release_area();
  void set_allocated_area(::std::string* area);

  // string addr = 6;
  void clear_addr();
  static const int kAddrFieldNumber = 6;
  const ::std::string& addr() const;
  void set_addr(const ::std::string& value);
  #if LANG_CXX11
  void set_addr(::std::string&& value);
  #endif
  void set_addr(const char* value);
  void set_addr(const char* value, size_t size);
  ::std::string* mutable_addr();
  ::std::string* release_addr();
  void set_allocated_addr(::std::string* addr);

  // string contact = 7;
  void clear_contact();
  static const int kContactFieldNumber = 7;
  const ::std::string& contact() const;
  void set_contact(const ::std::string& value);
  #if LANG_CXX11
  void set_contact(::std::string&& value);
  #endif
  void set_contact(const char* value);
  void set_contact(const char* value, size_t size);
  ::std::string* mutable_contact();
  ::std::string* release_contact();
  void set_allocated_contact(::std::string* contact);

  // string mobile = 8;
  void clear_mobile();
  static const int kMobileFieldNumber = 8;
  const ::std::string& mobile() const;
  void set_mobile(const ::std::string& value);
  #if LANG_CXX11
  void set_mobile(::std::string&& value);
  #endif
  void set_mobile(const char* value);
  void set_mobile(const char* value, size_t size);
  ::std::string* mutable_mobile();
  ::std::string* release_mobile();
  void set_allocated_mobile(::std::string* mobile);

  // .ttmall.CoordInfo coord = 9;
  bool has_coord() const;
  void clear_coord();
  static const int kCoordFieldNumber = 9;
  const ::ttmall::CoordInfo& coord() const;
  ::ttmall::CoordInfo* mutable_coord();
  ::ttmall::CoordInfo* release_coord();
  void set_allocated_coord(::ttmall::CoordInfo* coord);

  // bool default = 10;
  void clear_default_();
  static const int kDefaultFieldNumber = 10;
  bool default_() const;
  void set_default_(bool value);

  // bool is_pass = 12;
  void clear_is_pass();
  static const int kIsPassFieldNumber = 12;
  bool is_pass() const;
  void set_is_pass(bool value);

  // @@protoc_insertion_point(class_scope:ttmall.AddressInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> regions_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr province_;
  ::google::protobuf::internal::ArenaStringPtr city_;
  ::google::protobuf::internal::ArenaStringPtr area_;
  ::google::protobuf::internal::ArenaStringPtr addr_;
  ::google::protobuf::internal::ArenaStringPtr contact_;
  ::google::protobuf::internal::ArenaStringPtr mobile_;
  ::ttmall::CoordInfo* coord_;
  bool default__;
  bool is_pass_;
  mutable int _cached_size_;
  friend struct protobuf_public_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class WareInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ttmall.WareInfo) */ {
 public:
  WareInfo();
  virtual ~WareInfo();

  WareInfo(const WareInfo& from);

  inline WareInfo& operator=(const WareInfo& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WareInfo& default_instance();

  static inline const WareInfo* internal_default_instance() {
    return reinterpret_cast<const WareInfo*>(
               &_WareInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    31;

  void Swap(WareInfo* other);

  // implements Message ----------------------------------------------

  inline WareInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  WareInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const WareInfo& from);
  void MergeFrom(const WareInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(WareInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string province = 3;
  void clear_province();
  static const int kProvinceFieldNumber = 3;
  const ::std::string& province() const;
  void set_province(const ::std::string& value);
  #if LANG_CXX11
  void set_province(::std::string&& value);
  #endif
  void set_province(const char* value);
  void set_province(const char* value, size_t size);
  ::std::string* mutable_province();
  ::std::string* release_province();
  void set_allocated_province(::std::string* province);

  // string city = 4;
  void clear_city();
  static const int kCityFieldNumber = 4;
  const ::std::string& city() const;
  void set_city(const ::std::string& value);
  #if LANG_CXX11
  void set_city(::std::string&& value);
  #endif
  void set_city(const char* value);
  void set_city(const char* value, size_t size);
  ::std::string* mutable_city();
  ::std::string* release_city();
  void set_allocated_city(::std::string* city);

  // string area = 5;
  void clear_area();
  static const int kAreaFieldNumber = 5;
  const ::std::string& area() const;
  void set_area(const ::std::string& value);
  #if LANG_CXX11
  void set_area(::std::string&& value);
  #endif
  void set_area(const char* value);
  void set_area(const char* value, size_t size);
  ::std::string* mutable_area();
  ::std::string* release_area();
  void set_allocated_area(::std::string* area);

  // string addr = 6;
  void clear_addr();
  static const int kAddrFieldNumber = 6;
  const ::std::string& addr() const;
  void set_addr(const ::std::string& value);
  #if LANG_CXX11
  void set_addr(::std::string&& value);
  #endif
  void set_addr(const char* value);
  void set_addr(const char* value, size_t size);
  ::std::string* mutable_addr();
  ::std::string* release_addr();
  void set_allocated_addr(::std::string* addr);

  // string contact = 7;
  void clear_contact();
  static const int kContactFieldNumber = 7;
  const ::std::string& contact() const;
  void set_contact(const ::std::string& value);
  #if LANG_CXX11
  void set_contact(::std::string&& value);
  #endif
  void set_contact(const char* value);
  void set_contact(const char* value, size_t size);
  ::std::string* mutable_contact();
  ::std::string* release_contact();
  void set_allocated_contact(::std::string* contact);

  // string mobile = 8;
  void clear_mobile();
  static const int kMobileFieldNumber = 8;
  const ::std::string& mobile() const;
  void set_mobile(const ::std::string& value);
  #if LANG_CXX11
  void set_mobile(::std::string&& value);
  #endif
  void set_mobile(const char* value);
  void set_mobile(const char* value, size_t size);
  ::std::string* mutable_mobile();
  ::std::string* release_mobile();
  void set_allocated_mobile(::std::string* mobile);

  // .ttmall.CoordInfo coord = 9;
  bool has_coord() const;
  void clear_coord();
  static const int kCoordFieldNumber = 9;
  const ::ttmall::CoordInfo& coord() const;
  ::ttmall::CoordInfo* mutable_coord();
  ::ttmall::CoordInfo* release_coord();
  void set_allocated_coord(::ttmall::CoordInfo* coord);

  // @@protoc_insertion_point(class_scope:ttmall.WareInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr province_;
  ::google::protobuf::internal::ArenaStringPtr city_;
  ::google::protobuf::internal::ArenaStringPtr area_;
  ::google::protobuf::internal::ArenaStringPtr addr_;
  ::google::protobuf::internal::ArenaStringPtr contact_;
  ::google::protobuf::internal::ArenaStringPtr mobile_;
  ::ttmall::CoordInfo* coord_;
  mutable int _cached_size_;
  friend struct protobuf_public_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserType : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ttmall.UserType) */ {
 public:
  UserType();
  virtual ~UserType();

  UserType(const UserType& from);

  inline UserType& operator=(const UserType& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UserType& default_instance();

  static inline const UserType* internal_default_instance() {
    return reinterpret_cast<const UserType*>(
               &_UserType_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    32;

  void Swap(UserType* other);

  // implements Message ----------------------------------------------

  inline UserType* New() const PROTOBUF_FINAL { return New(NULL); }

  UserType* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UserType& from);
  void MergeFrom(const UserType& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UserType* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // string code = 2;
  void clear_code();
  static const int kCodeFieldNumber = 2;
  const ::std::string& code() const;
  void set_code(const ::std::string& value);
  #if LANG_CXX11
  void set_code(::std::string&& value);
  #endif
  void set_code(const char* value);
  void set_code(const char* value, size_t size);
  ::std::string* mutable_code();
  ::std::string* release_code();
  void set_allocated_code(::std::string* code);

  // string name = 3;
  void clear_name();
  static const int kNameFieldNumber = 3;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string parent = 4;
  void clear_parent();
  static const int kParentFieldNumber = 4;
  const ::std::string& parent() const;
  void set_parent(const ::std::string& value);
  #if LANG_CXX11
  void set_parent(::std::string&& value);
  #endif
  void set_parent(const char* value);
  void set_parent(const char* value, size_t size);
  ::std::string* mutable_parent();
  ::std::string* release_parent();
  void set_allocated_parent(::std::string* parent);

  // @@protoc_insertion_point(class_scope:ttmall.UserType)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr code_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr parent_;
  mutable int _cached_size_;
  friend struct protobuf_public_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ttmall.UserInfo) */ {
 public:
  UserInfo();
  virtual ~UserInfo();

  UserInfo(const UserInfo& from);

  inline UserInfo& operator=(const UserInfo& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UserInfo& default_instance();

  static inline const UserInfo* internal_default_instance() {
    return reinterpret_cast<const UserInfo*>(
               &_UserInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    33;

  void Swap(UserInfo* other);

  // implements Message ----------------------------------------------

  inline UserInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  UserInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UserInfo& from);
  void MergeFrom(const UserInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UserInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ttmall.ImageInfo images = 6;
  int images_size() const;
  void clear_images();
  static const int kImagesFieldNumber = 6;
  const ::ttmall::ImageInfo& images(int index) const;
  ::ttmall::ImageInfo* mutable_images(int index);
  ::ttmall::ImageInfo* add_images();
  ::google::protobuf::RepeatedPtrField< ::ttmall::ImageInfo >*
      mutable_images();
  const ::google::protobuf::RepeatedPtrField< ::ttmall::ImageInfo >&
      images() const;

  // repeated string types = 15;
  int types_size() const;
  void clear_types();
  static const int kTypesFieldNumber = 15;
  const ::std::string& types(int index) const;
  ::std::string* mutable_types(int index);
  void set_types(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_types(int index, ::std::string&& value);
  #endif
  void set_types(int index, const char* value);
  void set_types(int index, const char* value, size_t size);
  ::std::string* add_types();
  void add_types(const ::std::string& value);
  #if LANG_CXX11
  void add_types(::std::string&& value);
  #endif
  void add_types(const char* value);
  void add_types(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& types() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_types();

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string owner = 4;
  void clear_owner();
  static const int kOwnerFieldNumber = 4;
  const ::std::string& owner() const;
  void set_owner(const ::std::string& value);
  #if LANG_CXX11
  void set_owner(::std::string&& value);
  #endif
  void set_owner(const char* value);
  void set_owner(const char* value, size_t size);
  ::std::string* mutable_owner();
  ::std::string* release_owner();
  void set_allocated_owner(::std::string* owner);

  // string type = 5;
  void clear_type();
  static const int kTypeFieldNumber = 5;
  const ::std::string& type() const;
  void set_type(const ::std::string& value);
  #if LANG_CXX11
  void set_type(::std::string&& value);
  #endif
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  ::std::string* mutable_type();
  ::std::string* release_type();
  void set_allocated_type(::std::string* type);

  // string mobile = 7;
  void clear_mobile();
  static const int kMobileFieldNumber = 7;
  const ::std::string& mobile() const;
  void set_mobile(const ::std::string& value);
  #if LANG_CXX11
  void set_mobile(::std::string&& value);
  #endif
  void set_mobile(const char* value);
  void set_mobile(const char* value, size_t size);
  ::std::string* mutable_mobile();
  ::std::string* release_mobile();
  void set_allocated_mobile(::std::string* mobile);

  // string deliver_time = 17;
  void clear_deliver_time();
  static const int kDeliverTimeFieldNumber = 17;
  const ::std::string& deliver_time() const;
  void set_deliver_time(const ::std::string& value);
  #if LANG_CXX11
  void set_deliver_time(::std::string&& value);
  #endif
  void set_deliver_time(const char* value);
  void set_deliver_time(const char* value, size_t size);
  ::std::string* mutable_deliver_time();
  ::std::string* release_deliver_time();
  void set_allocated_deliver_time(::std::string* deliver_time);

  // string mark = 18;
  void clear_mark();
  static const int kMarkFieldNumber = 18;
  const ::std::string& mark() const;
  void set_mark(const ::std::string& value);
  #if LANG_CXX11
  void set_mark(::std::string&& value);
  #endif
  void set_mark(const char* value);
  void set_mark(const char* value, size_t size);
  ::std::string* mutable_mark();
  ::std::string* release_mark();
  void set_allocated_mark(::std::string* mark);

  // .ttmall.ImageInfo avatar = 3;
  bool has_avatar() const;
  void clear_avatar();
  static const int kAvatarFieldNumber = 3;
  const ::ttmall::ImageInfo& avatar() const;
  ::ttmall::ImageInfo* mutable_avatar();
  ::ttmall::ImageInfo* release_avatar();
  void set_allocated_avatar(::ttmall::ImageInfo* avatar);

  // .ttmall.AddressInfo address = 13;
  bool has_address() const;
  void clear_address();
  static const int kAddressFieldNumber = 13;
  const ::ttmall::AddressInfo& address() const;
  ::ttmall::AddressInfo* mutable_address();
  ::ttmall::AddressInfo* release_address();
  void set_allocated_address(::ttmall::AddressInfo* address);

  // int64 login_time = 8;
  void clear_login_time();
  static const int kLoginTimeFieldNumber = 8;
  ::google::protobuf::int64 login_time() const;
  void set_login_time(::google::protobuf::int64 value);

  // int64 reg_time = 9;
  void clear_reg_time();
  static const int kRegTimeFieldNumber = 9;
  ::google::protobuf::int64 reg_time() const;
  void set_reg_time(::google::protobuf::int64 value);

  // int32 balance = 10;
  void clear_balance();
  static const int kBalanceFieldNumber = 10;
  ::google::protobuf::int32 balance() const;
  void set_balance(::google::protobuf::int32 value);

  // int32 coupon_num = 11;
  void clear_coupon_num();
  static const int kCouponNumFieldNumber = 11;
  ::google::protobuf::int32 coupon_num() const;
  void set_coupon_num(::google::protobuf::int32 value);

  // int32 level = 14;
  void clear_level();
  static const int kLevelFieldNumber = 14;
  ::google::protobuf::int32 level() const;
  void set_level(::google::protobuf::int32 value);

  // bool is_pass = 12;
  void clear_is_pass();
  static const int kIsPassFieldNumber = 12;
  bool is_pass() const;
  void set_is_pass(bool value);

  // bool disabled = 16;
  void clear_disabled();
  static const int kDisabledFieldNumber = 16;
  bool disabled() const;
  void set_disabled(bool value);

  // @@protoc_insertion_point(class_scope:ttmall.UserInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::ttmall::ImageInfo > images_;
  ::google::protobuf::RepeatedPtrField< ::std::string> types_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr owner_;
  ::google::protobuf::internal::ArenaStringPtr type_;
  ::google::protobuf::internal::ArenaStringPtr mobile_;
  ::google::protobuf::internal::ArenaStringPtr deliver_time_;
  ::google::protobuf::internal::ArenaStringPtr mark_;
  ::ttmall::ImageInfo* avatar_;
  ::ttmall::AddressInfo* address_;
  ::google::protobuf::int64 login_time_;
  ::google::protobuf::int64 reg_time_;
  ::google::protobuf::int32 balance_;
  ::google::protobuf::int32 coupon_num_;
  ::google::protobuf::int32 level_;
  bool is_pass_;
  bool disabled_;
  mutable int _cached_size_;
  friend struct protobuf_public_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class IndexReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ttmall.IndexReq) */ {
 public:
  IndexReq();
  virtual ~IndexReq();

  IndexReq(const IndexReq& from);

  inline IndexReq& operator=(const IndexReq& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndexReq& default_instance();

  static inline const IndexReq* internal_default_instance() {
    return reinterpret_cast<const IndexReq*>(
               &_IndexReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    34;

  void Swap(IndexReq* other);

  // implements Message ----------------------------------------------

  inline IndexReq* New() const PROTOBUF_FINAL { return New(NULL); }

  IndexReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const IndexReq& from);
  void MergeFrom(const IndexReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(IndexReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string token = 1;
  void clear_token();
  static const int kTokenFieldNumber = 1;
  const ::std::string& token() const;
  void set_token(const ::std::string& value);
  #if LANG_CXX11
  void set_token(::std::string&& value);
  #endif
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  ::std::string* mutable_token();
  ::std::string* release_token();
  void set_allocated_token(::std::string* token);

  // @@protoc_insertion_point(class_scope:ttmall.IndexReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr token_;
  mutable int _cached_size_;
  friend struct protobuf_public_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class IndexType : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ttmall.IndexType) */ {
 public:
  IndexType();
  virtual ~IndexType();

  IndexType(const IndexType& from);

  inline IndexType& operator=(const IndexType& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndexType& default_instance();

  static inline const IndexType* internal_default_instance() {
    return reinterpret_cast<const IndexType*>(
               &_IndexType_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    35;

  void Swap(IndexType* other);

  // implements Message ----------------------------------------------

  inline IndexType* New() const PROTOBUF_FINAL { return New(NULL); }

  IndexType* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const IndexType& from);
  void MergeFrom(const IndexType& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(IndexType* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // .ttmall.ImageInfo icon_m = 3;
  bool has_icon_m() const;
  void clear_icon_m();
  static const int kIconMFieldNumber = 3;
  const ::ttmall::ImageInfo& icon_m() const;
  ::ttmall::ImageInfo* mutable_icon_m();
  ::ttmall::ImageInfo* release_icon_m();
  void set_allocated_icon_m(::ttmall::ImageInfo* icon_m);

  // .ttmall.ImageInfo icon_s = 4;
  bool has_icon_s() const;
  void clear_icon_s();
  static const int kIconSFieldNumber = 4;
  const ::ttmall::ImageInfo& icon_s() const;
  ::ttmall::ImageInfo* mutable_icon_s();
  ::ttmall::ImageInfo* release_icon_s();
  void set_allocated_icon_s(::ttmall::ImageInfo* icon_s);

  // @@protoc_insertion_point(class_scope:ttmall.IndexType)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::ttmall::ImageInfo* icon_m_;
  ::ttmall::ImageInfo* icon_s_;
  mutable int _cached_size_;
  friend struct protobuf_public_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class IndexAd : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ttmall.IndexAd) */ {
 public:
  IndexAd();
  virtual ~IndexAd();

  IndexAd(const IndexAd& from);

  inline IndexAd& operator=(const IndexAd& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndexAd& default_instance();

  static inline const IndexAd* internal_default_instance() {
    return reinterpret_cast<const IndexAd*>(
               &_IndexAd_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    36;

  void Swap(IndexAd* other);

  // implements Message ----------------------------------------------

  inline IndexAd* New() const PROTOBUF_FINAL { return New(NULL); }

  IndexAd* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const IndexAd& from);
  void MergeFrom(const IndexAd& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(IndexAd* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // string title = 2;
  void clear_title();
  static const int kTitleFieldNumber = 2;
  const ::std::string& title() const;
  void set_title(const ::std::string& value);
  #if LANG_CXX11
  void set_title(::std::string&& value);
  #endif
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  ::std::string* mutable_title();
  ::std::string* release_title();
  void set_allocated_title(::std::string* title);

  // .ttmall.ImageInfo image = 3;
  bool has_image() const;
  void clear_image();
  static const int kImageFieldNumber = 3;
  const ::ttmall::ImageInfo& image() const;
  ::ttmall::ImageInfo* mutable_image();
  ::ttmall::ImageInfo* release_image();
  void set_allocated_image(::ttmall::ImageInfo* image);

  // @@protoc_insertion_point(class_scope:ttmall.IndexAd)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr title_;
  ::ttmall::ImageInfo* image_;
  mutable int _cached_size_;
  friend struct protobuf_public_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class IndexAdGroup : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ttmall.IndexAdGroup) */ {
 public:
  IndexAdGroup();
  virtual ~IndexAdGroup();

  IndexAdGroup(const IndexAdGroup& from);

  inline IndexAdGroup& operator=(const IndexAdGroup& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndexAdGroup& default_instance();

  static inline const IndexAdGroup* internal_default_instance() {
    return reinterpret_cast<const IndexAdGroup*>(
               &_IndexAdGroup_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    37;

  void Swap(IndexAdGroup* other);

  // implements Message ----------------------------------------------

  inline IndexAdGroup* New() const PROTOBUF_FINAL { return New(NULL); }

  IndexAdGroup* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const IndexAdGroup& from);
  void MergeFrom(const IndexAdGroup& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(IndexAdGroup* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ttmall.IndexAd ads = 4;
  int ads_size() const;
  void clear_ads();
  static const int kAdsFieldNumber = 4;
  const ::ttmall::IndexAd& ads(int index) const;
  ::ttmall::IndexAd* mutable_ads(int index);
  ::ttmall::IndexAd* add_ads();
  ::google::protobuf::RepeatedPtrField< ::ttmall::IndexAd >*
      mutable_ads();
  const ::google::protobuf::RepeatedPtrField< ::ttmall::IndexAd >&
      ads() const;

  // string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string desc = 3;
  void clear_desc();
  static const int kDescFieldNumber = 3;
  const ::std::string& desc() const;
  void set_desc(const ::std::string& value);
  #if LANG_CXX11
  void set_desc(::std::string&& value);
  #endif
  void set_desc(const char* value);
  void set_desc(const char* value, size_t size);
  ::std::string* mutable_desc();
  ::std::string* release_desc();
  void set_allocated_desc(::std::string* desc);

  // .ttmall.AdPosition type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::ttmall::AdPosition type() const;
  void set_type(::ttmall::AdPosition value);

  // @@protoc_insertion_point(class_scope:ttmall.IndexAdGroup)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::ttmall::IndexAd > ads_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr desc_;
  int type_;
  mutable int _cached_size_;
  friend struct protobuf_public_2eproto::TableStruct;
};
// -------------------------------------------------------------------


// -------------------------------------------------------------------

class IndexRep : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ttmall.IndexRep) */ {
 public:
  IndexRep();
  virtual ~IndexRep();

  IndexRep(const IndexRep& from);

  inline IndexRep& operator=(const IndexRep& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndexRep& default_instance();

  static inline const IndexRep* internal_default_instance() {
    return reinterpret_cast<const IndexRep*>(
               &_IndexRep_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    39;

  void Swap(IndexRep* other);

  // implements Message ----------------------------------------------

  inline IndexRep* New() const PROTOBUF_FINAL { return New(NULL); }

  IndexRep* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const IndexRep& from);
  void MergeFrom(const IndexRep& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(IndexRep* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // repeated .ttmall.IndexType types = 1;
  int types_size() const;
  void clear_types();
  static const int kTypesFieldNumber = 1;
  const ::ttmall::IndexType& types(int index) const;
  ::ttmall::IndexType* mutable_types(int index);
  ::ttmall::IndexType* add_types();
  ::google::protobuf::RepeatedPtrField< ::ttmall::IndexType >*
      mutable_types();
  const ::google::protobuf::RepeatedPtrField< ::ttmall::IndexType >&
      types() const;

  // map<int32, .ttmall.IndexAdGroup> groups = 2;
  int groups_size() const;
  void clear_groups();
  static const int kGroupsFieldNumber = 2;
  const ::google::protobuf::Map< ::google::protobuf::int32, ::ttmall::IndexAdGroup >&
      groups() const;
  ::google::protobuf::Map< ::google::protobuf::int32, ::ttmall::IndexAdGroup >*
      mutable_groups();

  // string md5 = 3;
  void clear_md5();
  static const int kMd5FieldNumber = 3;
  const ::std::string& md5() const;
  void set_md5(const ::std::string& value);
  #if LANG_CXX11
  void set_md5(::std::string&& value);
  #endif
  void set_md5(const char* value);
  void set_md5(const char* value, size_t size);
  ::std::string* mutable_md5();
  ::std::string* release_md5();
  void set_allocated_md5(::std::string* md5);

  // @@protoc_insertion_point(class_scope:ttmall.IndexRep)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::ttmall::IndexType > types_;
  public:
  class IndexRep_GroupsEntry : public ::google::protobuf::internal::MapEntry<IndexRep_GroupsEntry, 
      ::google::protobuf::int32, ::ttmall::IndexAdGroup,
      ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > {
  public:
    typedef ::google::protobuf::internal::MapEntry<IndexRep_GroupsEntry, 
      ::google::protobuf::int32, ::ttmall::IndexAdGroup,
      ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > SuperType;
    IndexRep_GroupsEntry();
    IndexRep_GroupsEntry(::google::protobuf::Arena* arena);
    void MergeFrom(const ::google::protobuf::Message& other) PROTOBUF_FINAL;
    void MergeFrom(const IndexRep_GroupsEntry& other);
    static const Message* internal_default_instance() { return reinterpret_cast<const Message*>(&_IndexRep_GroupsEntry_default_instance_); }
    ::google::protobuf::Metadata GetMetadata() const;
  };
  ::google::protobuf::internal::MapField<
      IndexRep_GroupsEntry,
      ::google::protobuf::int32, ::ttmall::IndexAdGroup,
      ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > groups_;
  private:
  ::google::protobuf::internal::ArenaStringPtr md5_;
  mutable int _cached_size_;
  friend struct protobuf_public_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ListRegionsReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ttmall.ListRegionsReq) */ {
 public:
  ListRegionsReq();
  virtual ~ListRegionsReq();

  ListRegionsReq(const ListRegionsReq& from);

  inline ListRegionsReq& operator=(const ListRegionsReq& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ListRegionsReq& default_instance();

  static inline const ListRegionsReq* internal_default_instance() {
    return reinterpret_cast<const ListRegionsReq*>(
               &_ListRegionsReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    40;

  void Swap(ListRegionsReq* other);

  // implements Message ----------------------------------------------

  inline ListRegionsReq* New() const PROTOBUF_FINAL { return New(NULL); }

  ListRegionsReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ListRegionsReq& from);
  void MergeFrom(const ListRegionsReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ListRegionsReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string token = 1;
  void clear_token();
  static const int kTokenFieldNumber = 1;
  const ::std::string& token() const;
  void set_token(const ::std::string& value);
  #if LANG_CXX11
  void set_token(::std::string&& value);
  #endif
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  ::std::string* mutable_token();
  ::std::string* release_token();
  void set_allocated_token(::std::string* token);

  // @@protoc_insertion_point(class_scope:ttmall.ListRegionsReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr token_;
  mutable int _cached_size_;
  friend struct protobuf_public_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ListRegionsRep : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ttmall.ListRegionsRep) */ {
 public:
  ListRegionsRep();
  virtual ~ListRegionsRep();

  ListRegionsRep(const ListRegionsRep& from);

  inline ListRegionsRep& operator=(const ListRegionsRep& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ListRegionsRep& default_instance();

  static inline const ListRegionsRep* internal_default_instance() {
    return reinterpret_cast<const ListRegionsRep*>(
               &_ListRegionsRep_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    41;

  void Swap(ListRegionsRep* other);

  // implements Message ----------------------------------------------

  inline ListRegionsRep* New() const PROTOBUF_FINAL { return New(NULL); }

  ListRegionsRep* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ListRegionsRep& from);
  void MergeFrom(const ListRegionsRep& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ListRegionsRep* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ttmall.RegionInfo Items = 1;
  int items_size() const;
  void clear_items();
  static const int kItemsFieldNumber = 1;
  const ::ttmall::RegionInfo& items(int index) const;
  ::ttmall::RegionInfo* mutable_items(int index);
  ::ttmall::RegionInfo* add_items();
  ::google::protobuf::RepeatedPtrField< ::ttmall::RegionInfo >*
      mutable_items();
  const ::google::protobuf::RepeatedPtrField< ::ttmall::RegionInfo >&
      items() const;

  // @@protoc_insertion_point(class_scope:ttmall.ListRegionsRep)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::ttmall::RegionInfo > items_;
  mutable int _cached_size_;
  friend struct protobuf_public_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ListCarReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ttmall.ListCarReq) */ {
 public:
  ListCarReq();
  virtual ~ListCarReq();

  ListCarReq(const ListCarReq& from);

  inline ListCarReq& operator=(const ListCarReq& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ListCarReq& default_instance();

  static inline const ListCarReq* internal_default_instance() {
    return reinterpret_cast<const ListCarReq*>(
               &_ListCarReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    42;

  void Swap(ListCarReq* other);

  // implements Message ----------------------------------------------

  inline ListCarReq* New() const PROTOBUF_FINAL { return New(NULL); }

  ListCarReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ListCarReq& from);
  void MergeFrom(const ListCarReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ListCarReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string token = 1;
  void clear_token();
  static const int kTokenFieldNumber = 1;
  const ::std::string& token() const;
  void set_token(const ::std::string& value);
  #if LANG_CXX11
  void set_token(::std::string&& value);
  #endif
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  ::std::string* mutable_token();
  ::std::string* release_token();
  void set_allocated_token(::std::string* token);

  // @@protoc_insertion_point(class_scope:ttmall.ListCarReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr token_;
  mutable int _cached_size_;
  friend struct protobuf_public_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ListCarRep : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ttmall.ListCarRep) */ {
 public:
  ListCarRep();
  virtual ~ListCarRep();

  ListCarRep(const ListCarRep& from);

  inline ListCarRep& operator=(const ListCarRep& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ListCarRep& default_instance();

  static inline const ListCarRep* internal_default_instance() {
    return reinterpret_cast<const ListCarRep*>(
               &_ListCarRep_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    43;

  void Swap(ListCarRep* other);

  // implements Message ----------------------------------------------

  inline ListCarRep* New() const PROTOBUF_FINAL { return New(NULL); }

  ListCarRep* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ListCarRep& from);
  void MergeFrom(const ListCarRep& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ListCarRep* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ttmall.CarInfo Items = 1;
  int items_size() const;
  void clear_items();
  static const int kItemsFieldNumber = 1;
  const ::ttmall::CarInfo& items(int index) const;
  ::ttmall::CarInfo* mutable_items(int index);
  ::ttmall::CarInfo* add_items();
  ::google::protobuf::RepeatedPtrField< ::ttmall::CarInfo >*
      mutable_items();
  const ::google::protobuf::RepeatedPtrField< ::ttmall::CarInfo >&
      items() const;

  // @@protoc_insertion_point(class_scope:ttmall.ListCarRep)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::ttmall::CarInfo > items_;
  mutable int _cached_size_;
  friend struct protobuf_public_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SendAuthReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ttmall.SendAuthReq) */ {
 public:
  SendAuthReq();
  virtual ~SendAuthReq();

  SendAuthReq(const SendAuthReq& from);

  inline SendAuthReq& operator=(const SendAuthReq& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SendAuthReq& default_instance();

  static inline const SendAuthReq* internal_default_instance() {
    return reinterpret_cast<const SendAuthReq*>(
               &_SendAuthReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    44;

  void Swap(SendAuthReq* other);

  // implements Message ----------------------------------------------

  inline SendAuthReq* New() const PROTOBUF_FINAL { return New(NULL); }

  SendAuthReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SendAuthReq& from);
  void MergeFrom(const SendAuthReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SendAuthReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string mobile = 1;
  void clear_mobile();
  static const int kMobileFieldNumber = 1;
  const ::std::string& mobile() const;
  void set_mobile(const ::std::string& value);
  #if LANG_CXX11
  void set_mobile(::std::string&& value);
  #endif
  void set_mobile(const char* value);
  void set_mobile(const char* value, size_t size);
  ::std::string* mutable_mobile();
  ::std::string* release_mobile();
  void set_allocated_mobile(::std::string* mobile);

  // @@protoc_insertion_point(class_scope:ttmall.SendAuthReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr mobile_;
  mutable int _cached_size_;
  friend struct protobuf_public_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SendAuthRep : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ttmall.SendAuthRep) */ {
 public:
  SendAuthRep();
  virtual ~SendAuthRep();

  SendAuthRep(const SendAuthRep& from);

  inline SendAuthRep& operator=(const SendAuthRep& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SendAuthRep& default_instance();

  static inline const SendAuthRep* internal_default_instance() {
    return reinterpret_cast<const SendAuthRep*>(
               &_SendAuthRep_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    45;

  void Swap(SendAuthRep* other);

  // implements Message ----------------------------------------------

  inline SendAuthRep* New() const PROTOBUF_FINAL { return New(NULL); }

  SendAuthRep* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SendAuthRep& from);
  void MergeFrom(const SendAuthRep& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SendAuthRep* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string token = 1;
  void clear_token();
  static const int kTokenFieldNumber = 1;
  const ::std::string& token() const;
  void set_token(const ::std::string& value);
  #if LANG_CXX11
  void set_token(::std::string&& value);
  #endif
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  ::std::string* mutable_token();
  ::std::string* release_token();
  void set_allocated_token(::std::string* token);

  // @@protoc_insertion_point(class_scope:ttmall.SendAuthRep)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr token_;
  mutable int _cached_size_;
  friend struct protobuf_public_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PublicInfoReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ttmall.PublicInfoReq) */ {
 public:
  PublicInfoReq();
  virtual ~PublicInfoReq();

  PublicInfoReq(const PublicInfoReq& from);

  inline PublicInfoReq& operator=(const PublicInfoReq& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PublicInfoReq& default_instance();

  static inline const PublicInfoReq* internal_default_instance() {
    return reinterpret_cast<const PublicInfoReq*>(
               &_PublicInfoReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    46;

  void Swap(PublicInfoReq* other);

  // implements Message ----------------------------------------------

  inline PublicInfoReq* New() const PROTOBUF_FINAL { return New(NULL); }

  PublicInfoReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PublicInfoReq& from);
  void MergeFrom(const PublicInfoReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PublicInfoReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string token = 1;
  void clear_token();
  static const int kTokenFieldNumber = 1;
  const ::std::string& token() const;
  void set_token(const ::std::string& value);
  #if LANG_CXX11
  void set_token(::std::string&& value);
  #endif
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  ::std::string* mutable_token();
  ::std::string* release_token();
  void set_allocated_token(::std::string* token);

  // @@protoc_insertion_point(class_scope:ttmall.PublicInfoReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr token_;
  mutable int _cached_size_;
  friend struct protobuf_public_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PublicInfoRep : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ttmall.PublicInfoRep) */ {
 public:
  PublicInfoRep();
  virtual ~PublicInfoRep();

  PublicInfoRep(const PublicInfoRep& from);

  inline PublicInfoRep& operator=(const PublicInfoRep& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PublicInfoRep& default_instance();

  static inline const PublicInfoRep* internal_default_instance() {
    return reinterpret_cast<const PublicInfoRep*>(
               &_PublicInfoRep_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    47;

  void Swap(PublicInfoRep* other);

  // implements Message ----------------------------------------------

  inline PublicInfoRep* New() const PROTOBUF_FINAL { return New(NULL); }

  PublicInfoRep* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PublicInfoRep& from);
  void MergeFrom(const PublicInfoRep& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PublicInfoRep* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string shop_types = 1;
  int shop_types_size() const;
  void clear_shop_types();
  static const int kShopTypesFieldNumber = 1;
  const ::std::string& shop_types(int index) const;
  ::std::string* mutable_shop_types(int index);
  void set_shop_types(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_shop_types(int index, ::std::string&& value);
  #endif
  void set_shop_types(int index, const char* value);
  void set_shop_types(int index, const char* value, size_t size);
  ::std::string* add_shop_types();
  void add_shop_types(const ::std::string& value);
  #if LANG_CXX11
  void add_shop_types(::std::string&& value);
  #endif
  void add_shop_types(const char* value);
  void add_shop_types(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& shop_types() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_shop_types();

  // repeated string deliver_times = 2;
  int deliver_times_size() const;
  void clear_deliver_times();
  static const int kDeliverTimesFieldNumber = 2;
  const ::std::string& deliver_times(int index) const;
  ::std::string* mutable_deliver_times(int index);
  void set_deliver_times(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_deliver_times(int index, ::std::string&& value);
  #endif
  void set_deliver_times(int index, const char* value);
  void set_deliver_times(int index, const char* value, size_t size);
  ::std::string* add_deliver_times();
  void add_deliver_times(const ::std::string& value);
  #if LANG_CXX11
  void add_deliver_times(::std::string&& value);
  #endif
  void add_deliver_times(const char* value);
  void add_deliver_times(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& deliver_times() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_deliver_times();

  // string clause_url = 3;
  void clear_clause_url();
  static const int kClauseUrlFieldNumber = 3;
  const ::std::string& clause_url() const;
  void set_clause_url(const ::std::string& value);
  #if LANG_CXX11
  void set_clause_url(::std::string&& value);
  #endif
  void set_clause_url(const char* value);
  void set_clause_url(const char* value, size_t size);
  ::std::string* mutable_clause_url();
  ::std::string* release_clause_url();
  void set_allocated_clause_url(::std::string* clause_url);

  // string rule_url = 4;
  void clear_rule_url();
  static const int kRuleUrlFieldNumber = 4;
  const ::std::string& rule_url() const;
  void set_rule_url(const ::std::string& value);
  #if LANG_CXX11
  void set_rule_url(::std::string&& value);
  #endif
  void set_rule_url(const char* value);
  void set_rule_url(const char* value, size_t size);
  ::std::string* mutable_rule_url();
  ::std::string* release_rule_url();
  void set_allocated_rule_url(::std::string* rule_url);

  // @@protoc_insertion_point(class_scope:ttmall.PublicInfoRep)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> shop_types_;
  ::google::protobuf::RepeatedPtrField< ::std::string> deliver_times_;
  ::google::protobuf::internal::ArenaStringPtr clause_url_;
  ::google::protobuf::internal::ArenaStringPtr rule_url_;
  mutable int _cached_size_;
  friend struct protobuf_public_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ListUserTypeReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ttmall.ListUserTypeReq) */ {
 public:
  ListUserTypeReq();
  virtual ~ListUserTypeReq();

  ListUserTypeReq(const ListUserTypeReq& from);

  inline ListUserTypeReq& operator=(const ListUserTypeReq& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ListUserTypeReq& default_instance();

  static inline const ListUserTypeReq* internal_default_instance() {
    return reinterpret_cast<const ListUserTypeReq*>(
               &_ListUserTypeReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    48;

  void Swap(ListUserTypeReq* other);

  // implements Message ----------------------------------------------

  inline ListUserTypeReq* New() const PROTOBUF_FINAL { return New(NULL); }

  ListUserTypeReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ListUserTypeReq& from);
  void MergeFrom(const ListUserTypeReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ListUserTypeReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string token = 1;
  void clear_token();
  static const int kTokenFieldNumber = 1;
  const ::std::string& token() const;
  void set_token(const ::std::string& value);
  #if LANG_CXX11
  void set_token(::std::string&& value);
  #endif
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  ::std::string* mutable_token();
  ::std::string* release_token();
  void set_allocated_token(::std::string* token);

  // @@protoc_insertion_point(class_scope:ttmall.ListUserTypeReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr token_;
  mutable int _cached_size_;
  friend struct protobuf_public_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ListUserTypeRep : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ttmall.ListUserTypeRep) */ {
 public:
  ListUserTypeRep();
  virtual ~ListUserTypeRep();

  ListUserTypeRep(const ListUserTypeRep& from);

  inline ListUserTypeRep& operator=(const ListUserTypeRep& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ListUserTypeRep& default_instance();

  static inline const ListUserTypeRep* internal_default_instance() {
    return reinterpret_cast<const ListUserTypeRep*>(
               &_ListUserTypeRep_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    49;

  void Swap(ListUserTypeRep* other);

  // implements Message ----------------------------------------------

  inline ListUserTypeRep* New() const PROTOBUF_FINAL { return New(NULL); }

  ListUserTypeRep* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ListUserTypeRep& from);
  void MergeFrom(const ListUserTypeRep& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ListUserTypeRep* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ttmall.UserType items = 1;
  int items_size() const;
  void clear_items();
  static const int kItemsFieldNumber = 1;
  const ::ttmall::UserType& items(int index) const;
  ::ttmall::UserType* mutable_items(int index);
  ::ttmall::UserType* add_items();
  ::google::protobuf::RepeatedPtrField< ::ttmall::UserType >*
      mutable_items();
  const ::google::protobuf::RepeatedPtrField< ::ttmall::UserType >&
      items() const;

  // @@protoc_insertion_point(class_scope:ttmall.ListUserTypeRep)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::ttmall::UserType > items_;
  mutable int _cached_size_;
  friend struct protobuf_public_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class IndexAdInfoReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ttmall.IndexAdInfoReq) */ {
 public:
  IndexAdInfoReq();
  virtual ~IndexAdInfoReq();

  IndexAdInfoReq(const IndexAdInfoReq& from);

  inline IndexAdInfoReq& operator=(const IndexAdInfoReq& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndexAdInfoReq& default_instance();

  static inline const IndexAdInfoReq* internal_default_instance() {
    return reinterpret_cast<const IndexAdInfoReq*>(
               &_IndexAdInfoReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    50;

  void Swap(IndexAdInfoReq* other);

  // implements Message ----------------------------------------------

  inline IndexAdInfoReq* New() const PROTOBUF_FINAL { return New(NULL); }

  IndexAdInfoReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const IndexAdInfoReq& from);
  void MergeFrom(const IndexAdInfoReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(IndexAdInfoReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string token = 1;
  void clear_token();
  static const int kTokenFieldNumber = 1;
  const ::std::string& token() const;
  void set_token(const ::std::string& value);
  #if LANG_CXX11
  void set_token(::std::string&& value);
  #endif
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  ::std::string* mutable_token();
  ::std::string* release_token();
  void set_allocated_token(::std::string* token);

  // string id = 2;
  void clear_id();
  static const int kIdFieldNumber = 2;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // @@protoc_insertion_point(class_scope:ttmall.IndexAdInfoReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr token_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  mutable int _cached_size_;
  friend struct protobuf_public_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class IndexAdInfoRep : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ttmall.IndexAdInfoRep) */ {
 public:
  IndexAdInfoRep();
  virtual ~IndexAdInfoRep();

  IndexAdInfoRep(const IndexAdInfoRep& from);

  inline IndexAdInfoRep& operator=(const IndexAdInfoRep& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndexAdInfoRep& default_instance();

  static inline const IndexAdInfoRep* internal_default_instance() {
    return reinterpret_cast<const IndexAdInfoRep*>(
               &_IndexAdInfoRep_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    51;

  void Swap(IndexAdInfoRep* other);

  // implements Message ----------------------------------------------

  inline IndexAdInfoRep* New() const PROTOBUF_FINAL { return New(NULL); }

  IndexAdInfoRep* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const IndexAdInfoRep& from);
  void MergeFrom(const IndexAdInfoRep& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(IndexAdInfoRep* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ttmall.GoodsInfo goods = 5;
  int goods_size() const;
  void clear_goods();
  static const int kGoodsFieldNumber = 5;
  const ::ttmall::GoodsInfo& goods(int index) const;
  ::ttmall::GoodsInfo* mutable_goods(int index);
  ::ttmall::GoodsInfo* add_goods();
  ::google::protobuf::RepeatedPtrField< ::ttmall::GoodsInfo >*
      mutable_goods();
  const ::google::protobuf::RepeatedPtrField< ::ttmall::GoodsInfo >&
      goods() const;

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // string title = 2;
  void clear_title();
  static const int kTitleFieldNumber = 2;
  const ::std::string& title() const;
  void set_title(const ::std::string& value);
  #if LANG_CXX11
  void set_title(::std::string&& value);
  #endif
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  ::std::string* mutable_title();
  ::std::string* release_title();
  void set_allocated_title(::std::string* title);

  // string desc = 3;
  void clear_desc();
  static const int kDescFieldNumber = 3;
  const ::std::string& desc() const;
  void set_desc(const ::std::string& value);
  #if LANG_CXX11
  void set_desc(::std::string&& value);
  #endif
  void set_desc(const char* value);
  void set_desc(const char* value, size_t size);
  ::std::string* mutable_desc();
  ::std::string* release_desc();
  void set_allocated_desc(::std::string* desc);

  // .ttmall.ImageInfo banner = 4;
  bool has_banner() const;
  void clear_banner();
  static const int kBannerFieldNumber = 4;
  const ::ttmall::ImageInfo& banner() const;
  ::ttmall::ImageInfo* mutable_banner();
  ::ttmall::ImageInfo* release_banner();
  void set_allocated_banner(::ttmall::ImageInfo* banner);

  // @@protoc_insertion_point(class_scope:ttmall.IndexAdInfoRep)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::ttmall::GoodsInfo > goods_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr title_;
  ::google::protobuf::internal::ArenaStringPtr desc_;
  ::ttmall::ImageInfo* banner_;
  mutable int _cached_size_;
  friend struct protobuf_public_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SetDeviceIdReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ttmall.SetDeviceIdReq) */ {
 public:
  SetDeviceIdReq();
  virtual ~SetDeviceIdReq();

  SetDeviceIdReq(const SetDeviceIdReq& from);

  inline SetDeviceIdReq& operator=(const SetDeviceIdReq& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SetDeviceIdReq& default_instance();

  static inline const SetDeviceIdReq* internal_default_instance() {
    return reinterpret_cast<const SetDeviceIdReq*>(
               &_SetDeviceIdReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    52;

  void Swap(SetDeviceIdReq* other);

  // implements Message ----------------------------------------------

  inline SetDeviceIdReq* New() const PROTOBUF_FINAL { return New(NULL); }

  SetDeviceIdReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SetDeviceIdReq& from);
  void MergeFrom(const SetDeviceIdReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SetDeviceIdReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string token = 1;
  void clear_token();
  static const int kTokenFieldNumber = 1;
  const ::std::string& token() const;
  void set_token(const ::std::string& value);
  #if LANG_CXX11
  void set_token(::std::string&& value);
  #endif
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  ::std::string* mutable_token();
  ::std::string* release_token();
  void set_allocated_token(::std::string* token);

  // string device_id = 2;
  void clear_device_id();
  static const int kDeviceIdFieldNumber = 2;
  const ::std::string& device_id() const;
  void set_device_id(const ::std::string& value);
  #if LANG_CXX11
  void set_device_id(::std::string&& value);
  #endif
  void set_device_id(const char* value);
  void set_device_id(const char* value, size_t size);
  ::std::string* mutable_device_id();
  ::std::string* release_device_id();
  void set_allocated_device_id(::std::string* device_id);

  // @@protoc_insertion_point(class_scope:ttmall.SetDeviceIdReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr token_;
  ::google::protobuf::internal::ArenaStringPtr device_id_;
  mutable int _cached_size_;
  friend struct protobuf_public_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SetDeviceIdRep : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ttmall.SetDeviceIdRep) */ {
 public:
  SetDeviceIdRep();
  virtual ~SetDeviceIdRep();

  SetDeviceIdRep(const SetDeviceIdRep& from);

  inline SetDeviceIdRep& operator=(const SetDeviceIdRep& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SetDeviceIdRep& default_instance();

  static inline const SetDeviceIdRep* internal_default_instance() {
    return reinterpret_cast<const SetDeviceIdRep*>(
               &_SetDeviceIdRep_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    53;

  void Swap(SetDeviceIdRep* other);

  // implements Message ----------------------------------------------

  inline SetDeviceIdRep* New() const PROTOBUF_FINAL { return New(NULL); }

  SetDeviceIdRep* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SetDeviceIdRep& from);
  void MergeFrom(const SetDeviceIdRep& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SetDeviceIdRep* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:ttmall.SetDeviceIdRep)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct protobuf_public_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CheckUpdateReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ttmall.CheckUpdateReq) */ {
 public:
  CheckUpdateReq();
  virtual ~CheckUpdateReq();

  CheckUpdateReq(const CheckUpdateReq& from);

  inline CheckUpdateReq& operator=(const CheckUpdateReq& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CheckUpdateReq& default_instance();

  static inline const CheckUpdateReq* internal_default_instance() {
    return reinterpret_cast<const CheckUpdateReq*>(
               &_CheckUpdateReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    54;

  void Swap(CheckUpdateReq* other);

  // implements Message ----------------------------------------------

  inline CheckUpdateReq* New() const PROTOBUF_FINAL { return New(NULL); }

  CheckUpdateReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CheckUpdateReq& from);
  void MergeFrom(const CheckUpdateReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CheckUpdateReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .ttmall.UpdateType type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::ttmall::UpdateType type() const;
  void set_type(::ttmall::UpdateType value);

  // int32 version = 2;
  void clear_version();
  static const int kVersionFieldNumber = 2;
  ::google::protobuf::int32 version() const;
  void set_version(::google::protobuf::int32 value);

  // .ttmall.DevicePlatform platform = 3;
  void clear_platform();
  static const int kPlatformFieldNumber = 3;
  ::ttmall::DevicePlatform platform() const;
  void set_platform(::ttmall::DevicePlatform value);

  // @@protoc_insertion_point(class_scope:ttmall.CheckUpdateReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int type_;
  ::google::protobuf::int32 version_;
  int platform_;
  mutable int _cached_size_;
  friend struct protobuf_public_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CheckUpdateRep : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ttmall.CheckUpdateRep) */ {
 public:
  CheckUpdateRep();
  virtual ~CheckUpdateRep();

  CheckUpdateRep(const CheckUpdateRep& from);

  inline CheckUpdateRep& operator=(const CheckUpdateRep& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CheckUpdateRep& default_instance();

  static inline const CheckUpdateRep* internal_default_instance() {
    return reinterpret_cast<const CheckUpdateRep*>(
               &_CheckUpdateRep_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    55;

  void Swap(CheckUpdateRep* other);

  // implements Message ----------------------------------------------

  inline CheckUpdateRep* New() const PROTOBUF_FINAL { return New(NULL); }

  CheckUpdateRep* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CheckUpdateRep& from);
  void MergeFrom(const CheckUpdateRep& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CheckUpdateRep* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string version = 1;
  void clear_version();
  static const int kVersionFieldNumber = 1;
  const ::std::string& version() const;
  void set_version(const ::std::string& value);
  #if LANG_CXX11
  void set_version(::std::string&& value);
  #endif
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  ::std::string* mutable_version();
  ::std::string* release_version();
  void set_allocated_version(::std::string* version);

  // string url = 2;
  void clear_url();
  static const int kUrlFieldNumber = 2;
  const ::std::string& url() const;
  void set_url(const ::std::string& value);
  #if LANG_CXX11
  void set_url(::std::string&& value);
  #endif
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  ::std::string* mutable_url();
  ::std::string* release_url();
  void set_allocated_url(::std::string* url);

  // string desc = 5;
  void clear_desc();
  static const int kDescFieldNumber = 5;
  const ::std::string& desc() const;
  void set_desc(const ::std::string& value);
  #if LANG_CXX11
  void set_desc(::std::string&& value);
  #endif
  void set_desc(const char* value);
  void set_desc(const char* value, size_t size);
  ::std::string* mutable_desc();
  ::std::string* release_desc();
  void set_allocated_desc(::std::string* desc);

  // bool has_update = 3;
  void clear_has_update();
  static const int kHasUpdateFieldNumber = 3;
  bool has_update() const;
  void set_has_update(bool value);

  // bool is_must = 4;
  void clear_is_must();
  static const int kIsMustFieldNumber = 4;
  bool is_must() const;
  void set_is_must(bool value);

  // @@protoc_insertion_point(class_scope:ttmall.CheckUpdateRep)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr version_;
  ::google::protobuf::internal::ArenaStringPtr url_;
  ::google::protobuf::internal::ArenaStringPtr desc_;
  bool has_update_;
  bool is_must_;
  mutable int _cached_size_;
  friend struct protobuf_public_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// BrandInfo

// string id = 1;
inline void BrandInfo::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BrandInfo::id() const {
  // @@protoc_insertion_point(field_get:ttmall.BrandInfo.id)
  return id_.GetNoArena();
}
inline void BrandInfo::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ttmall.BrandInfo.id)
}
#if LANG_CXX11
inline void BrandInfo::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ttmall.BrandInfo.id)
}
#endif
inline void BrandInfo::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ttmall.BrandInfo.id)
}
inline void BrandInfo::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ttmall.BrandInfo.id)
}
inline ::std::string* BrandInfo::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:ttmall.BrandInfo.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BrandInfo::release_id() {
  // @@protoc_insertion_point(field_release:ttmall.BrandInfo.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BrandInfo::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:ttmall.BrandInfo.id)
}

// string name = 2;
inline void BrandInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BrandInfo::name() const {
  // @@protoc_insertion_point(field_get:ttmall.BrandInfo.name)
  return name_.GetNoArena();
}
inline void BrandInfo::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ttmall.BrandInfo.name)
}
#if LANG_CXX11
inline void BrandInfo::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ttmall.BrandInfo.name)
}
#endif
inline void BrandInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ttmall.BrandInfo.name)
}
inline void BrandInfo::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ttmall.BrandInfo.name)
}
inline ::std::string* BrandInfo::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:ttmall.BrandInfo.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BrandInfo::release_name() {
  // @@protoc_insertion_point(field_release:ttmall.BrandInfo.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BrandInfo::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:ttmall.BrandInfo.name)
}

// .ttmall.ImageInfo icon = 3;
inline bool BrandInfo::has_icon() const {
  return this != internal_default_instance() && icon_ != NULL;
}
inline void BrandInfo::clear_icon() {
  if (GetArenaNoVirtual() == NULL && icon_ != NULL) delete icon_;
  icon_ = NULL;
}
inline const ::ttmall::ImageInfo& BrandInfo::icon() const {
  // @@protoc_insertion_point(field_get:ttmall.BrandInfo.icon)
  return icon_ != NULL ? *icon_
                         : *::ttmall::ImageInfo::internal_default_instance();
}
inline ::ttmall::ImageInfo* BrandInfo::mutable_icon() {
  
  if (icon_ == NULL) {
    icon_ = new ::ttmall::ImageInfo;
  }
  // @@protoc_insertion_point(field_mutable:ttmall.BrandInfo.icon)
  return icon_;
}
inline ::ttmall::ImageInfo* BrandInfo::release_icon() {
  // @@protoc_insertion_point(field_release:ttmall.BrandInfo.icon)
  
  ::ttmall::ImageInfo* temp = icon_;
  icon_ = NULL;
  return temp;
}
inline void BrandInfo::set_allocated_icon(::ttmall::ImageInfo* icon) {
  delete icon_;
  icon_ = icon;
  if (icon) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ttmall.BrandInfo.icon)
}

// -------------------------------------------------------------------

// TypeInfo

// string id = 1;
inline void TypeInfo::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TypeInfo::id() const {
  // @@protoc_insertion_point(field_get:ttmall.TypeInfo.id)
  return id_.GetNoArena();
}
inline void TypeInfo::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ttmall.TypeInfo.id)
}
#if LANG_CXX11
inline void TypeInfo::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ttmall.TypeInfo.id)
}
#endif
inline void TypeInfo::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ttmall.TypeInfo.id)
}
inline void TypeInfo::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ttmall.TypeInfo.id)
}
inline ::std::string* TypeInfo::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:ttmall.TypeInfo.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TypeInfo::release_id() {
  // @@protoc_insertion_point(field_release:ttmall.TypeInfo.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TypeInfo::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:ttmall.TypeInfo.id)
}

// string name = 2;
inline void TypeInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TypeInfo::name() const {
  // @@protoc_insertion_point(field_get:ttmall.TypeInfo.name)
  return name_.GetNoArena();
}
inline void TypeInfo::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ttmall.TypeInfo.name)
}
#if LANG_CXX11
inline void TypeInfo::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ttmall.TypeInfo.name)
}
#endif
inline void TypeInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ttmall.TypeInfo.name)
}
inline void TypeInfo::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ttmall.TypeInfo.name)
}
inline ::std::string* TypeInfo::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:ttmall.TypeInfo.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TypeInfo::release_name() {
  // @@protoc_insertion_point(field_release:ttmall.TypeInfo.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TypeInfo::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:ttmall.TypeInfo.name)
}

// string parent = 3;
inline void TypeInfo::clear_parent() {
  parent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TypeInfo::parent() const {
  // @@protoc_insertion_point(field_get:ttmall.TypeInfo.parent)
  return parent_.GetNoArena();
}
inline void TypeInfo::set_parent(const ::std::string& value) {
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ttmall.TypeInfo.parent)
}
#if LANG_CXX11
inline void TypeInfo::set_parent(::std::string&& value) {
  
  parent_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ttmall.TypeInfo.parent)
}
#endif
inline void TypeInfo::set_parent(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ttmall.TypeInfo.parent)
}
inline void TypeInfo::set_parent(const char* value, size_t size) {
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ttmall.TypeInfo.parent)
}
inline ::std::string* TypeInfo::mutable_parent() {
  
  // @@protoc_insertion_point(field_mutable:ttmall.TypeInfo.parent)
  return parent_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TypeInfo::release_parent() {
  // @@protoc_insertion_point(field_release:ttmall.TypeInfo.parent)
  
  return parent_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TypeInfo::set_allocated_parent(::std::string* parent) {
  if (parent != NULL) {
    
  } else {
    
  }
  parent_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), parent);
  // @@protoc_insertion_point(field_set_allocated:ttmall.TypeInfo.parent)
}

// string icon_m = 4;
inline void TypeInfo::clear_icon_m() {
  icon_m_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TypeInfo::icon_m() const {
  // @@protoc_insertion_point(field_get:ttmall.TypeInfo.icon_m)
  return icon_m_.GetNoArena();
}
inline void TypeInfo::set_icon_m(const ::std::string& value) {
  
  icon_m_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ttmall.TypeInfo.icon_m)
}
#if LANG_CXX11
inline void TypeInfo::set_icon_m(::std::string&& value) {
  
  icon_m_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ttmall.TypeInfo.icon_m)
}
#endif
inline void TypeInfo::set_icon_m(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  icon_m_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ttmall.TypeInfo.icon_m)
}
inline void TypeInfo::set_icon_m(const char* value, size_t size) {
  
  icon_m_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ttmall.TypeInfo.icon_m)
}
inline ::std::string* TypeInfo::mutable_icon_m() {
  
  // @@protoc_insertion_point(field_mutable:ttmall.TypeInfo.icon_m)
  return icon_m_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TypeInfo::release_icon_m() {
  // @@protoc_insertion_point(field_release:ttmall.TypeInfo.icon_m)
  
  return icon_m_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TypeInfo::set_allocated_icon_m(::std::string* icon_m) {
  if (icon_m != NULL) {
    
  } else {
    
  }
  icon_m_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), icon_m);
  // @@protoc_insertion_point(field_set_allocated:ttmall.TypeInfo.icon_m)
}

// string icon_s = 5;
inline void TypeInfo::clear_icon_s() {
  icon_s_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TypeInfo::icon_s() const {
  // @@protoc_insertion_point(field_get:ttmall.TypeInfo.icon_s)
  return icon_s_.GetNoArena();
}
inline void TypeInfo::set_icon_s(const ::std::string& value) {
  
  icon_s_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ttmall.TypeInfo.icon_s)
}
#if LANG_CXX11
inline void TypeInfo::set_icon_s(::std::string&& value) {
  
  icon_s_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ttmall.TypeInfo.icon_s)
}
#endif
inline void TypeInfo::set_icon_s(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  icon_s_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ttmall.TypeInfo.icon_s)
}
inline void TypeInfo::set_icon_s(const char* value, size_t size) {
  
  icon_s_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ttmall.TypeInfo.icon_s)
}
inline ::std::string* TypeInfo::mutable_icon_s() {
  
  // @@protoc_insertion_point(field_mutable:ttmall.TypeInfo.icon_s)
  return icon_s_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TypeInfo::release_icon_s() {
  // @@protoc_insertion_point(field_release:ttmall.TypeInfo.icon_s)
  
  return icon_s_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TypeInfo::set_allocated_icon_s(::std::string* icon_s) {
  if (icon_s != NULL) {
    
  } else {
    
  }
  icon_s_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), icon_s);
  // @@protoc_insertion_point(field_set_allocated:ttmall.TypeInfo.icon_s)
}

// bool recommend = 6;
inline void TypeInfo::clear_recommend() {
  recommend_ = false;
}
inline bool TypeInfo::recommend() const {
  // @@protoc_insertion_point(field_get:ttmall.TypeInfo.recommend)
  return recommend_;
}
inline void TypeInfo::set_recommend(bool value) {
  
  recommend_ = value;
  // @@protoc_insertion_point(field_set:ttmall.TypeInfo.recommend)
}

// string notice = 7;
inline void TypeInfo::clear_notice() {
  notice_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TypeInfo::notice() const {
  // @@protoc_insertion_point(field_get:ttmall.TypeInfo.notice)
  return notice_.GetNoArena();
}
inline void TypeInfo::set_notice(const ::std::string& value) {
  
  notice_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ttmall.TypeInfo.notice)
}
#if LANG_CXX11
inline void TypeInfo::set_notice(::std::string&& value) {
  
  notice_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ttmall.TypeInfo.notice)
}
#endif
inline void TypeInfo::set_notice(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  notice_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ttmall.TypeInfo.notice)
}
inline void TypeInfo::set_notice(const char* value, size_t size) {
  
  notice_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ttmall.TypeInfo.notice)
}
inline ::std::string* TypeInfo::mutable_notice() {
  
  // @@protoc_insertion_point(field_mutable:ttmall.TypeInfo.notice)
  return notice_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TypeInfo::release_notice() {
  // @@protoc_insertion_point(field_release:ttmall.TypeInfo.notice)
  
  return notice_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TypeInfo::set_allocated_notice(::std::string* notice) {
  if (notice != NULL) {
    
  } else {
    
  }
  notice_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), notice);
  // @@protoc_insertion_point(field_set_allocated:ttmall.TypeInfo.notice)
}

// -------------------------------------------------------------------

// PriceRange

// int32 beg = 1;
inline void PriceRange::clear_beg() {
  beg_ = 0;
}
inline ::google::protobuf::int32 PriceRange::beg() const {
  // @@protoc_insertion_point(field_get:ttmall.PriceRange.beg)
  return beg_;
}
inline void PriceRange::set_beg(::google::protobuf::int32 value) {
  
  beg_ = value;
  // @@protoc_insertion_point(field_set:ttmall.PriceRange.beg)
}

// int32 end = 2;
inline void PriceRange::clear_end() {
  end_ = 0;
}
inline ::google::protobuf::int32 PriceRange::end() const {
  // @@protoc_insertion_point(field_get:ttmall.PriceRange.end)
  return end_;
}
inline void PriceRange::set_end(::google::protobuf::int32 value) {
  
  end_ = value;
  // @@protoc_insertion_point(field_set:ttmall.PriceRange.end)
}

// int32 price = 3;
inline void PriceRange::clear_price() {
  price_ = 0;
}
inline ::google::protobuf::int32 PriceRange::price() const {
  // @@protoc_insertion_point(field_get:ttmall.PriceRange.price)
  return price_;
}
inline void PriceRange::set_price(::google::protobuf::int32 value) {
  
  price_ = value;
  // @@protoc_insertion_point(field_set:ttmall.PriceRange.price)
}

// -------------------------------------------------------------------

// SetInfo

// string id = 1;
inline void SetInfo::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SetInfo::id() const {
  // @@protoc_insertion_point(field_get:ttmall.SetInfo.id)
  return id_.GetNoArena();
}
inline void SetInfo::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ttmall.SetInfo.id)
}
#if LANG_CXX11
inline void SetInfo::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ttmall.SetInfo.id)
}
#endif
inline void SetInfo::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ttmall.SetInfo.id)
}
inline void SetInfo::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ttmall.SetInfo.id)
}
inline ::std::string* SetInfo::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:ttmall.SetInfo.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SetInfo::release_id() {
  // @@protoc_insertion_point(field_release:ttmall.SetInfo.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetInfo::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:ttmall.SetInfo.id)
}

// string name = 2;
inline void SetInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SetInfo::name() const {
  // @@protoc_insertion_point(field_get:ttmall.SetInfo.name)
  return name_.GetNoArena();
}
inline void SetInfo::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ttmall.SetInfo.name)
}
#if LANG_CXX11
inline void SetInfo::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ttmall.SetInfo.name)
}
#endif
inline void SetInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ttmall.SetInfo.name)
}
inline void SetInfo::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ttmall.SetInfo.name)
}
inline ::std::string* SetInfo::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:ttmall.SetInfo.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SetInfo::release_name() {
  // @@protoc_insertion_point(field_release:ttmall.SetInfo.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetInfo::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:ttmall.SetInfo.name)
}

// int32 count = 3;
inline void SetInfo::clear_count() {
  count_ = 0;
}
inline ::google::protobuf::int32 SetInfo::count() const {
  // @@protoc_insertion_point(field_get:ttmall.SetInfo.count)
  return count_;
}
inline void SetInfo::set_count(::google::protobuf::int32 value) {
  
  count_ = value;
  // @@protoc_insertion_point(field_set:ttmall.SetInfo.count)
}

// string brief = 4;
inline void SetInfo::clear_brief() {
  brief_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SetInfo::brief() const {
  // @@protoc_insertion_point(field_get:ttmall.SetInfo.brief)
  return brief_.GetNoArena();
}
inline void SetInfo::set_brief(const ::std::string& value) {
  
  brief_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ttmall.SetInfo.brief)
}
#if LANG_CXX11
inline void SetInfo::set_brief(::std::string&& value) {
  
  brief_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ttmall.SetInfo.brief)
}
#endif
inline void SetInfo::set_brief(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  brief_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ttmall.SetInfo.brief)
}
inline void SetInfo::set_brief(const char* value, size_t size) {
  
  brief_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ttmall.SetInfo.brief)
}
inline ::std::string* SetInfo::mutable_brief() {
  
  // @@protoc_insertion_point(field_mutable:ttmall.SetInfo.brief)
  return brief_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SetInfo::release_brief() {
  // @@protoc_insertion_point(field_release:ttmall.SetInfo.brief)
  
  return brief_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetInfo::set_allocated_brief(::std::string* brief) {
  if (brief != NULL) {
    
  } else {
    
  }
  brief_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), brief);
  // @@protoc_insertion_point(field_set_allocated:ttmall.SetInfo.brief)
}

// int32 price = 5;
inline void SetInfo::clear_price() {
  price_ = 0;
}
inline ::google::protobuf::int32 SetInfo::price() const {
  // @@protoc_insertion_point(field_get:ttmall.SetInfo.price)
  return price_;
}
inline void SetInfo::set_price(::google::protobuf::int32 value) {
  
  price_ = value;
  // @@protoc_insertion_point(field_set:ttmall.SetInfo.price)
}

// int32 discount = 6;
inline void SetInfo::clear_discount() {
  discount_ = 0;
}
inline ::google::protobuf::int32 SetInfo::discount() const {
  // @@protoc_insertion_point(field_get:ttmall.SetInfo.discount)
  return discount_;
}
inline void SetInfo::set_discount(::google::protobuf::int32 value) {
  
  discount_ = value;
  // @@protoc_insertion_point(field_set:ttmall.SetInfo.discount)
}

// -------------------------------------------------------------------

// PriceInfo

// string id = 1;
inline void PriceInfo::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PriceInfo::id() const {
  // @@protoc_insertion_point(field_get:ttmall.PriceInfo.id)
  return id_.GetNoArena();
}
inline void PriceInfo::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ttmall.PriceInfo.id)
}
#if LANG_CXX11
inline void PriceInfo::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ttmall.PriceInfo.id)
}
#endif
inline void PriceInfo::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ttmall.PriceInfo.id)
}
inline void PriceInfo::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ttmall.PriceInfo.id)
}
inline ::std::string* PriceInfo::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:ttmall.PriceInfo.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PriceInfo::release_id() {
  // @@protoc_insertion_point(field_release:ttmall.PriceInfo.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PriceInfo::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:ttmall.PriceInfo.id)
}

// string name = 2;
inline void PriceInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PriceInfo::name() const {
  // @@protoc_insertion_point(field_get:ttmall.PriceInfo.name)
  return name_.GetNoArena();
}
inline void PriceInfo::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ttmall.PriceInfo.name)
}
#if LANG_CXX11
inline void PriceInfo::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ttmall.PriceInfo.name)
}
#endif
inline void PriceInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ttmall.PriceInfo.name)
}
inline void PriceInfo::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ttmall.PriceInfo.name)
}
inline ::std::string* PriceInfo::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:ttmall.PriceInfo.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PriceInfo::release_name() {
  // @@protoc_insertion_point(field_release:ttmall.PriceInfo.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PriceInfo::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:ttmall.PriceInfo.name)
}

// .ttmall.SaleType type = 3;
inline void PriceInfo::clear_type() {
  type_ = 0;
}
inline ::ttmall::SaleType PriceInfo::type() const {
  // @@protoc_insertion_point(field_get:ttmall.PriceInfo.type)
  return static_cast< ::ttmall::SaleType >(type_);
}
inline void PriceInfo::set_type(::ttmall::SaleType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:ttmall.PriceInfo.type)
}

// int32 price = 4;
inline void PriceInfo::clear_price() {
  price_ = 0;
}
inline ::google::protobuf::int32 PriceInfo::price() const {
  // @@protoc_insertion_point(field_get:ttmall.PriceInfo.price)
  return price_;
}
inline void PriceInfo::set_price(::google::protobuf::int32 value) {
  
  price_ = value;
  // @@protoc_insertion_point(field_set:ttmall.PriceInfo.price)
}

// int32 original = 5;
inline void PriceInfo::clear_original() {
  original_ = 0;
}
inline ::google::protobuf::int32 PriceInfo::original() const {
  // @@protoc_insertion_point(field_get:ttmall.PriceInfo.original)
  return original_;
}
inline void PriceInfo::set_original(::google::protobuf::int32 value) {
  
  original_ = value;
  // @@protoc_insertion_point(field_set:ttmall.PriceInfo.original)
}

// int32 buy_num = 6;
inline void PriceInfo::clear_buy_num() {
  buy_num_ = 0;
}
inline ::google::protobuf::int32 PriceInfo::buy_num() const {
  // @@protoc_insertion_point(field_get:ttmall.PriceInfo.buy_num)
  return buy_num_;
}
inline void PriceInfo::set_buy_num(::google::protobuf::int32 value) {
  
  buy_num_ = value;
  // @@protoc_insertion_point(field_set:ttmall.PriceInfo.buy_num)
}

// int32 add_num = 7;
inline void PriceInfo::clear_add_num() {
  add_num_ = 0;
}
inline ::google::protobuf::int32 PriceInfo::add_num() const {
  // @@protoc_insertion_point(field_get:ttmall.PriceInfo.add_num)
  return add_num_;
}
inline void PriceInfo::set_add_num(::google::protobuf::int32 value) {
  
  add_num_ = value;
  // @@protoc_insertion_point(field_set:ttmall.PriceInfo.add_num)
}

// int32 discount = 8;
inline void PriceInfo::clear_discount() {
  discount_ = 0;
}
inline ::google::protobuf::int32 PriceInfo::discount() const {
  // @@protoc_insertion_point(field_get:ttmall.PriceInfo.discount)
  return discount_;
}
inline void PriceInfo::set_discount(::google::protobuf::int32 value) {
  
  discount_ = value;
  // @@protoc_insertion_point(field_set:ttmall.PriceInfo.discount)
}

// repeated .ttmall.PriceRange ranges = 9;
inline int PriceInfo::ranges_size() const {
  return ranges_.size();
}
inline void PriceInfo::clear_ranges() {
  ranges_.Clear();
}
inline const ::ttmall::PriceRange& PriceInfo::ranges(int index) const {
  // @@protoc_insertion_point(field_get:ttmall.PriceInfo.ranges)
  return ranges_.Get(index);
}
inline ::ttmall::PriceRange* PriceInfo::mutable_ranges(int index) {
  // @@protoc_insertion_point(field_mutable:ttmall.PriceInfo.ranges)
  return ranges_.Mutable(index);
}
inline ::ttmall::PriceRange* PriceInfo::add_ranges() {
  // @@protoc_insertion_point(field_add:ttmall.PriceInfo.ranges)
  return ranges_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ttmall::PriceRange >*
PriceInfo::mutable_ranges() {
  // @@protoc_insertion_point(field_mutable_list:ttmall.PriceInfo.ranges)
  return &ranges_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ttmall::PriceRange >&
PriceInfo::ranges() const {
  // @@protoc_insertion_point(field_list:ttmall.PriceInfo.ranges)
  return ranges_;
}

// string unit = 10;
inline void PriceInfo::clear_unit() {
  unit_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PriceInfo::unit() const {
  // @@protoc_insertion_point(field_get:ttmall.PriceInfo.unit)
  return unit_.GetNoArena();
}
inline void PriceInfo::set_unit(const ::std::string& value) {
  
  unit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ttmall.PriceInfo.unit)
}
#if LANG_CXX11
inline void PriceInfo::set_unit(::std::string&& value) {
  
  unit_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ttmall.PriceInfo.unit)
}
#endif
inline void PriceInfo::set_unit(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  unit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ttmall.PriceInfo.unit)
}
inline void PriceInfo::set_unit(const char* value, size_t size) {
  
  unit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ttmall.PriceInfo.unit)
}
inline ::std::string* PriceInfo::mutable_unit() {
  
  // @@protoc_insertion_point(field_mutable:ttmall.PriceInfo.unit)
  return unit_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PriceInfo::release_unit() {
  // @@protoc_insertion_point(field_release:ttmall.PriceInfo.unit)
  
  return unit_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PriceInfo::set_allocated_unit(::std::string* unit) {
  if (unit != NULL) {
    
  } else {
    
  }
  unit_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), unit);
  // @@protoc_insertion_point(field_set_allocated:ttmall.PriceInfo.unit)
}

// int32 start = 11;
inline void PriceInfo::clear_start() {
  start_ = 0;
}
inline ::google::protobuf::int32 PriceInfo::start() const {
  // @@protoc_insertion_point(field_get:ttmall.PriceInfo.start)
  return start_;
}
inline void PriceInfo::set_start(::google::protobuf::int32 value) {
  
  start_ = value;
  // @@protoc_insertion_point(field_set:ttmall.PriceInfo.start)
}

// -------------------------------------------------------------------

// AttrInfo

// string code = 1;
inline void AttrInfo::clear_code() {
  code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AttrInfo::code() const {
  // @@protoc_insertion_point(field_get:ttmall.AttrInfo.code)
  return code_.GetNoArena();
}
inline void AttrInfo::set_code(const ::std::string& value) {
  
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ttmall.AttrInfo.code)
}
#if LANG_CXX11
inline void AttrInfo::set_code(::std::string&& value) {
  
  code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ttmall.AttrInfo.code)
}
#endif
inline void AttrInfo::set_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ttmall.AttrInfo.code)
}
inline void AttrInfo::set_code(const char* value, size_t size) {
  
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ttmall.AttrInfo.code)
}
inline ::std::string* AttrInfo::mutable_code() {
  
  // @@protoc_insertion_point(field_mutable:ttmall.AttrInfo.code)
  return code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AttrInfo::release_code() {
  // @@protoc_insertion_point(field_release:ttmall.AttrInfo.code)
  
  return code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AttrInfo::set_allocated_code(::std::string* code) {
  if (code != NULL) {
    
  } else {
    
  }
  code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), code);
  // @@protoc_insertion_point(field_set_allocated:ttmall.AttrInfo.code)
}

// string name = 2;
inline void AttrInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AttrInfo::name() const {
  // @@protoc_insertion_point(field_get:ttmall.AttrInfo.name)
  return name_.GetNoArena();
}
inline void AttrInfo::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ttmall.AttrInfo.name)
}
#if LANG_CXX11
inline void AttrInfo::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ttmall.AttrInfo.name)
}
#endif
inline void AttrInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ttmall.AttrInfo.name)
}
inline void AttrInfo::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ttmall.AttrInfo.name)
}
inline ::std::string* AttrInfo::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:ttmall.AttrInfo.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AttrInfo::release_name() {
  // @@protoc_insertion_point(field_release:ttmall.AttrInfo.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AttrInfo::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:ttmall.AttrInfo.name)
}

// -------------------------------------------------------------------

// AttrGroup

// string code = 1;
inline void AttrGroup::clear_code() {
  code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AttrGroup::code() const {
  // @@protoc_insertion_point(field_get:ttmall.AttrGroup.code)
  return code_.GetNoArena();
}
inline void AttrGroup::set_code(const ::std::string& value) {
  
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ttmall.AttrGroup.code)
}
#if LANG_CXX11
inline void AttrGroup::set_code(::std::string&& value) {
  
  code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ttmall.AttrGroup.code)
}
#endif
inline void AttrGroup::set_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ttmall.AttrGroup.code)
}
inline void AttrGroup::set_code(const char* value, size_t size) {
  
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ttmall.AttrGroup.code)
}
inline ::std::string* AttrGroup::mutable_code() {
  
  // @@protoc_insertion_point(field_mutable:ttmall.AttrGroup.code)
  return code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AttrGroup::release_code() {
  // @@protoc_insertion_point(field_release:ttmall.AttrGroup.code)
  
  return code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AttrGroup::set_allocated_code(::std::string* code) {
  if (code != NULL) {
    
  } else {
    
  }
  code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), code);
  // @@protoc_insertion_point(field_set_allocated:ttmall.AttrGroup.code)
}

// string name = 2;
inline void AttrGroup::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AttrGroup::name() const {
  // @@protoc_insertion_point(field_get:ttmall.AttrGroup.name)
  return name_.GetNoArena();
}
inline void AttrGroup::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ttmall.AttrGroup.name)
}
#if LANG_CXX11
inline void AttrGroup::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ttmall.AttrGroup.name)
}
#endif
inline void AttrGroup::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ttmall.AttrGroup.name)
}
inline void AttrGroup::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ttmall.AttrGroup.name)
}
inline ::std::string* AttrGroup::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:ttmall.AttrGroup.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AttrGroup::release_name() {
  // @@protoc_insertion_point(field_release:ttmall.AttrGroup.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AttrGroup::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:ttmall.AttrGroup.name)
}

// repeated .ttmall.AttrInfo attrs = 3;
inline int AttrGroup::attrs_size() const {
  return attrs_.size();
}
inline void AttrGroup::clear_attrs() {
  attrs_.Clear();
}
inline const ::ttmall::AttrInfo& AttrGroup::attrs(int index) const {
  // @@protoc_insertion_point(field_get:ttmall.AttrGroup.attrs)
  return attrs_.Get(index);
}
inline ::ttmall::AttrInfo* AttrGroup::mutable_attrs(int index) {
  // @@protoc_insertion_point(field_mutable:ttmall.AttrGroup.attrs)
  return attrs_.Mutable(index);
}
inline ::ttmall::AttrInfo* AttrGroup::add_attrs() {
  // @@protoc_insertion_point(field_add:ttmall.AttrGroup.attrs)
  return attrs_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ttmall::AttrInfo >*
AttrGroup::mutable_attrs() {
  // @@protoc_insertion_point(field_mutable_list:ttmall.AttrGroup.attrs)
  return &attrs_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ttmall::AttrInfo >&
AttrGroup::attrs() const {
  // @@protoc_insertion_point(field_list:ttmall.AttrGroup.attrs)
  return attrs_;
}

// -------------------------------------------------------------------

// MapInfo

// string key = 1;
inline void MapInfo::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MapInfo::key() const {
  // @@protoc_insertion_point(field_get:ttmall.MapInfo.key)
  return key_.GetNoArena();
}
inline void MapInfo::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ttmall.MapInfo.key)
}
#if LANG_CXX11
inline void MapInfo::set_key(::std::string&& value) {
  
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ttmall.MapInfo.key)
}
#endif
inline void MapInfo::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ttmall.MapInfo.key)
}
inline void MapInfo::set_key(const char* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ttmall.MapInfo.key)
}
inline ::std::string* MapInfo::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:ttmall.MapInfo.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MapInfo::release_key() {
  // @@protoc_insertion_point(field_release:ttmall.MapInfo.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MapInfo::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:ttmall.MapInfo.key)
}

// string price = 2;
inline void MapInfo::clear_price() {
  price_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MapInfo::price() const {
  // @@protoc_insertion_point(field_get:ttmall.MapInfo.price)
  return price_.GetNoArena();
}
inline void MapInfo::set_price(const ::std::string& value) {
  
  price_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ttmall.MapInfo.price)
}
#if LANG_CXX11
inline void MapInfo::set_price(::std::string&& value) {
  
  price_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ttmall.MapInfo.price)
}
#endif
inline void MapInfo::set_price(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  price_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ttmall.MapInfo.price)
}
inline void MapInfo::set_price(const char* value, size_t size) {
  
  price_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ttmall.MapInfo.price)
}
inline ::std::string* MapInfo::mutable_price() {
  
  // @@protoc_insertion_point(field_mutable:ttmall.MapInfo.price)
  return price_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MapInfo::release_price() {
  // @@protoc_insertion_point(field_release:ttmall.MapInfo.price)
  
  return price_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MapInfo::set_allocated_price(::std::string* price) {
  if (price != NULL) {
    
  } else {
    
  }
  price_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), price);
  // @@protoc_insertion_point(field_set_allocated:ttmall.MapInfo.price)
}

// repeated .ttmall.ImageInfo images = 3;
inline int MapInfo::images_size() const {
  return images_.size();
}
inline void MapInfo::clear_images() {
  images_.Clear();
}
inline const ::ttmall::ImageInfo& MapInfo::images(int index) const {
  // @@protoc_insertion_point(field_get:ttmall.MapInfo.images)
  return images_.Get(index);
}
inline ::ttmall::ImageInfo* MapInfo::mutable_images(int index) {
  // @@protoc_insertion_point(field_mutable:ttmall.MapInfo.images)
  return images_.Mutable(index);
}
inline ::ttmall::ImageInfo* MapInfo::add_images() {
  // @@protoc_insertion_point(field_add:ttmall.MapInfo.images)
  return images_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ttmall::ImageInfo >*
MapInfo::mutable_images() {
  // @@protoc_insertion_point(field_mutable_list:ttmall.MapInfo.images)
  return &images_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ttmall::ImageInfo >&
MapInfo::images() const {
  // @@protoc_insertion_point(field_list:ttmall.MapInfo.images)
  return images_;
}

// int32 inventory = 4;
inline void MapInfo::clear_inventory() {
  inventory_ = 0;
}
inline ::google::protobuf::int32 MapInfo::inventory() const {
  // @@protoc_insertion_point(field_get:ttmall.MapInfo.inventory)
  return inventory_;
}
inline void MapInfo::set_inventory(::google::protobuf::int32 value) {
  
  inventory_ = value;
  // @@protoc_insertion_point(field_set:ttmall.MapInfo.inventory)
}

// repeated .ttmall.SetInfo sets = 5;
inline int MapInfo::sets_size() const {
  return sets_.size();
}
inline void MapInfo::clear_sets() {
  sets_.Clear();
}
inline const ::ttmall::SetInfo& MapInfo::sets(int index) const {
  // @@protoc_insertion_point(field_get:ttmall.MapInfo.sets)
  return sets_.Get(index);
}
inline ::ttmall::SetInfo* MapInfo::mutable_sets(int index) {
  // @@protoc_insertion_point(field_mutable:ttmall.MapInfo.sets)
  return sets_.Mutable(index);
}
inline ::ttmall::SetInfo* MapInfo::add_sets() {
  // @@protoc_insertion_point(field_add:ttmall.MapInfo.sets)
  return sets_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ttmall::SetInfo >*
MapInfo::mutable_sets() {
  // @@protoc_insertion_point(field_mutable_list:ttmall.MapInfo.sets)
  return &sets_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ttmall::SetInfo >&
MapInfo::sets() const {
  // @@protoc_insertion_point(field_list:ttmall.MapInfo.sets)
  return sets_;
}

// bool disabled = 6;
inline void MapInfo::clear_disabled() {
  disabled_ = false;
}
inline bool MapInfo::disabled() const {
  // @@protoc_insertion_point(field_get:ttmall.MapInfo.disabled)
  return disabled_;
}
inline void MapInfo::set_disabled(bool value) {
  
  disabled_ = value;
  // @@protoc_insertion_point(field_set:ttmall.MapInfo.disabled)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// GoodsInfo

// string id = 1;
inline void GoodsInfo::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GoodsInfo::id() const {
  // @@protoc_insertion_point(field_get:ttmall.GoodsInfo.id)
  return id_.GetNoArena();
}
inline void GoodsInfo::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ttmall.GoodsInfo.id)
}
#if LANG_CXX11
inline void GoodsInfo::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ttmall.GoodsInfo.id)
}
#endif
inline void GoodsInfo::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ttmall.GoodsInfo.id)
}
inline void GoodsInfo::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ttmall.GoodsInfo.id)
}
inline ::std::string* GoodsInfo::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:ttmall.GoodsInfo.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GoodsInfo::release_id() {
  // @@protoc_insertion_point(field_release:ttmall.GoodsInfo.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GoodsInfo::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:ttmall.GoodsInfo.id)
}

// string name = 2;
inline void GoodsInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GoodsInfo::name() const {
  // @@protoc_insertion_point(field_get:ttmall.GoodsInfo.name)
  return name_.GetNoArena();
}
inline void GoodsInfo::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ttmall.GoodsInfo.name)
}
#if LANG_CXX11
inline void GoodsInfo::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ttmall.GoodsInfo.name)
}
#endif
inline void GoodsInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ttmall.GoodsInfo.name)
}
inline void GoodsInfo::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ttmall.GoodsInfo.name)
}
inline ::std::string* GoodsInfo::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:ttmall.GoodsInfo.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GoodsInfo::release_name() {
  // @@protoc_insertion_point(field_release:ttmall.GoodsInfo.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GoodsInfo::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:ttmall.GoodsInfo.name)
}

// repeated string alias = 3;
inline int GoodsInfo::alias_size() const {
  return alias_.size();
}
inline void GoodsInfo::clear_alias() {
  alias_.Clear();
}
inline const ::std::string& GoodsInfo::alias(int index) const {
  // @@protoc_insertion_point(field_get:ttmall.GoodsInfo.alias)
  return alias_.Get(index);
}
inline ::std::string* GoodsInfo::mutable_alias(int index) {
  // @@protoc_insertion_point(field_mutable:ttmall.GoodsInfo.alias)
  return alias_.Mutable(index);
}
inline void GoodsInfo::set_alias(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ttmall.GoodsInfo.alias)
  alias_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void GoodsInfo::set_alias(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ttmall.GoodsInfo.alias)
  alias_.Mutable(index)->assign(std::move(value));
}
#endif
inline void GoodsInfo::set_alias(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  alias_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ttmall.GoodsInfo.alias)
}
inline void GoodsInfo::set_alias(int index, const char* value, size_t size) {
  alias_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ttmall.GoodsInfo.alias)
}
inline ::std::string* GoodsInfo::add_alias() {
  // @@protoc_insertion_point(field_add_mutable:ttmall.GoodsInfo.alias)
  return alias_.Add();
}
inline void GoodsInfo::add_alias(const ::std::string& value) {
  alias_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ttmall.GoodsInfo.alias)
}
#if LANG_CXX11
inline void GoodsInfo::add_alias(::std::string&& value) {
  alias_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ttmall.GoodsInfo.alias)
}
#endif
inline void GoodsInfo::add_alias(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  alias_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ttmall.GoodsInfo.alias)
}
inline void GoodsInfo::add_alias(const char* value, size_t size) {
  alias_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ttmall.GoodsInfo.alias)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
GoodsInfo::alias() const {
  // @@protoc_insertion_point(field_list:ttmall.GoodsInfo.alias)
  return alias_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
GoodsInfo::mutable_alias() {
  // @@protoc_insertion_point(field_mutable_list:ttmall.GoodsInfo.alias)
  return &alias_;
}

// repeated .ttmall.ImageInfo images = 4;
inline int GoodsInfo::images_size() const {
  return images_.size();
}
inline void GoodsInfo::clear_images() {
  images_.Clear();
}
inline const ::ttmall::ImageInfo& GoodsInfo::images(int index) const {
  // @@protoc_insertion_point(field_get:ttmall.GoodsInfo.images)
  return images_.Get(index);
}
inline ::ttmall::ImageInfo* GoodsInfo::mutable_images(int index) {
  // @@protoc_insertion_point(field_mutable:ttmall.GoodsInfo.images)
  return images_.Mutable(index);
}
inline ::ttmall::ImageInfo* GoodsInfo::add_images() {
  // @@protoc_insertion_point(field_add:ttmall.GoodsInfo.images)
  return images_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ttmall::ImageInfo >*
GoodsInfo::mutable_images() {
  // @@protoc_insertion_point(field_mutable_list:ttmall.GoodsInfo.images)
  return &images_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ttmall::ImageInfo >&
GoodsInfo::images() const {
  // @@protoc_insertion_point(field_list:ttmall.GoodsInfo.images)
  return images_;
}

// string area = 5;
inline void GoodsInfo::clear_area() {
  area_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GoodsInfo::area() const {
  // @@protoc_insertion_point(field_get:ttmall.GoodsInfo.area)
  return area_.GetNoArena();
}
inline void GoodsInfo::set_area(const ::std::string& value) {
  
  area_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ttmall.GoodsInfo.area)
}
#if LANG_CXX11
inline void GoodsInfo::set_area(::std::string&& value) {
  
  area_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ttmall.GoodsInfo.area)
}
#endif
inline void GoodsInfo::set_area(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  area_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ttmall.GoodsInfo.area)
}
inline void GoodsInfo::set_area(const char* value, size_t size) {
  
  area_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ttmall.GoodsInfo.area)
}
inline ::std::string* GoodsInfo::mutable_area() {
  
  // @@protoc_insertion_point(field_mutable:ttmall.GoodsInfo.area)
  return area_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GoodsInfo::release_area() {
  // @@protoc_insertion_point(field_release:ttmall.GoodsInfo.area)
  
  return area_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GoodsInfo::set_allocated_area(::std::string* area) {
  if (area != NULL) {
    
  } else {
    
  }
  area_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), area);
  // @@protoc_insertion_point(field_set_allocated:ttmall.GoodsInfo.area)
}

// string desc = 6;
inline void GoodsInfo::clear_desc() {
  desc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GoodsInfo::desc() const {
  // @@protoc_insertion_point(field_get:ttmall.GoodsInfo.desc)
  return desc_.GetNoArena();
}
inline void GoodsInfo::set_desc(const ::std::string& value) {
  
  desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ttmall.GoodsInfo.desc)
}
#if LANG_CXX11
inline void GoodsInfo::set_desc(::std::string&& value) {
  
  desc_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ttmall.GoodsInfo.desc)
}
#endif
inline void GoodsInfo::set_desc(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ttmall.GoodsInfo.desc)
}
inline void GoodsInfo::set_desc(const char* value, size_t size) {
  
  desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ttmall.GoodsInfo.desc)
}
inline ::std::string* GoodsInfo::mutable_desc() {
  
  // @@protoc_insertion_point(field_mutable:ttmall.GoodsInfo.desc)
  return desc_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GoodsInfo::release_desc() {
  // @@protoc_insertion_point(field_release:ttmall.GoodsInfo.desc)
  
  return desc_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GoodsInfo::set_allocated_desc(::std::string* desc) {
  if (desc != NULL) {
    
  } else {
    
  }
  desc_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), desc);
  // @@protoc_insertion_point(field_set_allocated:ttmall.GoodsInfo.desc)
}

// repeated string type_id = 7;
inline int GoodsInfo::type_id_size() const {
  return type_id_.size();
}
inline void GoodsInfo::clear_type_id() {
  type_id_.Clear();
}
inline const ::std::string& GoodsInfo::type_id(int index) const {
  // @@protoc_insertion_point(field_get:ttmall.GoodsInfo.type_id)
  return type_id_.Get(index);
}
inline ::std::string* GoodsInfo::mutable_type_id(int index) {
  // @@protoc_insertion_point(field_mutable:ttmall.GoodsInfo.type_id)
  return type_id_.Mutable(index);
}
inline void GoodsInfo::set_type_id(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ttmall.GoodsInfo.type_id)
  type_id_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void GoodsInfo::set_type_id(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ttmall.GoodsInfo.type_id)
  type_id_.Mutable(index)->assign(std::move(value));
}
#endif
inline void GoodsInfo::set_type_id(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  type_id_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ttmall.GoodsInfo.type_id)
}
inline void GoodsInfo::set_type_id(int index, const char* value, size_t size) {
  type_id_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ttmall.GoodsInfo.type_id)
}
inline ::std::string* GoodsInfo::add_type_id() {
  // @@protoc_insertion_point(field_add_mutable:ttmall.GoodsInfo.type_id)
  return type_id_.Add();
}
inline void GoodsInfo::add_type_id(const ::std::string& value) {
  type_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ttmall.GoodsInfo.type_id)
}
#if LANG_CXX11
inline void GoodsInfo::add_type_id(::std::string&& value) {
  type_id_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ttmall.GoodsInfo.type_id)
}
#endif
inline void GoodsInfo::add_type_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  type_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ttmall.GoodsInfo.type_id)
}
inline void GoodsInfo::add_type_id(const char* value, size_t size) {
  type_id_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ttmall.GoodsInfo.type_id)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
GoodsInfo::type_id() const {
  // @@protoc_insertion_point(field_list:ttmall.GoodsInfo.type_id)
  return type_id_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
GoodsInfo::mutable_type_id() {
  // @@protoc_insertion_point(field_mutable_list:ttmall.GoodsInfo.type_id)
  return &type_id_;
}

// map<string, .ttmall.PriceInfo> prices = 8;
inline int GoodsInfo::prices_size() const {
  return prices_.size();
}
inline void GoodsInfo::clear_prices() {
  prices_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::ttmall::PriceInfo >&
GoodsInfo::prices() const {
  // @@protoc_insertion_point(field_map:ttmall.GoodsInfo.prices)
  return prices_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::ttmall::PriceInfo >*
GoodsInfo::mutable_prices() {
  // @@protoc_insertion_point(field_mutable_map:ttmall.GoodsInfo.prices)
  return prices_.MutableMap();
}

// map<string, .ttmall.AttrGroup> attrs = 9;
inline int GoodsInfo::attrs_size() const {
  return attrs_.size();
}
inline void GoodsInfo::clear_attrs() {
  attrs_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::ttmall::AttrGroup >&
GoodsInfo::attrs() const {
  // @@protoc_insertion_point(field_map:ttmall.GoodsInfo.attrs)
  return attrs_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::ttmall::AttrGroup >*
GoodsInfo::mutable_attrs() {
  // @@protoc_insertion_point(field_mutable_map:ttmall.GoodsInfo.attrs)
  return attrs_.MutableMap();
}

// map<string, .ttmall.MapInfo> maps = 10;
inline int GoodsInfo::maps_size() const {
  return maps_.size();
}
inline void GoodsInfo::clear_maps() {
  maps_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::ttmall::MapInfo >&
GoodsInfo::maps() const {
  // @@protoc_insertion_point(field_map:ttmall.GoodsInfo.maps)
  return maps_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::ttmall::MapInfo >*
GoodsInfo::mutable_maps() {
  // @@protoc_insertion_point(field_mutable_map:ttmall.GoodsInfo.maps)
  return maps_.MutableMap();
}

// string key_id = 11;
inline void GoodsInfo::clear_key_id() {
  key_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GoodsInfo::key_id() const {
  // @@protoc_insertion_point(field_get:ttmall.GoodsInfo.key_id)
  return key_id_.GetNoArena();
}
inline void GoodsInfo::set_key_id(const ::std::string& value) {
  
  key_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ttmall.GoodsInfo.key_id)
}
#if LANG_CXX11
inline void GoodsInfo::set_key_id(::std::string&& value) {
  
  key_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ttmall.GoodsInfo.key_id)
}
#endif
inline void GoodsInfo::set_key_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  key_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ttmall.GoodsInfo.key_id)
}
inline void GoodsInfo::set_key_id(const char* value, size_t size) {
  
  key_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ttmall.GoodsInfo.key_id)
}
inline ::std::string* GoodsInfo::mutable_key_id() {
  
  // @@protoc_insertion_point(field_mutable:ttmall.GoodsInfo.key_id)
  return key_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GoodsInfo::release_key_id() {
  // @@protoc_insertion_point(field_release:ttmall.GoodsInfo.key_id)
  
  return key_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GoodsInfo::set_allocated_key_id(::std::string* key_id) {
  if (key_id != NULL) {
    
  } else {
    
  }
  key_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key_id);
  // @@protoc_insertion_point(field_set_allocated:ttmall.GoodsInfo.key_id)
}

// string brief = 12;
inline void GoodsInfo::clear_brief() {
  brief_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GoodsInfo::brief() const {
  // @@protoc_insertion_point(field_get:ttmall.GoodsInfo.brief)
  return brief_.GetNoArena();
}
inline void GoodsInfo::set_brief(const ::std::string& value) {
  
  brief_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ttmall.GoodsInfo.brief)
}
#if LANG_CXX11
inline void GoodsInfo::set_brief(::std::string&& value) {
  
  brief_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ttmall.GoodsInfo.brief)
}
#endif
inline void GoodsInfo::set_brief(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  brief_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ttmall.GoodsInfo.brief)
}
inline void GoodsInfo::set_brief(const char* value, size_t size) {
  
  brief_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ttmall.GoodsInfo.brief)
}
inline ::std::string* GoodsInfo::mutable_brief() {
  
  // @@protoc_insertion_point(field_mutable:ttmall.GoodsInfo.brief)
  return brief_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GoodsInfo::release_brief() {
  // @@protoc_insertion_point(field_release:ttmall.GoodsInfo.brief)
  
  return brief_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GoodsInfo::set_allocated_brief(::std::string* brief) {
  if (brief != NULL) {
    
  } else {
    
  }
  brief_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), brief);
  // @@protoc_insertion_point(field_set_allocated:ttmall.GoodsInfo.brief)
}

// bool disabled = 13;
inline void GoodsInfo::clear_disabled() {
  disabled_ = false;
}
inline bool GoodsInfo::disabled() const {
  // @@protoc_insertion_point(field_get:ttmall.GoodsInfo.disabled)
  return disabled_;
}
inline void GoodsInfo::set_disabled(bool value) {
  
  disabled_ = value;
  // @@protoc_insertion_point(field_set:ttmall.GoodsInfo.disabled)
}

// string code = 14;
inline void GoodsInfo::clear_code() {
  code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GoodsInfo::code() const {
  // @@protoc_insertion_point(field_get:ttmall.GoodsInfo.code)
  return code_.GetNoArena();
}
inline void GoodsInfo::set_code(const ::std::string& value) {
  
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ttmall.GoodsInfo.code)
}
#if LANG_CXX11
inline void GoodsInfo::set_code(::std::string&& value) {
  
  code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ttmall.GoodsInfo.code)
}
#endif
inline void GoodsInfo::set_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ttmall.GoodsInfo.code)
}
inline void GoodsInfo::set_code(const char* value, size_t size) {
  
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ttmall.GoodsInfo.code)
}
inline ::std::string* GoodsInfo::mutable_code() {
  
  // @@protoc_insertion_point(field_mutable:ttmall.GoodsInfo.code)
  return code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GoodsInfo::release_code() {
  // @@protoc_insertion_point(field_release:ttmall.GoodsInfo.code)
  
  return code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GoodsInfo::set_allocated_code(::std::string* code) {
  if (code != NULL) {
    
  } else {
    
  }
  code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), code);
  // @@protoc_insertion_point(field_set_allocated:ttmall.GoodsInfo.code)
}

// bool is_collect = 15;
inline void GoodsInfo::clear_is_collect() {
  is_collect_ = false;
}
inline bool GoodsInfo::is_collect() const {
  // @@protoc_insertion_point(field_get:ttmall.GoodsInfo.is_collect)
  return is_collect_;
}
inline void GoodsInfo::set_is_collect(bool value) {
  
  is_collect_ = value;
  // @@protoc_insertion_point(field_set:ttmall.GoodsInfo.is_collect)
}

// -------------------------------------------------------------------

// NoticeInfo

// string id = 1;
inline void NoticeInfo::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NoticeInfo::id() const {
  // @@protoc_insertion_point(field_get:ttmall.NoticeInfo.id)
  return id_.GetNoArena();
}
inline void NoticeInfo::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ttmall.NoticeInfo.id)
}
#if LANG_CXX11
inline void NoticeInfo::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ttmall.NoticeInfo.id)
}
#endif
inline void NoticeInfo::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ttmall.NoticeInfo.id)
}
inline void NoticeInfo::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ttmall.NoticeInfo.id)
}
inline ::std::string* NoticeInfo::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:ttmall.NoticeInfo.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NoticeInfo::release_id() {
  // @@protoc_insertion_point(field_release:ttmall.NoticeInfo.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NoticeInfo::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:ttmall.NoticeInfo.id)
}

// string content = 2;
inline void NoticeInfo::clear_content() {
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NoticeInfo::content() const {
  // @@protoc_insertion_point(field_get:ttmall.NoticeInfo.content)
  return content_.GetNoArena();
}
inline void NoticeInfo::set_content(const ::std::string& value) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ttmall.NoticeInfo.content)
}
#if LANG_CXX11
inline void NoticeInfo::set_content(::std::string&& value) {
  
  content_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ttmall.NoticeInfo.content)
}
#endif
inline void NoticeInfo::set_content(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ttmall.NoticeInfo.content)
}
inline void NoticeInfo::set_content(const char* value, size_t size) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ttmall.NoticeInfo.content)
}
inline ::std::string* NoticeInfo::mutable_content() {
  
  // @@protoc_insertion_point(field_mutable:ttmall.NoticeInfo.content)
  return content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NoticeInfo::release_content() {
  // @@protoc_insertion_point(field_release:ttmall.NoticeInfo.content)
  
  return content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NoticeInfo::set_allocated_content(::std::string* content) {
  if (content != NULL) {
    
  } else {
    
  }
  content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:ttmall.NoticeInfo.content)
}

// int64 time = 3;
inline void NoticeInfo::clear_time() {
  time_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 NoticeInfo::time() const {
  // @@protoc_insertion_point(field_get:ttmall.NoticeInfo.time)
  return time_;
}
inline void NoticeInfo::set_time(::google::protobuf::int64 value) {
  
  time_ = value;
  // @@protoc_insertion_point(field_set:ttmall.NoticeInfo.time)
}

// -------------------------------------------------------------------

// ListNoticeReq

// string token = 1;
inline void ListNoticeReq::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ListNoticeReq::token() const {
  // @@protoc_insertion_point(field_get:ttmall.ListNoticeReq.token)
  return token_.GetNoArena();
}
inline void ListNoticeReq::set_token(const ::std::string& value) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ttmall.ListNoticeReq.token)
}
#if LANG_CXX11
inline void ListNoticeReq::set_token(::std::string&& value) {
  
  token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ttmall.ListNoticeReq.token)
}
#endif
inline void ListNoticeReq::set_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ttmall.ListNoticeReq.token)
}
inline void ListNoticeReq::set_token(const char* value, size_t size) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ttmall.ListNoticeReq.token)
}
inline ::std::string* ListNoticeReq::mutable_token() {
  
  // @@protoc_insertion_point(field_mutable:ttmall.ListNoticeReq.token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListNoticeReq::release_token() {
  // @@protoc_insertion_point(field_release:ttmall.ListNoticeReq.token)
  
  return token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListNoticeReq::set_allocated_token(::std::string* token) {
  if (token != NULL) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:ttmall.ListNoticeReq.token)
}

// -------------------------------------------------------------------

// ListNoticeRep

// repeated .ttmall.NoticeInfo items = 1;
inline int ListNoticeRep::items_size() const {
  return items_.size();
}
inline void ListNoticeRep::clear_items() {
  items_.Clear();
}
inline const ::ttmall::NoticeInfo& ListNoticeRep::items(int index) const {
  // @@protoc_insertion_point(field_get:ttmall.ListNoticeRep.items)
  return items_.Get(index);
}
inline ::ttmall::NoticeInfo* ListNoticeRep::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:ttmall.ListNoticeRep.items)
  return items_.Mutable(index);
}
inline ::ttmall::NoticeInfo* ListNoticeRep::add_items() {
  // @@protoc_insertion_point(field_add:ttmall.ListNoticeRep.items)
  return items_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ttmall::NoticeInfo >*
ListNoticeRep::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:ttmall.ListNoticeRep.items)
  return &items_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ttmall::NoticeInfo >&
ListNoticeRep::items() const {
  // @@protoc_insertion_point(field_list:ttmall.ListNoticeRep.items)
  return items_;
}

// -------------------------------------------------------------------

// ExtInfo

// int32 type = 1;
inline void ExtInfo::clear_type() {
  type_ = 0;
}
inline ::google::protobuf::int32 ExtInfo::type() const {
  // @@protoc_insertion_point(field_get:ttmall.ExtInfo.type)
  return type_;
}
inline void ExtInfo::set_type(::google::protobuf::int32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:ttmall.ExtInfo.type)
}

// string id = 2;
inline void ExtInfo::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ExtInfo::id() const {
  // @@protoc_insertion_point(field_get:ttmall.ExtInfo.id)
  return id_.GetNoArena();
}
inline void ExtInfo::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ttmall.ExtInfo.id)
}
#if LANG_CXX11
inline void ExtInfo::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ttmall.ExtInfo.id)
}
#endif
inline void ExtInfo::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ttmall.ExtInfo.id)
}
inline void ExtInfo::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ttmall.ExtInfo.id)
}
inline ::std::string* ExtInfo::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:ttmall.ExtInfo.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ExtInfo::release_id() {
  // @@protoc_insertion_point(field_release:ttmall.ExtInfo.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ExtInfo::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:ttmall.ExtInfo.id)
}

// -------------------------------------------------------------------

// MessageInfo

// string id = 1;
inline void MessageInfo::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MessageInfo::id() const {
  // @@protoc_insertion_point(field_get:ttmall.MessageInfo.id)
  return id_.GetNoArena();
}
inline void MessageInfo::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ttmall.MessageInfo.id)
}
#if LANG_CXX11
inline void MessageInfo::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ttmall.MessageInfo.id)
}
#endif
inline void MessageInfo::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ttmall.MessageInfo.id)
}
inline void MessageInfo::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ttmall.MessageInfo.id)
}
inline ::std::string* MessageInfo::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:ttmall.MessageInfo.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MessageInfo::release_id() {
  // @@protoc_insertion_point(field_release:ttmall.MessageInfo.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MessageInfo::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:ttmall.MessageInfo.id)
}

// .ttmall.MessageType type = 2;
inline void MessageInfo::clear_type() {
  type_ = 0;
}
inline ::ttmall::MessageType MessageInfo::type() const {
  // @@protoc_insertion_point(field_get:ttmall.MessageInfo.type)
  return static_cast< ::ttmall::MessageType >(type_);
}
inline void MessageInfo::set_type(::ttmall::MessageType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:ttmall.MessageInfo.type)
}

// string title = 3;
inline void MessageInfo::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MessageInfo::title() const {
  // @@protoc_insertion_point(field_get:ttmall.MessageInfo.title)
  return title_.GetNoArena();
}
inline void MessageInfo::set_title(const ::std::string& value) {
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ttmall.MessageInfo.title)
}
#if LANG_CXX11
inline void MessageInfo::set_title(::std::string&& value) {
  
  title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ttmall.MessageInfo.title)
}
#endif
inline void MessageInfo::set_title(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ttmall.MessageInfo.title)
}
inline void MessageInfo::set_title(const char* value, size_t size) {
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ttmall.MessageInfo.title)
}
inline ::std::string* MessageInfo::mutable_title() {
  
  // @@protoc_insertion_point(field_mutable:ttmall.MessageInfo.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MessageInfo::release_title() {
  // @@protoc_insertion_point(field_release:ttmall.MessageInfo.title)
  
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MessageInfo::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    
  } else {
    
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:ttmall.MessageInfo.title)
}

// string content = 4;
inline void MessageInfo::clear_content() {
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MessageInfo::content() const {
  // @@protoc_insertion_point(field_get:ttmall.MessageInfo.content)
  return content_.GetNoArena();
}
inline void MessageInfo::set_content(const ::std::string& value) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ttmall.MessageInfo.content)
}
#if LANG_CXX11
inline void MessageInfo::set_content(::std::string&& value) {
  
  content_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ttmall.MessageInfo.content)
}
#endif
inline void MessageInfo::set_content(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ttmall.MessageInfo.content)
}
inline void MessageInfo::set_content(const char* value, size_t size) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ttmall.MessageInfo.content)
}
inline ::std::string* MessageInfo::mutable_content() {
  
  // @@protoc_insertion_point(field_mutable:ttmall.MessageInfo.content)
  return content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MessageInfo::release_content() {
  // @@protoc_insertion_point(field_release:ttmall.MessageInfo.content)
  
  return content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MessageInfo::set_allocated_content(::std::string* content) {
  if (content != NULL) {
    
  } else {
    
  }
  content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:ttmall.MessageInfo.content)
}

// bool is_read = 5;
inline void MessageInfo::clear_is_read() {
  is_read_ = false;
}
inline bool MessageInfo::is_read() const {
  // @@protoc_insertion_point(field_get:ttmall.MessageInfo.is_read)
  return is_read_;
}
inline void MessageInfo::set_is_read(bool value) {
  
  is_read_ = value;
  // @@protoc_insertion_point(field_set:ttmall.MessageInfo.is_read)
}

// int64 time = 6;
inline void MessageInfo::clear_time() {
  time_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 MessageInfo::time() const {
  // @@protoc_insertion_point(field_get:ttmall.MessageInfo.time)
  return time_;
}
inline void MessageInfo::set_time(::google::protobuf::int64 value) {
  
  time_ = value;
  // @@protoc_insertion_point(field_set:ttmall.MessageInfo.time)
}

// .ttmall.ExtInfo ext = 7;
inline bool MessageInfo::has_ext() const {
  return this != internal_default_instance() && ext_ != NULL;
}
inline void MessageInfo::clear_ext() {
  if (GetArenaNoVirtual() == NULL && ext_ != NULL) delete ext_;
  ext_ = NULL;
}
inline const ::ttmall::ExtInfo& MessageInfo::ext() const {
  // @@protoc_insertion_point(field_get:ttmall.MessageInfo.ext)
  return ext_ != NULL ? *ext_
                         : *::ttmall::ExtInfo::internal_default_instance();
}
inline ::ttmall::ExtInfo* MessageInfo::mutable_ext() {
  
  if (ext_ == NULL) {
    ext_ = new ::ttmall::ExtInfo;
  }
  // @@protoc_insertion_point(field_mutable:ttmall.MessageInfo.ext)
  return ext_;
}
inline ::ttmall::ExtInfo* MessageInfo::release_ext() {
  // @@protoc_insertion_point(field_release:ttmall.MessageInfo.ext)
  
  ::ttmall::ExtInfo* temp = ext_;
  ext_ = NULL;
  return temp;
}
inline void MessageInfo::set_allocated_ext(::ttmall::ExtInfo* ext) {
  delete ext_;
  ext_ = ext;
  if (ext) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ttmall.MessageInfo.ext)
}

// -------------------------------------------------------------------

// ListMessageReq

// string token = 1;
inline void ListMessageReq::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ListMessageReq::token() const {
  // @@protoc_insertion_point(field_get:ttmall.ListMessageReq.token)
  return token_.GetNoArena();
}
inline void ListMessageReq::set_token(const ::std::string& value) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ttmall.ListMessageReq.token)
}
#if LANG_CXX11
inline void ListMessageReq::set_token(::std::string&& value) {
  
  token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ttmall.ListMessageReq.token)
}
#endif
inline void ListMessageReq::set_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ttmall.ListMessageReq.token)
}
inline void ListMessageReq::set_token(const char* value, size_t size) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ttmall.ListMessageReq.token)
}
inline ::std::string* ListMessageReq::mutable_token() {
  
  // @@protoc_insertion_point(field_mutable:ttmall.ListMessageReq.token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListMessageReq::release_token() {
  // @@protoc_insertion_point(field_release:ttmall.ListMessageReq.token)
  
  return token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListMessageReq::set_allocated_token(::std::string* token) {
  if (token != NULL) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:ttmall.ListMessageReq.token)
}

// int32 skip = 2;
inline void ListMessageReq::clear_skip() {
  skip_ = 0;
}
inline ::google::protobuf::int32 ListMessageReq::skip() const {
  // @@protoc_insertion_point(field_get:ttmall.ListMessageReq.skip)
  return skip_;
}
inline void ListMessageReq::set_skip(::google::protobuf::int32 value) {
  
  skip_ = value;
  // @@protoc_insertion_point(field_set:ttmall.ListMessageReq.skip)
}

// int32 limit = 3;
inline void ListMessageReq::clear_limit() {
  limit_ = 0;
}
inline ::google::protobuf::int32 ListMessageReq::limit() const {
  // @@protoc_insertion_point(field_get:ttmall.ListMessageReq.limit)
  return limit_;
}
inline void ListMessageReq::set_limit(::google::protobuf::int32 value) {
  
  limit_ = value;
  // @@protoc_insertion_point(field_set:ttmall.ListMessageReq.limit)
}

// -------------------------------------------------------------------

// ListMessageRep

// repeated .ttmall.MessageInfo items = 1;
inline int ListMessageRep::items_size() const {
  return items_.size();
}
inline void ListMessageRep::clear_items() {
  items_.Clear();
}
inline const ::ttmall::MessageInfo& ListMessageRep::items(int index) const {
  // @@protoc_insertion_point(field_get:ttmall.ListMessageRep.items)
  return items_.Get(index);
}
inline ::ttmall::MessageInfo* ListMessageRep::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:ttmall.ListMessageRep.items)
  return items_.Mutable(index);
}
inline ::ttmall::MessageInfo* ListMessageRep::add_items() {
  // @@protoc_insertion_point(field_add:ttmall.ListMessageRep.items)
  return items_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ttmall::MessageInfo >*
ListMessageRep::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:ttmall.ListMessageRep.items)
  return &items_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ttmall::MessageInfo >&
ListMessageRep::items() const {
  // @@protoc_insertion_point(field_list:ttmall.ListMessageRep.items)
  return items_;
}

// -------------------------------------------------------------------

// DeleteMessageReq

// string token = 1;
inline void DeleteMessageReq::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeleteMessageReq::token() const {
  // @@protoc_insertion_point(field_get:ttmall.DeleteMessageReq.token)
  return token_.GetNoArena();
}
inline void DeleteMessageReq::set_token(const ::std::string& value) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ttmall.DeleteMessageReq.token)
}
#if LANG_CXX11
inline void DeleteMessageReq::set_token(::std::string&& value) {
  
  token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ttmall.DeleteMessageReq.token)
}
#endif
inline void DeleteMessageReq::set_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ttmall.DeleteMessageReq.token)
}
inline void DeleteMessageReq::set_token(const char* value, size_t size) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ttmall.DeleteMessageReq.token)
}
inline ::std::string* DeleteMessageReq::mutable_token() {
  
  // @@protoc_insertion_point(field_mutable:ttmall.DeleteMessageReq.token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeleteMessageReq::release_token() {
  // @@protoc_insertion_point(field_release:ttmall.DeleteMessageReq.token)
  
  return token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeleteMessageReq::set_allocated_token(::std::string* token) {
  if (token != NULL) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:ttmall.DeleteMessageReq.token)
}

// string id = 2;
inline void DeleteMessageReq::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeleteMessageReq::id() const {
  // @@protoc_insertion_point(field_get:ttmall.DeleteMessageReq.id)
  return id_.GetNoArena();
}
inline void DeleteMessageReq::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ttmall.DeleteMessageReq.id)
}
#if LANG_CXX11
inline void DeleteMessageReq::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ttmall.DeleteMessageReq.id)
}
#endif
inline void DeleteMessageReq::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ttmall.DeleteMessageReq.id)
}
inline void DeleteMessageReq::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ttmall.DeleteMessageReq.id)
}
inline ::std::string* DeleteMessageReq::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:ttmall.DeleteMessageReq.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeleteMessageReq::release_id() {
  // @@protoc_insertion_point(field_release:ttmall.DeleteMessageReq.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeleteMessageReq::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:ttmall.DeleteMessageReq.id)
}

// -------------------------------------------------------------------

// DeleteMessageRep

// string id = 1;
inline void DeleteMessageRep::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeleteMessageRep::id() const {
  // @@protoc_insertion_point(field_get:ttmall.DeleteMessageRep.id)
  return id_.GetNoArena();
}
inline void DeleteMessageRep::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ttmall.DeleteMessageRep.id)
}
#if LANG_CXX11
inline void DeleteMessageRep::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ttmall.DeleteMessageRep.id)
}
#endif
inline void DeleteMessageRep::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ttmall.DeleteMessageRep.id)
}
inline void DeleteMessageRep::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ttmall.DeleteMessageRep.id)
}
inline ::std::string* DeleteMessageRep::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:ttmall.DeleteMessageRep.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeleteMessageRep::release_id() {
  // @@protoc_insertion_point(field_release:ttmall.DeleteMessageRep.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeleteMessageRep::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:ttmall.DeleteMessageRep.id)
}

// -------------------------------------------------------------------

// SetMessageReadReq

// string token = 1;
inline void SetMessageReadReq::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SetMessageReadReq::token() const {
  // @@protoc_insertion_point(field_get:ttmall.SetMessageReadReq.token)
  return token_.GetNoArena();
}
inline void SetMessageReadReq::set_token(const ::std::string& value) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ttmall.SetMessageReadReq.token)
}
#if LANG_CXX11
inline void SetMessageReadReq::set_token(::std::string&& value) {
  
  token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ttmall.SetMessageReadReq.token)
}
#endif
inline void SetMessageReadReq::set_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ttmall.SetMessageReadReq.token)
}
inline void SetMessageReadReq::set_token(const char* value, size_t size) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ttmall.SetMessageReadReq.token)
}
inline ::std::string* SetMessageReadReq::mutable_token() {
  
  // @@protoc_insertion_point(field_mutable:ttmall.SetMessageReadReq.token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SetMessageReadReq::release_token() {
  // @@protoc_insertion_point(field_release:ttmall.SetMessageReadReq.token)
  
  return token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetMessageReadReq::set_allocated_token(::std::string* token) {
  if (token != NULL) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:ttmall.SetMessageReadReq.token)
}

// string id = 2;
inline void SetMessageReadReq::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SetMessageReadReq::id() const {
  // @@protoc_insertion_point(field_get:ttmall.SetMessageReadReq.id)
  return id_.GetNoArena();
}
inline void SetMessageReadReq::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ttmall.SetMessageReadReq.id)
}
#if LANG_CXX11
inline void SetMessageReadReq::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ttmall.SetMessageReadReq.id)
}
#endif
inline void SetMessageReadReq::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ttmall.SetMessageReadReq.id)
}
inline void SetMessageReadReq::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ttmall.SetMessageReadReq.id)
}
inline ::std::string* SetMessageReadReq::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:ttmall.SetMessageReadReq.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SetMessageReadReq::release_id() {
  // @@protoc_insertion_point(field_release:ttmall.SetMessageReadReq.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetMessageReadReq::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:ttmall.SetMessageReadReq.id)
}

// -------------------------------------------------------------------

// SetMessageReadRep

// string id = 1;
inline void SetMessageReadRep::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SetMessageReadRep::id() const {
  // @@protoc_insertion_point(field_get:ttmall.SetMessageReadRep.id)
  return id_.GetNoArena();
}
inline void SetMessageReadRep::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ttmall.SetMessageReadRep.id)
}
#if LANG_CXX11
inline void SetMessageReadRep::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ttmall.SetMessageReadRep.id)
}
#endif
inline void SetMessageReadRep::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ttmall.SetMessageReadRep.id)
}
inline void SetMessageReadRep::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ttmall.SetMessageReadRep.id)
}
inline ::std::string* SetMessageReadRep::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:ttmall.SetMessageReadRep.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SetMessageReadRep::release_id() {
  // @@protoc_insertion_point(field_release:ttmall.SetMessageReadRep.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetMessageReadRep::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:ttmall.SetMessageReadRep.id)
}

// int32 count = 2;
inline void SetMessageReadRep::clear_count() {
  count_ = 0;
}
inline ::google::protobuf::int32 SetMessageReadRep::count() const {
  // @@protoc_insertion_point(field_get:ttmall.SetMessageReadRep.count)
  return count_;
}
inline void SetMessageReadRep::set_count(::google::protobuf::int32 value) {
  
  count_ = value;
  // @@protoc_insertion_point(field_set:ttmall.SetMessageReadRep.count)
}

// -------------------------------------------------------------------

// GetNewMessageReq

// string token = 1;
inline void GetNewMessageReq::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetNewMessageReq::token() const {
  // @@protoc_insertion_point(field_get:ttmall.GetNewMessageReq.token)
  return token_.GetNoArena();
}
inline void GetNewMessageReq::set_token(const ::std::string& value) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ttmall.GetNewMessageReq.token)
}
#if LANG_CXX11
inline void GetNewMessageReq::set_token(::std::string&& value) {
  
  token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ttmall.GetNewMessageReq.token)
}
#endif
inline void GetNewMessageReq::set_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ttmall.GetNewMessageReq.token)
}
inline void GetNewMessageReq::set_token(const char* value, size_t size) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ttmall.GetNewMessageReq.token)
}
inline ::std::string* GetNewMessageReq::mutable_token() {
  
  // @@protoc_insertion_point(field_mutable:ttmall.GetNewMessageReq.token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetNewMessageReq::release_token() {
  // @@protoc_insertion_point(field_release:ttmall.GetNewMessageReq.token)
  
  return token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetNewMessageReq::set_allocated_token(::std::string* token) {
  if (token != NULL) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:ttmall.GetNewMessageReq.token)
}

// -------------------------------------------------------------------

// GetNewMessageRep

// int32 count = 1;
inline void GetNewMessageRep::clear_count() {
  count_ = 0;
}
inline ::google::protobuf::int32 GetNewMessageRep::count() const {
  // @@protoc_insertion_point(field_get:ttmall.GetNewMessageRep.count)
  return count_;
}
inline void GetNewMessageRep::set_count(::google::protobuf::int32 value) {
  
  count_ = value;
  // @@protoc_insertion_point(field_set:ttmall.GetNewMessageRep.count)
}

// -------------------------------------------------------------------

// CoordInfo

// double lng = 1;
inline void CoordInfo::clear_lng() {
  lng_ = 0;
}
inline double CoordInfo::lng() const {
  // @@protoc_insertion_point(field_get:ttmall.CoordInfo.lng)
  return lng_;
}
inline void CoordInfo::set_lng(double value) {
  
  lng_ = value;
  // @@protoc_insertion_point(field_set:ttmall.CoordInfo.lng)
}

// double lat = 2;
inline void CoordInfo::clear_lat() {
  lat_ = 0;
}
inline double CoordInfo::lat() const {
  // @@protoc_insertion_point(field_get:ttmall.CoordInfo.lat)
  return lat_;
}
inline void CoordInfo::set_lat(double value) {
  
  lat_ = value;
  // @@protoc_insertion_point(field_set:ttmall.CoordInfo.lat)
}

// -------------------------------------------------------------------

// RegionInfo

// string id = 1;
inline void RegionInfo::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RegionInfo::id() const {
  // @@protoc_insertion_point(field_get:ttmall.RegionInfo.id)
  return id_.GetNoArena();
}
inline void RegionInfo::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ttmall.RegionInfo.id)
}
#if LANG_CXX11
inline void RegionInfo::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ttmall.RegionInfo.id)
}
#endif
inline void RegionInfo::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ttmall.RegionInfo.id)
}
inline void RegionInfo::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ttmall.RegionInfo.id)
}
inline ::std::string* RegionInfo::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:ttmall.RegionInfo.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RegionInfo::release_id() {
  // @@protoc_insertion_point(field_release:ttmall.RegionInfo.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RegionInfo::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:ttmall.RegionInfo.id)
}

// string name = 2;
inline void RegionInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RegionInfo::name() const {
  // @@protoc_insertion_point(field_get:ttmall.RegionInfo.name)
  return name_.GetNoArena();
}
inline void RegionInfo::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ttmall.RegionInfo.name)
}
#if LANG_CXX11
inline void RegionInfo::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ttmall.RegionInfo.name)
}
#endif
inline void RegionInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ttmall.RegionInfo.name)
}
inline void RegionInfo::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ttmall.RegionInfo.name)
}
inline ::std::string* RegionInfo::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:ttmall.RegionInfo.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RegionInfo::release_name() {
  // @@protoc_insertion_point(field_release:ttmall.RegionInfo.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RegionInfo::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:ttmall.RegionInfo.name)
}

// string parent = 3;
inline void RegionInfo::clear_parent() {
  parent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RegionInfo::parent() const {
  // @@protoc_insertion_point(field_get:ttmall.RegionInfo.parent)
  return parent_.GetNoArena();
}
inline void RegionInfo::set_parent(const ::std::string& value) {
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ttmall.RegionInfo.parent)
}
#if LANG_CXX11
inline void RegionInfo::set_parent(::std::string&& value) {
  
  parent_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ttmall.RegionInfo.parent)
}
#endif
inline void RegionInfo::set_parent(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ttmall.RegionInfo.parent)
}
inline void RegionInfo::set_parent(const char* value, size_t size) {
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ttmall.RegionInfo.parent)
}
inline ::std::string* RegionInfo::mutable_parent() {
  
  // @@protoc_insertion_point(field_mutable:ttmall.RegionInfo.parent)
  return parent_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RegionInfo::release_parent() {
  // @@protoc_insertion_point(field_release:ttmall.RegionInfo.parent)
  
  return parent_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RegionInfo::set_allocated_parent(::std::string* parent) {
  if (parent != NULL) {
    
  } else {
    
  }
  parent_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), parent);
  // @@protoc_insertion_point(field_set_allocated:ttmall.RegionInfo.parent)
}

// string code = 4;
inline void RegionInfo::clear_code() {
  code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RegionInfo::code() const {
  // @@protoc_insertion_point(field_get:ttmall.RegionInfo.code)
  return code_.GetNoArena();
}
inline void RegionInfo::set_code(const ::std::string& value) {
  
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ttmall.RegionInfo.code)
}
#if LANG_CXX11
inline void RegionInfo::set_code(::std::string&& value) {
  
  code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ttmall.RegionInfo.code)
}
#endif
inline void RegionInfo::set_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ttmall.RegionInfo.code)
}
inline void RegionInfo::set_code(const char* value, size_t size) {
  
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ttmall.RegionInfo.code)
}
inline ::std::string* RegionInfo::mutable_code() {
  
  // @@protoc_insertion_point(field_mutable:ttmall.RegionInfo.code)
  return code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RegionInfo::release_code() {
  // @@protoc_insertion_point(field_release:ttmall.RegionInfo.code)
  
  return code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RegionInfo::set_allocated_code(::std::string* code) {
  if (code != NULL) {
    
  } else {
    
  }
  code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), code);
  // @@protoc_insertion_point(field_set_allocated:ttmall.RegionInfo.code)
}

// -------------------------------------------------------------------

// ImageInfo

// string small = 1;
inline void ImageInfo::clear_small() {
  small_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ImageInfo::small() const {
  // @@protoc_insertion_point(field_get:ttmall.ImageInfo.small)
  return small_.GetNoArena();
}
inline void ImageInfo::set_small(const ::std::string& value) {
  
  small_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ttmall.ImageInfo.small)
}
#if LANG_CXX11
inline void ImageInfo::set_small(::std::string&& value) {
  
  small_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ttmall.ImageInfo.small)
}
#endif
inline void ImageInfo::set_small(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  small_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ttmall.ImageInfo.small)
}
inline void ImageInfo::set_small(const char* value, size_t size) {
  
  small_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ttmall.ImageInfo.small)
}
inline ::std::string* ImageInfo::mutable_small() {
  
  // @@protoc_insertion_point(field_mutable:ttmall.ImageInfo.small)
  return small_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ImageInfo::release_small() {
  // @@protoc_insertion_point(field_release:ttmall.ImageInfo.small)
  
  return small_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ImageInfo::set_allocated_small(::std::string* small) {
  if (small != NULL) {
    
  } else {
    
  }
  small_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), small);
  // @@protoc_insertion_point(field_set_allocated:ttmall.ImageInfo.small)
}

// string big = 2;
inline void ImageInfo::clear_big() {
  big_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ImageInfo::big() const {
  // @@protoc_insertion_point(field_get:ttmall.ImageInfo.big)
  return big_.GetNoArena();
}
inline void ImageInfo::set_big(const ::std::string& value) {
  
  big_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ttmall.ImageInfo.big)
}
#if LANG_CXX11
inline void ImageInfo::set_big(::std::string&& value) {
  
  big_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ttmall.ImageInfo.big)
}
#endif
inline void ImageInfo::set_big(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  big_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ttmall.ImageInfo.big)
}
inline void ImageInfo::set_big(const char* value, size_t size) {
  
  big_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ttmall.ImageInfo.big)
}
inline ::std::string* ImageInfo::mutable_big() {
  
  // @@protoc_insertion_point(field_mutable:ttmall.ImageInfo.big)
  return big_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ImageInfo::release_big() {
  // @@protoc_insertion_point(field_release:ttmall.ImageInfo.big)
  
  return big_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ImageInfo::set_allocated_big(::std::string* big) {
  if (big != NULL) {
    
  } else {
    
  }
  big_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), big);
  // @@protoc_insertion_point(field_set_allocated:ttmall.ImageInfo.big)
}

// string md5 = 3;
inline void ImageInfo::clear_md5() {
  md5_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ImageInfo::md5() const {
  // @@protoc_insertion_point(field_get:ttmall.ImageInfo.md5)
  return md5_.GetNoArena();
}
inline void ImageInfo::set_md5(const ::std::string& value) {
  
  md5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ttmall.ImageInfo.md5)
}
#if LANG_CXX11
inline void ImageInfo::set_md5(::std::string&& value) {
  
  md5_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ttmall.ImageInfo.md5)
}
#endif
inline void ImageInfo::set_md5(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  md5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ttmall.ImageInfo.md5)
}
inline void ImageInfo::set_md5(const char* value, size_t size) {
  
  md5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ttmall.ImageInfo.md5)
}
inline ::std::string* ImageInfo::mutable_md5() {
  
  // @@protoc_insertion_point(field_mutable:ttmall.ImageInfo.md5)
  return md5_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ImageInfo::release_md5() {
  // @@protoc_insertion_point(field_release:ttmall.ImageInfo.md5)
  
  return md5_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ImageInfo::set_allocated_md5(::std::string* md5) {
  if (md5 != NULL) {
    
  } else {
    
  }
  md5_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), md5);
  // @@protoc_insertion_point(field_set_allocated:ttmall.ImageInfo.md5)
}

// -------------------------------------------------------------------

// CouponInfo

// string id = 1;
inline void CouponInfo::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CouponInfo::id() const {
  // @@protoc_insertion_point(field_get:ttmall.CouponInfo.id)
  return id_.GetNoArena();
}
inline void CouponInfo::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ttmall.CouponInfo.id)
}
#if LANG_CXX11
inline void CouponInfo::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ttmall.CouponInfo.id)
}
#endif
inline void CouponInfo::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ttmall.CouponInfo.id)
}
inline void CouponInfo::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ttmall.CouponInfo.id)
}
inline ::std::string* CouponInfo::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:ttmall.CouponInfo.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CouponInfo::release_id() {
  // @@protoc_insertion_point(field_release:ttmall.CouponInfo.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CouponInfo::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:ttmall.CouponInfo.id)
}

// string name = 2;
inline void CouponInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CouponInfo::name() const {
  // @@protoc_insertion_point(field_get:ttmall.CouponInfo.name)
  return name_.GetNoArena();
}
inline void CouponInfo::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ttmall.CouponInfo.name)
}
#if LANG_CXX11
inline void CouponInfo::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ttmall.CouponInfo.name)
}
#endif
inline void CouponInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ttmall.CouponInfo.name)
}
inline void CouponInfo::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ttmall.CouponInfo.name)
}
inline ::std::string* CouponInfo::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:ttmall.CouponInfo.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CouponInfo::release_name() {
  // @@protoc_insertion_point(field_release:ttmall.CouponInfo.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CouponInfo::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:ttmall.CouponInfo.name)
}

// int32 amount = 3;
inline void CouponInfo::clear_amount() {
  amount_ = 0;
}
inline ::google::protobuf::int32 CouponInfo::amount() const {
  // @@protoc_insertion_point(field_get:ttmall.CouponInfo.amount)
  return amount_;
}
inline void CouponInfo::set_amount(::google::protobuf::int32 value) {
  
  amount_ = value;
  // @@protoc_insertion_point(field_set:ttmall.CouponInfo.amount)
}

// int32 discount = 4;
inline void CouponInfo::clear_discount() {
  discount_ = 0;
}
inline ::google::protobuf::int32 CouponInfo::discount() const {
  // @@protoc_insertion_point(field_get:ttmall.CouponInfo.discount)
  return discount_;
}
inline void CouponInfo::set_discount(::google::protobuf::int32 value) {
  
  discount_ = value;
  // @@protoc_insertion_point(field_set:ttmall.CouponInfo.discount)
}

// int64 exp_time = 5;
inline void CouponInfo::clear_exp_time() {
  exp_time_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 CouponInfo::exp_time() const {
  // @@protoc_insertion_point(field_get:ttmall.CouponInfo.exp_time)
  return exp_time_;
}
inline void CouponInfo::set_exp_time(::google::protobuf::int64 value) {
  
  exp_time_ = value;
  // @@protoc_insertion_point(field_set:ttmall.CouponInfo.exp_time)
}

// -------------------------------------------------------------------

// CarInfo

// string id = 1;
inline void CarInfo::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CarInfo::id() const {
  // @@protoc_insertion_point(field_get:ttmall.CarInfo.id)
  return id_.GetNoArena();
}
inline void CarInfo::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ttmall.CarInfo.id)
}
#if LANG_CXX11
inline void CarInfo::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ttmall.CarInfo.id)
}
#endif
inline void CarInfo::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ttmall.CarInfo.id)
}
inline void CarInfo::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ttmall.CarInfo.id)
}
inline ::std::string* CarInfo::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:ttmall.CarInfo.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CarInfo::release_id() {
  // @@protoc_insertion_point(field_release:ttmall.CarInfo.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CarInfo::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:ttmall.CarInfo.id)
}

// string name = 2;
inline void CarInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CarInfo::name() const {
  // @@protoc_insertion_point(field_get:ttmall.CarInfo.name)
  return name_.GetNoArena();
}
inline void CarInfo::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ttmall.CarInfo.name)
}
#if LANG_CXX11
inline void CarInfo::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ttmall.CarInfo.name)
}
#endif
inline void CarInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ttmall.CarInfo.name)
}
inline void CarInfo::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ttmall.CarInfo.name)
}
inline ::std::string* CarInfo::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:ttmall.CarInfo.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CarInfo::release_name() {
  // @@protoc_insertion_point(field_release:ttmall.CarInfo.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CarInfo::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:ttmall.CarInfo.name)
}

// string model = 3;
inline void CarInfo::clear_model() {
  model_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CarInfo::model() const {
  // @@protoc_insertion_point(field_get:ttmall.CarInfo.model)
  return model_.GetNoArena();
}
inline void CarInfo::set_model(const ::std::string& value) {
  
  model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ttmall.CarInfo.model)
}
#if LANG_CXX11
inline void CarInfo::set_model(::std::string&& value) {
  
  model_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ttmall.CarInfo.model)
}
#endif
inline void CarInfo::set_model(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ttmall.CarInfo.model)
}
inline void CarInfo::set_model(const char* value, size_t size) {
  
  model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ttmall.CarInfo.model)
}
inline ::std::string* CarInfo::mutable_model() {
  
  // @@protoc_insertion_point(field_mutable:ttmall.CarInfo.model)
  return model_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CarInfo::release_model() {
  // @@protoc_insertion_point(field_release:ttmall.CarInfo.model)
  
  return model_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CarInfo::set_allocated_model(::std::string* model) {
  if (model != NULL) {
    
  } else {
    
  }
  model_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), model);
  // @@protoc_insertion_point(field_set_allocated:ttmall.CarInfo.model)
}

// string length = 4;
inline void CarInfo::clear_length() {
  length_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CarInfo::length() const {
  // @@protoc_insertion_point(field_get:ttmall.CarInfo.length)
  return length_.GetNoArena();
}
inline void CarInfo::set_length(const ::std::string& value) {
  
  length_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ttmall.CarInfo.length)
}
#if LANG_CXX11
inline void CarInfo::set_length(::std::string&& value) {
  
  length_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ttmall.CarInfo.length)
}
#endif
inline void CarInfo::set_length(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  length_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ttmall.CarInfo.length)
}
inline void CarInfo::set_length(const char* value, size_t size) {
  
  length_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ttmall.CarInfo.length)
}
inline ::std::string* CarInfo::mutable_length() {
  
  // @@protoc_insertion_point(field_mutable:ttmall.CarInfo.length)
  return length_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CarInfo::release_length() {
  // @@protoc_insertion_point(field_release:ttmall.CarInfo.length)
  
  return length_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CarInfo::set_allocated_length(::std::string* length) {
  if (length != NULL) {
    
  } else {
    
  }
  length_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), length);
  // @@protoc_insertion_point(field_set_allocated:ttmall.CarInfo.length)
}

// string load = 5;
inline void CarInfo::clear_load() {
  load_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CarInfo::load() const {
  // @@protoc_insertion_point(field_get:ttmall.CarInfo.load)
  return load_.GetNoArena();
}
inline void CarInfo::set_load(const ::std::string& value) {
  
  load_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ttmall.CarInfo.load)
}
#if LANG_CXX11
inline void CarInfo::set_load(::std::string&& value) {
  
  load_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ttmall.CarInfo.load)
}
#endif
inline void CarInfo::set_load(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  load_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ttmall.CarInfo.load)
}
inline void CarInfo::set_load(const char* value, size_t size) {
  
  load_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ttmall.CarInfo.load)
}
inline ::std::string* CarInfo::mutable_load() {
  
  // @@protoc_insertion_point(field_mutable:ttmall.CarInfo.load)
  return load_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CarInfo::release_load() {
  // @@protoc_insertion_point(field_release:ttmall.CarInfo.load)
  
  return load_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CarInfo::set_allocated_load(::std::string* load) {
  if (load != NULL) {
    
  } else {
    
  }
  load_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), load);
  // @@protoc_insertion_point(field_set_allocated:ttmall.CarInfo.load)
}

// string capacity = 6;
inline void CarInfo::clear_capacity() {
  capacity_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CarInfo::capacity() const {
  // @@protoc_insertion_point(field_get:ttmall.CarInfo.capacity)
  return capacity_.GetNoArena();
}
inline void CarInfo::set_capacity(const ::std::string& value) {
  
  capacity_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ttmall.CarInfo.capacity)
}
#if LANG_CXX11
inline void CarInfo::set_capacity(::std::string&& value) {
  
  capacity_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ttmall.CarInfo.capacity)
}
#endif
inline void CarInfo::set_capacity(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  capacity_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ttmall.CarInfo.capacity)
}
inline void CarInfo::set_capacity(const char* value, size_t size) {
  
  capacity_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ttmall.CarInfo.capacity)
}
inline ::std::string* CarInfo::mutable_capacity() {
  
  // @@protoc_insertion_point(field_mutable:ttmall.CarInfo.capacity)
  return capacity_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CarInfo::release_capacity() {
  // @@protoc_insertion_point(field_release:ttmall.CarInfo.capacity)
  
  return capacity_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CarInfo::set_allocated_capacity(::std::string* capacity) {
  if (capacity != NULL) {
    
  } else {
    
  }
  capacity_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), capacity);
  // @@protoc_insertion_point(field_set_allocated:ttmall.CarInfo.capacity)
}

// string color = 7;
inline void CarInfo::clear_color() {
  color_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CarInfo::color() const {
  // @@protoc_insertion_point(field_get:ttmall.CarInfo.color)
  return color_.GetNoArena();
}
inline void CarInfo::set_color(const ::std::string& value) {
  
  color_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ttmall.CarInfo.color)
}
#if LANG_CXX11
inline void CarInfo::set_color(::std::string&& value) {
  
  color_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ttmall.CarInfo.color)
}
#endif
inline void CarInfo::set_color(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  color_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ttmall.CarInfo.color)
}
inline void CarInfo::set_color(const char* value, size_t size) {
  
  color_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ttmall.CarInfo.color)
}
inline ::std::string* CarInfo::mutable_color() {
  
  // @@protoc_insertion_point(field_mutable:ttmall.CarInfo.color)
  return color_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CarInfo::release_color() {
  // @@protoc_insertion_point(field_release:ttmall.CarInfo.color)
  
  return color_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CarInfo::set_allocated_color(::std::string* color) {
  if (color != NULL) {
    
  } else {
    
  }
  color_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), color);
  // @@protoc_insertion_point(field_set_allocated:ttmall.CarInfo.color)
}

// string mark = 8;
inline void CarInfo::clear_mark() {
  mark_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CarInfo::mark() const {
  // @@protoc_insertion_point(field_get:ttmall.CarInfo.mark)
  return mark_.GetNoArena();
}
inline void CarInfo::set_mark(const ::std::string& value) {
  
  mark_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ttmall.CarInfo.mark)
}
#if LANG_CXX11
inline void CarInfo::set_mark(::std::string&& value) {
  
  mark_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ttmall.CarInfo.mark)
}
#endif
inline void CarInfo::set_mark(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  mark_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ttmall.CarInfo.mark)
}
inline void CarInfo::set_mark(const char* value, size_t size) {
  
  mark_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ttmall.CarInfo.mark)
}
inline ::std::string* CarInfo::mutable_mark() {
  
  // @@protoc_insertion_point(field_mutable:ttmall.CarInfo.mark)
  return mark_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CarInfo::release_mark() {
  // @@protoc_insertion_point(field_release:ttmall.CarInfo.mark)
  
  return mark_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CarInfo::set_allocated_mark(::std::string* mark) {
  if (mark != NULL) {
    
  } else {
    
  }
  mark_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mark);
  // @@protoc_insertion_point(field_set_allocated:ttmall.CarInfo.mark)
}

// repeated .ttmall.ImageInfo photos = 9;
inline int CarInfo::photos_size() const {
  return photos_.size();
}
inline void CarInfo::clear_photos() {
  photos_.Clear();
}
inline const ::ttmall::ImageInfo& CarInfo::photos(int index) const {
  // @@protoc_insertion_point(field_get:ttmall.CarInfo.photos)
  return photos_.Get(index);
}
inline ::ttmall::ImageInfo* CarInfo::mutable_photos(int index) {
  // @@protoc_insertion_point(field_mutable:ttmall.CarInfo.photos)
  return photos_.Mutable(index);
}
inline ::ttmall::ImageInfo* CarInfo::add_photos() {
  // @@protoc_insertion_point(field_add:ttmall.CarInfo.photos)
  return photos_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ttmall::ImageInfo >*
CarInfo::mutable_photos() {
  // @@protoc_insertion_point(field_mutable_list:ttmall.CarInfo.photos)
  return &photos_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ttmall::ImageInfo >&
CarInfo::photos() const {
  // @@protoc_insertion_point(field_list:ttmall.CarInfo.photos)
  return photos_;
}

// -------------------------------------------------------------------

// AddressInfo

// string id = 1;
inline void AddressInfo::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AddressInfo::id() const {
  // @@protoc_insertion_point(field_get:ttmall.AddressInfo.id)
  return id_.GetNoArena();
}
inline void AddressInfo::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ttmall.AddressInfo.id)
}
#if LANG_CXX11
inline void AddressInfo::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ttmall.AddressInfo.id)
}
#endif
inline void AddressInfo::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ttmall.AddressInfo.id)
}
inline void AddressInfo::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ttmall.AddressInfo.id)
}
inline ::std::string* AddressInfo::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:ttmall.AddressInfo.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AddressInfo::release_id() {
  // @@protoc_insertion_point(field_release:ttmall.AddressInfo.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AddressInfo::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:ttmall.AddressInfo.id)
}

// string name = 2;
inline void AddressInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AddressInfo::name() const {
  // @@protoc_insertion_point(field_get:ttmall.AddressInfo.name)
  return name_.GetNoArena();
}
inline void AddressInfo::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ttmall.AddressInfo.name)
}
#if LANG_CXX11
inline void AddressInfo::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ttmall.AddressInfo.name)
}
#endif
inline void AddressInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ttmall.AddressInfo.name)
}
inline void AddressInfo::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ttmall.AddressInfo.name)
}
inline ::std::string* AddressInfo::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:ttmall.AddressInfo.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AddressInfo::release_name() {
  // @@protoc_insertion_point(field_release:ttmall.AddressInfo.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AddressInfo::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:ttmall.AddressInfo.name)
}

// string province = 3;
inline void AddressInfo::clear_province() {
  province_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AddressInfo::province() const {
  // @@protoc_insertion_point(field_get:ttmall.AddressInfo.province)
  return province_.GetNoArena();
}
inline void AddressInfo::set_province(const ::std::string& value) {
  
  province_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ttmall.AddressInfo.province)
}
#if LANG_CXX11
inline void AddressInfo::set_province(::std::string&& value) {
  
  province_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ttmall.AddressInfo.province)
}
#endif
inline void AddressInfo::set_province(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  province_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ttmall.AddressInfo.province)
}
inline void AddressInfo::set_province(const char* value, size_t size) {
  
  province_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ttmall.AddressInfo.province)
}
inline ::std::string* AddressInfo::mutable_province() {
  
  // @@protoc_insertion_point(field_mutable:ttmall.AddressInfo.province)
  return province_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AddressInfo::release_province() {
  // @@protoc_insertion_point(field_release:ttmall.AddressInfo.province)
  
  return province_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AddressInfo::set_allocated_province(::std::string* province) {
  if (province != NULL) {
    
  } else {
    
  }
  province_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), province);
  // @@protoc_insertion_point(field_set_allocated:ttmall.AddressInfo.province)
}

// string city = 4;
inline void AddressInfo::clear_city() {
  city_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AddressInfo::city() const {
  // @@protoc_insertion_point(field_get:ttmall.AddressInfo.city)
  return city_.GetNoArena();
}
inline void AddressInfo::set_city(const ::std::string& value) {
  
  city_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ttmall.AddressInfo.city)
}
#if LANG_CXX11
inline void AddressInfo::set_city(::std::string&& value) {
  
  city_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ttmall.AddressInfo.city)
}
#endif
inline void AddressInfo::set_city(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  city_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ttmall.AddressInfo.city)
}
inline void AddressInfo::set_city(const char* value, size_t size) {
  
  city_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ttmall.AddressInfo.city)
}
inline ::std::string* AddressInfo::mutable_city() {
  
  // @@protoc_insertion_point(field_mutable:ttmall.AddressInfo.city)
  return city_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AddressInfo::release_city() {
  // @@protoc_insertion_point(field_release:ttmall.AddressInfo.city)
  
  return city_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AddressInfo::set_allocated_city(::std::string* city) {
  if (city != NULL) {
    
  } else {
    
  }
  city_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), city);
  // @@protoc_insertion_point(field_set_allocated:ttmall.AddressInfo.city)
}

// string area = 5;
inline void AddressInfo::clear_area() {
  area_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AddressInfo::area() const {
  // @@protoc_insertion_point(field_get:ttmall.AddressInfo.area)
  return area_.GetNoArena();
}
inline void AddressInfo::set_area(const ::std::string& value) {
  
  area_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ttmall.AddressInfo.area)
}
#if LANG_CXX11
inline void AddressInfo::set_area(::std::string&& value) {
  
  area_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ttmall.AddressInfo.area)
}
#endif
inline void AddressInfo::set_area(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  area_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ttmall.AddressInfo.area)
}
inline void AddressInfo::set_area(const char* value, size_t size) {
  
  area_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ttmall.AddressInfo.area)
}
inline ::std::string* AddressInfo::mutable_area() {
  
  // @@protoc_insertion_point(field_mutable:ttmall.AddressInfo.area)
  return area_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AddressInfo::release_area() {
  // @@protoc_insertion_point(field_release:ttmall.AddressInfo.area)
  
  return area_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AddressInfo::set_allocated_area(::std::string* area) {
  if (area != NULL) {
    
  } else {
    
  }
  area_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), area);
  // @@protoc_insertion_point(field_set_allocated:ttmall.AddressInfo.area)
}

// string addr = 6;
inline void AddressInfo::clear_addr() {
  addr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AddressInfo::addr() const {
  // @@protoc_insertion_point(field_get:ttmall.AddressInfo.addr)
  return addr_.GetNoArena();
}
inline void AddressInfo::set_addr(const ::std::string& value) {
  
  addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ttmall.AddressInfo.addr)
}
#if LANG_CXX11
inline void AddressInfo::set_addr(::std::string&& value) {
  
  addr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ttmall.AddressInfo.addr)
}
#endif
inline void AddressInfo::set_addr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ttmall.AddressInfo.addr)
}
inline void AddressInfo::set_addr(const char* value, size_t size) {
  
  addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ttmall.AddressInfo.addr)
}
inline ::std::string* AddressInfo::mutable_addr() {
  
  // @@protoc_insertion_point(field_mutable:ttmall.AddressInfo.addr)
  return addr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AddressInfo::release_addr() {
  // @@protoc_insertion_point(field_release:ttmall.AddressInfo.addr)
  
  return addr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AddressInfo::set_allocated_addr(::std::string* addr) {
  if (addr != NULL) {
    
  } else {
    
  }
  addr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), addr);
  // @@protoc_insertion_point(field_set_allocated:ttmall.AddressInfo.addr)
}

// string contact = 7;
inline void AddressInfo::clear_contact() {
  contact_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AddressInfo::contact() const {
  // @@protoc_insertion_point(field_get:ttmall.AddressInfo.contact)
  return contact_.GetNoArena();
}
inline void AddressInfo::set_contact(const ::std::string& value) {
  
  contact_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ttmall.AddressInfo.contact)
}
#if LANG_CXX11
inline void AddressInfo::set_contact(::std::string&& value) {
  
  contact_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ttmall.AddressInfo.contact)
}
#endif
inline void AddressInfo::set_contact(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  contact_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ttmall.AddressInfo.contact)
}
inline void AddressInfo::set_contact(const char* value, size_t size) {
  
  contact_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ttmall.AddressInfo.contact)
}
inline ::std::string* AddressInfo::mutable_contact() {
  
  // @@protoc_insertion_point(field_mutable:ttmall.AddressInfo.contact)
  return contact_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AddressInfo::release_contact() {
  // @@protoc_insertion_point(field_release:ttmall.AddressInfo.contact)
  
  return contact_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AddressInfo::set_allocated_contact(::std::string* contact) {
  if (contact != NULL) {
    
  } else {
    
  }
  contact_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), contact);
  // @@protoc_insertion_point(field_set_allocated:ttmall.AddressInfo.contact)
}

// string mobile = 8;
inline void AddressInfo::clear_mobile() {
  mobile_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AddressInfo::mobile() const {
  // @@protoc_insertion_point(field_get:ttmall.AddressInfo.mobile)
  return mobile_.GetNoArena();
}
inline void AddressInfo::set_mobile(const ::std::string& value) {
  
  mobile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ttmall.AddressInfo.mobile)
}
#if LANG_CXX11
inline void AddressInfo::set_mobile(::std::string&& value) {
  
  mobile_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ttmall.AddressInfo.mobile)
}
#endif
inline void AddressInfo::set_mobile(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  mobile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ttmall.AddressInfo.mobile)
}
inline void AddressInfo::set_mobile(const char* value, size_t size) {
  
  mobile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ttmall.AddressInfo.mobile)
}
inline ::std::string* AddressInfo::mutable_mobile() {
  
  // @@protoc_insertion_point(field_mutable:ttmall.AddressInfo.mobile)
  return mobile_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AddressInfo::release_mobile() {
  // @@protoc_insertion_point(field_release:ttmall.AddressInfo.mobile)
  
  return mobile_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AddressInfo::set_allocated_mobile(::std::string* mobile) {
  if (mobile != NULL) {
    
  } else {
    
  }
  mobile_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mobile);
  // @@protoc_insertion_point(field_set_allocated:ttmall.AddressInfo.mobile)
}

// .ttmall.CoordInfo coord = 9;
inline bool AddressInfo::has_coord() const {
  return this != internal_default_instance() && coord_ != NULL;
}
inline void AddressInfo::clear_coord() {
  if (GetArenaNoVirtual() == NULL && coord_ != NULL) delete coord_;
  coord_ = NULL;
}
inline const ::ttmall::CoordInfo& AddressInfo::coord() const {
  // @@protoc_insertion_point(field_get:ttmall.AddressInfo.coord)
  return coord_ != NULL ? *coord_
                         : *::ttmall::CoordInfo::internal_default_instance();
}
inline ::ttmall::CoordInfo* AddressInfo::mutable_coord() {
  
  if (coord_ == NULL) {
    coord_ = new ::ttmall::CoordInfo;
  }
  // @@protoc_insertion_point(field_mutable:ttmall.AddressInfo.coord)
  return coord_;
}
inline ::ttmall::CoordInfo* AddressInfo::release_coord() {
  // @@protoc_insertion_point(field_release:ttmall.AddressInfo.coord)
  
  ::ttmall::CoordInfo* temp = coord_;
  coord_ = NULL;
  return temp;
}
inline void AddressInfo::set_allocated_coord(::ttmall::CoordInfo* coord) {
  delete coord_;
  coord_ = coord;
  if (coord) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ttmall.AddressInfo.coord)
}

// bool default = 10;
inline void AddressInfo::clear_default_() {
  default__ = false;
}
inline bool AddressInfo::default_() const {
  // @@protoc_insertion_point(field_get:ttmall.AddressInfo.default)
  return default__;
}
inline void AddressInfo::set_default_(bool value) {
  
  default__ = value;
  // @@protoc_insertion_point(field_set:ttmall.AddressInfo.default)
}

// repeated string regions = 11;
inline int AddressInfo::regions_size() const {
  return regions_.size();
}
inline void AddressInfo::clear_regions() {
  regions_.Clear();
}
inline const ::std::string& AddressInfo::regions(int index) const {
  // @@protoc_insertion_point(field_get:ttmall.AddressInfo.regions)
  return regions_.Get(index);
}
inline ::std::string* AddressInfo::mutable_regions(int index) {
  // @@protoc_insertion_point(field_mutable:ttmall.AddressInfo.regions)
  return regions_.Mutable(index);
}
inline void AddressInfo::set_regions(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ttmall.AddressInfo.regions)
  regions_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void AddressInfo::set_regions(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ttmall.AddressInfo.regions)
  regions_.Mutable(index)->assign(std::move(value));
}
#endif
inline void AddressInfo::set_regions(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  regions_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ttmall.AddressInfo.regions)
}
inline void AddressInfo::set_regions(int index, const char* value, size_t size) {
  regions_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ttmall.AddressInfo.regions)
}
inline ::std::string* AddressInfo::add_regions() {
  // @@protoc_insertion_point(field_add_mutable:ttmall.AddressInfo.regions)
  return regions_.Add();
}
inline void AddressInfo::add_regions(const ::std::string& value) {
  regions_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ttmall.AddressInfo.regions)
}
#if LANG_CXX11
inline void AddressInfo::add_regions(::std::string&& value) {
  regions_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ttmall.AddressInfo.regions)
}
#endif
inline void AddressInfo::add_regions(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  regions_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ttmall.AddressInfo.regions)
}
inline void AddressInfo::add_regions(const char* value, size_t size) {
  regions_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ttmall.AddressInfo.regions)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
AddressInfo::regions() const {
  // @@protoc_insertion_point(field_list:ttmall.AddressInfo.regions)
  return regions_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
AddressInfo::mutable_regions() {
  // @@protoc_insertion_point(field_mutable_list:ttmall.AddressInfo.regions)
  return &regions_;
}

// bool is_pass = 12;
inline void AddressInfo::clear_is_pass() {
  is_pass_ = false;
}
inline bool AddressInfo::is_pass() const {
  // @@protoc_insertion_point(field_get:ttmall.AddressInfo.is_pass)
  return is_pass_;
}
inline void AddressInfo::set_is_pass(bool value) {
  
  is_pass_ = value;
  // @@protoc_insertion_point(field_set:ttmall.AddressInfo.is_pass)
}

// -------------------------------------------------------------------

// WareInfo

// string id = 1;
inline void WareInfo::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& WareInfo::id() const {
  // @@protoc_insertion_point(field_get:ttmall.WareInfo.id)
  return id_.GetNoArena();
}
inline void WareInfo::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ttmall.WareInfo.id)
}
#if LANG_CXX11
inline void WareInfo::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ttmall.WareInfo.id)
}
#endif
inline void WareInfo::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ttmall.WareInfo.id)
}
inline void WareInfo::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ttmall.WareInfo.id)
}
inline ::std::string* WareInfo::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:ttmall.WareInfo.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* WareInfo::release_id() {
  // @@protoc_insertion_point(field_release:ttmall.WareInfo.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void WareInfo::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:ttmall.WareInfo.id)
}

// string name = 2;
inline void WareInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& WareInfo::name() const {
  // @@protoc_insertion_point(field_get:ttmall.WareInfo.name)
  return name_.GetNoArena();
}
inline void WareInfo::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ttmall.WareInfo.name)
}
#if LANG_CXX11
inline void WareInfo::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ttmall.WareInfo.name)
}
#endif
inline void WareInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ttmall.WareInfo.name)
}
inline void WareInfo::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ttmall.WareInfo.name)
}
inline ::std::string* WareInfo::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:ttmall.WareInfo.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* WareInfo::release_name() {
  // @@protoc_insertion_point(field_release:ttmall.WareInfo.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void WareInfo::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:ttmall.WareInfo.name)
}

// string province = 3;
inline void WareInfo::clear_province() {
  province_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& WareInfo::province() const {
  // @@protoc_insertion_point(field_get:ttmall.WareInfo.province)
  return province_.GetNoArena();
}
inline void WareInfo::set_province(const ::std::string& value) {
  
  province_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ttmall.WareInfo.province)
}
#if LANG_CXX11
inline void WareInfo::set_province(::std::string&& value) {
  
  province_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ttmall.WareInfo.province)
}
#endif
inline void WareInfo::set_province(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  province_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ttmall.WareInfo.province)
}
inline void WareInfo::set_province(const char* value, size_t size) {
  
  province_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ttmall.WareInfo.province)
}
inline ::std::string* WareInfo::mutable_province() {
  
  // @@protoc_insertion_point(field_mutable:ttmall.WareInfo.province)
  return province_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* WareInfo::release_province() {
  // @@protoc_insertion_point(field_release:ttmall.WareInfo.province)
  
  return province_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void WareInfo::set_allocated_province(::std::string* province) {
  if (province != NULL) {
    
  } else {
    
  }
  province_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), province);
  // @@protoc_insertion_point(field_set_allocated:ttmall.WareInfo.province)
}

// string city = 4;
inline void WareInfo::clear_city() {
  city_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& WareInfo::city() const {
  // @@protoc_insertion_point(field_get:ttmall.WareInfo.city)
  return city_.GetNoArena();
}
inline void WareInfo::set_city(const ::std::string& value) {
  
  city_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ttmall.WareInfo.city)
}
#if LANG_CXX11
inline void WareInfo::set_city(::std::string&& value) {
  
  city_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ttmall.WareInfo.city)
}
#endif
inline void WareInfo::set_city(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  city_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ttmall.WareInfo.city)
}
inline void WareInfo::set_city(const char* value, size_t size) {
  
  city_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ttmall.WareInfo.city)
}
inline ::std::string* WareInfo::mutable_city() {
  
  // @@protoc_insertion_point(field_mutable:ttmall.WareInfo.city)
  return city_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* WareInfo::release_city() {
  // @@protoc_insertion_point(field_release:ttmall.WareInfo.city)
  
  return city_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void WareInfo::set_allocated_city(::std::string* city) {
  if (city != NULL) {
    
  } else {
    
  }
  city_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), city);
  // @@protoc_insertion_point(field_set_allocated:ttmall.WareInfo.city)
}

// string area = 5;
inline void WareInfo::clear_area() {
  area_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& WareInfo::area() const {
  // @@protoc_insertion_point(field_get:ttmall.WareInfo.area)
  return area_.GetNoArena();
}
inline void WareInfo::set_area(const ::std::string& value) {
  
  area_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ttmall.WareInfo.area)
}
#if LANG_CXX11
inline void WareInfo::set_area(::std::string&& value) {
  
  area_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ttmall.WareInfo.area)
}
#endif
inline void WareInfo::set_area(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  area_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ttmall.WareInfo.area)
}
inline void WareInfo::set_area(const char* value, size_t size) {
  
  area_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ttmall.WareInfo.area)
}
inline ::std::string* WareInfo::mutable_area() {
  
  // @@protoc_insertion_point(field_mutable:ttmall.WareInfo.area)
  return area_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* WareInfo::release_area() {
  // @@protoc_insertion_point(field_release:ttmall.WareInfo.area)
  
  return area_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void WareInfo::set_allocated_area(::std::string* area) {
  if (area != NULL) {
    
  } else {
    
  }
  area_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), area);
  // @@protoc_insertion_point(field_set_allocated:ttmall.WareInfo.area)
}

// string addr = 6;
inline void WareInfo::clear_addr() {
  addr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& WareInfo::addr() const {
  // @@protoc_insertion_point(field_get:ttmall.WareInfo.addr)
  return addr_.GetNoArena();
}
inline void WareInfo::set_addr(const ::std::string& value) {
  
  addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ttmall.WareInfo.addr)
}
#if LANG_CXX11
inline void WareInfo::set_addr(::std::string&& value) {
  
  addr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ttmall.WareInfo.addr)
}
#endif
inline void WareInfo::set_addr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ttmall.WareInfo.addr)
}
inline void WareInfo::set_addr(const char* value, size_t size) {
  
  addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ttmall.WareInfo.addr)
}
inline ::std::string* WareInfo::mutable_addr() {
  
  // @@protoc_insertion_point(field_mutable:ttmall.WareInfo.addr)
  return addr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* WareInfo::release_addr() {
  // @@protoc_insertion_point(field_release:ttmall.WareInfo.addr)
  
  return addr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void WareInfo::set_allocated_addr(::std::string* addr) {
  if (addr != NULL) {
    
  } else {
    
  }
  addr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), addr);
  // @@protoc_insertion_point(field_set_allocated:ttmall.WareInfo.addr)
}

// string contact = 7;
inline void WareInfo::clear_contact() {
  contact_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& WareInfo::contact() const {
  // @@protoc_insertion_point(field_get:ttmall.WareInfo.contact)
  return contact_.GetNoArena();
}
inline void WareInfo::set_contact(const ::std::string& value) {
  
  contact_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ttmall.WareInfo.contact)
}
#if LANG_CXX11
inline void WareInfo::set_contact(::std::string&& value) {
  
  contact_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ttmall.WareInfo.contact)
}
#endif
inline void WareInfo::set_contact(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  contact_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ttmall.WareInfo.contact)
}
inline void WareInfo::set_contact(const char* value, size_t size) {
  
  contact_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ttmall.WareInfo.contact)
}
inline ::std::string* WareInfo::mutable_contact() {
  
  // @@protoc_insertion_point(field_mutable:ttmall.WareInfo.contact)
  return contact_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* WareInfo::release_contact() {
  // @@protoc_insertion_point(field_release:ttmall.WareInfo.contact)
  
  return contact_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void WareInfo::set_allocated_contact(::std::string* contact) {
  if (contact != NULL) {
    
  } else {
    
  }
  contact_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), contact);
  // @@protoc_insertion_point(field_set_allocated:ttmall.WareInfo.contact)
}

// string mobile = 8;
inline void WareInfo::clear_mobile() {
  mobile_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& WareInfo::mobile() const {
  // @@protoc_insertion_point(field_get:ttmall.WareInfo.mobile)
  return mobile_.GetNoArena();
}
inline void WareInfo::set_mobile(const ::std::string& value) {
  
  mobile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ttmall.WareInfo.mobile)
}
#if LANG_CXX11
inline void WareInfo::set_mobile(::std::string&& value) {
  
  mobile_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ttmall.WareInfo.mobile)
}
#endif
inline void WareInfo::set_mobile(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  mobile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ttmall.WareInfo.mobile)
}
inline void WareInfo::set_mobile(const char* value, size_t size) {
  
  mobile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ttmall.WareInfo.mobile)
}
inline ::std::string* WareInfo::mutable_mobile() {
  
  // @@protoc_insertion_point(field_mutable:ttmall.WareInfo.mobile)
  return mobile_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* WareInfo::release_mobile() {
  // @@protoc_insertion_point(field_release:ttmall.WareInfo.mobile)
  
  return mobile_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void WareInfo::set_allocated_mobile(::std::string* mobile) {
  if (mobile != NULL) {
    
  } else {
    
  }
  mobile_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mobile);
  // @@protoc_insertion_point(field_set_allocated:ttmall.WareInfo.mobile)
}

// .ttmall.CoordInfo coord = 9;
inline bool WareInfo::has_coord() const {
  return this != internal_default_instance() && coord_ != NULL;
}
inline void WareInfo::clear_coord() {
  if (GetArenaNoVirtual() == NULL && coord_ != NULL) delete coord_;
  coord_ = NULL;
}
inline const ::ttmall::CoordInfo& WareInfo::coord() const {
  // @@protoc_insertion_point(field_get:ttmall.WareInfo.coord)
  return coord_ != NULL ? *coord_
                         : *::ttmall::CoordInfo::internal_default_instance();
}
inline ::ttmall::CoordInfo* WareInfo::mutable_coord() {
  
  if (coord_ == NULL) {
    coord_ = new ::ttmall::CoordInfo;
  }
  // @@protoc_insertion_point(field_mutable:ttmall.WareInfo.coord)
  return coord_;
}
inline ::ttmall::CoordInfo* WareInfo::release_coord() {
  // @@protoc_insertion_point(field_release:ttmall.WareInfo.coord)
  
  ::ttmall::CoordInfo* temp = coord_;
  coord_ = NULL;
  return temp;
}
inline void WareInfo::set_allocated_coord(::ttmall::CoordInfo* coord) {
  delete coord_;
  coord_ = coord;
  if (coord) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ttmall.WareInfo.coord)
}

// -------------------------------------------------------------------

// UserType

// string id = 1;
inline void UserType::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserType::id() const {
  // @@protoc_insertion_point(field_get:ttmall.UserType.id)
  return id_.GetNoArena();
}
inline void UserType::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ttmall.UserType.id)
}
#if LANG_CXX11
inline void UserType::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ttmall.UserType.id)
}
#endif
inline void UserType::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ttmall.UserType.id)
}
inline void UserType::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ttmall.UserType.id)
}
inline ::std::string* UserType::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:ttmall.UserType.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserType::release_id() {
  // @@protoc_insertion_point(field_release:ttmall.UserType.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserType::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:ttmall.UserType.id)
}

// string code = 2;
inline void UserType::clear_code() {
  code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserType::code() const {
  // @@protoc_insertion_point(field_get:ttmall.UserType.code)
  return code_.GetNoArena();
}
inline void UserType::set_code(const ::std::string& value) {
  
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ttmall.UserType.code)
}
#if LANG_CXX11
inline void UserType::set_code(::std::string&& value) {
  
  code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ttmall.UserType.code)
}
#endif
inline void UserType::set_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ttmall.UserType.code)
}
inline void UserType::set_code(const char* value, size_t size) {
  
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ttmall.UserType.code)
}
inline ::std::string* UserType::mutable_code() {
  
  // @@protoc_insertion_point(field_mutable:ttmall.UserType.code)
  return code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserType::release_code() {
  // @@protoc_insertion_point(field_release:ttmall.UserType.code)
  
  return code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserType::set_allocated_code(::std::string* code) {
  if (code != NULL) {
    
  } else {
    
  }
  code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), code);
  // @@protoc_insertion_point(field_set_allocated:ttmall.UserType.code)
}

// string name = 3;
inline void UserType::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserType::name() const {
  // @@protoc_insertion_point(field_get:ttmall.UserType.name)
  return name_.GetNoArena();
}
inline void UserType::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ttmall.UserType.name)
}
#if LANG_CXX11
inline void UserType::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ttmall.UserType.name)
}
#endif
inline void UserType::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ttmall.UserType.name)
}
inline void UserType::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ttmall.UserType.name)
}
inline ::std::string* UserType::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:ttmall.UserType.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserType::release_name() {
  // @@protoc_insertion_point(field_release:ttmall.UserType.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserType::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:ttmall.UserType.name)
}

// string parent = 4;
inline void UserType::clear_parent() {
  parent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserType::parent() const {
  // @@protoc_insertion_point(field_get:ttmall.UserType.parent)
  return parent_.GetNoArena();
}
inline void UserType::set_parent(const ::std::string& value) {
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ttmall.UserType.parent)
}
#if LANG_CXX11
inline void UserType::set_parent(::std::string&& value) {
  
  parent_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ttmall.UserType.parent)
}
#endif
inline void UserType::set_parent(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ttmall.UserType.parent)
}
inline void UserType::set_parent(const char* value, size_t size) {
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ttmall.UserType.parent)
}
inline ::std::string* UserType::mutable_parent() {
  
  // @@protoc_insertion_point(field_mutable:ttmall.UserType.parent)
  return parent_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserType::release_parent() {
  // @@protoc_insertion_point(field_release:ttmall.UserType.parent)
  
  return parent_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserType::set_allocated_parent(::std::string* parent) {
  if (parent != NULL) {
    
  } else {
    
  }
  parent_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), parent);
  // @@protoc_insertion_point(field_set_allocated:ttmall.UserType.parent)
}

// -------------------------------------------------------------------

// UserInfo

// string id = 1;
inline void UserInfo::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserInfo::id() const {
  // @@protoc_insertion_point(field_get:ttmall.UserInfo.id)
  return id_.GetNoArena();
}
inline void UserInfo::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ttmall.UserInfo.id)
}
#if LANG_CXX11
inline void UserInfo::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ttmall.UserInfo.id)
}
#endif
inline void UserInfo::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ttmall.UserInfo.id)
}
inline void UserInfo::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ttmall.UserInfo.id)
}
inline ::std::string* UserInfo::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:ttmall.UserInfo.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserInfo::release_id() {
  // @@protoc_insertion_point(field_release:ttmall.UserInfo.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserInfo::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:ttmall.UserInfo.id)
}

// string name = 2;
inline void UserInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserInfo::name() const {
  // @@protoc_insertion_point(field_get:ttmall.UserInfo.name)
  return name_.GetNoArena();
}
inline void UserInfo::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ttmall.UserInfo.name)
}
#if LANG_CXX11
inline void UserInfo::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ttmall.UserInfo.name)
}
#endif
inline void UserInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ttmall.UserInfo.name)
}
inline void UserInfo::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ttmall.UserInfo.name)
}
inline ::std::string* UserInfo::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:ttmall.UserInfo.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserInfo::release_name() {
  // @@protoc_insertion_point(field_release:ttmall.UserInfo.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserInfo::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:ttmall.UserInfo.name)
}

// .ttmall.ImageInfo avatar = 3;
inline bool UserInfo::has_avatar() const {
  return this != internal_default_instance() && avatar_ != NULL;
}
inline void UserInfo::clear_avatar() {
  if (GetArenaNoVirtual() == NULL && avatar_ != NULL) delete avatar_;
  avatar_ = NULL;
}
inline const ::ttmall::ImageInfo& UserInfo::avatar() const {
  // @@protoc_insertion_point(field_get:ttmall.UserInfo.avatar)
  return avatar_ != NULL ? *avatar_
                         : *::ttmall::ImageInfo::internal_default_instance();
}
inline ::ttmall::ImageInfo* UserInfo::mutable_avatar() {
  
  if (avatar_ == NULL) {
    avatar_ = new ::ttmall::ImageInfo;
  }
  // @@protoc_insertion_point(field_mutable:ttmall.UserInfo.avatar)
  return avatar_;
}
inline ::ttmall::ImageInfo* UserInfo::release_avatar() {
  // @@protoc_insertion_point(field_release:ttmall.UserInfo.avatar)
  
  ::ttmall::ImageInfo* temp = avatar_;
  avatar_ = NULL;
  return temp;
}
inline void UserInfo::set_allocated_avatar(::ttmall::ImageInfo* avatar) {
  delete avatar_;
  avatar_ = avatar;
  if (avatar) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ttmall.UserInfo.avatar)
}

// string owner = 4;
inline void UserInfo::clear_owner() {
  owner_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserInfo::owner() const {
  // @@protoc_insertion_point(field_get:ttmall.UserInfo.owner)
  return owner_.GetNoArena();
}
inline void UserInfo::set_owner(const ::std::string& value) {
  
  owner_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ttmall.UserInfo.owner)
}
#if LANG_CXX11
inline void UserInfo::set_owner(::std::string&& value) {
  
  owner_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ttmall.UserInfo.owner)
}
#endif
inline void UserInfo::set_owner(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  owner_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ttmall.UserInfo.owner)
}
inline void UserInfo::set_owner(const char* value, size_t size) {
  
  owner_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ttmall.UserInfo.owner)
}
inline ::std::string* UserInfo::mutable_owner() {
  
  // @@protoc_insertion_point(field_mutable:ttmall.UserInfo.owner)
  return owner_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserInfo::release_owner() {
  // @@protoc_insertion_point(field_release:ttmall.UserInfo.owner)
  
  return owner_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserInfo::set_allocated_owner(::std::string* owner) {
  if (owner != NULL) {
    
  } else {
    
  }
  owner_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), owner);
  // @@protoc_insertion_point(field_set_allocated:ttmall.UserInfo.owner)
}

// string type = 5;
inline void UserInfo::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserInfo::type() const {
  // @@protoc_insertion_point(field_get:ttmall.UserInfo.type)
  return type_.GetNoArena();
}
inline void UserInfo::set_type(const ::std::string& value) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ttmall.UserInfo.type)
}
#if LANG_CXX11
inline void UserInfo::set_type(::std::string&& value) {
  
  type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ttmall.UserInfo.type)
}
#endif
inline void UserInfo::set_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ttmall.UserInfo.type)
}
inline void UserInfo::set_type(const char* value, size_t size) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ttmall.UserInfo.type)
}
inline ::std::string* UserInfo::mutable_type() {
  
  // @@protoc_insertion_point(field_mutable:ttmall.UserInfo.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserInfo::release_type() {
  // @@protoc_insertion_point(field_release:ttmall.UserInfo.type)
  
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserInfo::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    
  } else {
    
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:ttmall.UserInfo.type)
}

// repeated .ttmall.ImageInfo images = 6;
inline int UserInfo::images_size() const {
  return images_.size();
}
inline void UserInfo::clear_images() {
  images_.Clear();
}
inline const ::ttmall::ImageInfo& UserInfo::images(int index) const {
  // @@protoc_insertion_point(field_get:ttmall.UserInfo.images)
  return images_.Get(index);
}
inline ::ttmall::ImageInfo* UserInfo::mutable_images(int index) {
  // @@protoc_insertion_point(field_mutable:ttmall.UserInfo.images)
  return images_.Mutable(index);
}
inline ::ttmall::ImageInfo* UserInfo::add_images() {
  // @@protoc_insertion_point(field_add:ttmall.UserInfo.images)
  return images_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ttmall::ImageInfo >*
UserInfo::mutable_images() {
  // @@protoc_insertion_point(field_mutable_list:ttmall.UserInfo.images)
  return &images_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ttmall::ImageInfo >&
UserInfo::images() const {
  // @@protoc_insertion_point(field_list:ttmall.UserInfo.images)
  return images_;
}

// string mobile = 7;
inline void UserInfo::clear_mobile() {
  mobile_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserInfo::mobile() const {
  // @@protoc_insertion_point(field_get:ttmall.UserInfo.mobile)
  return mobile_.GetNoArena();
}
inline void UserInfo::set_mobile(const ::std::string& value) {
  
  mobile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ttmall.UserInfo.mobile)
}
#if LANG_CXX11
inline void UserInfo::set_mobile(::std::string&& value) {
  
  mobile_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ttmall.UserInfo.mobile)
}
#endif
inline void UserInfo::set_mobile(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  mobile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ttmall.UserInfo.mobile)
}
inline void UserInfo::set_mobile(const char* value, size_t size) {
  
  mobile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ttmall.UserInfo.mobile)
}
inline ::std::string* UserInfo::mutable_mobile() {
  
  // @@protoc_insertion_point(field_mutable:ttmall.UserInfo.mobile)
  return mobile_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserInfo::release_mobile() {
  // @@protoc_insertion_point(field_release:ttmall.UserInfo.mobile)
  
  return mobile_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserInfo::set_allocated_mobile(::std::string* mobile) {
  if (mobile != NULL) {
    
  } else {
    
  }
  mobile_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mobile);
  // @@protoc_insertion_point(field_set_allocated:ttmall.UserInfo.mobile)
}

// int64 login_time = 8;
inline void UserInfo::clear_login_time() {
  login_time_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 UserInfo::login_time() const {
  // @@protoc_insertion_point(field_get:ttmall.UserInfo.login_time)
  return login_time_;
}
inline void UserInfo::set_login_time(::google::protobuf::int64 value) {
  
  login_time_ = value;
  // @@protoc_insertion_point(field_set:ttmall.UserInfo.login_time)
}

// int64 reg_time = 9;
inline void UserInfo::clear_reg_time() {
  reg_time_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 UserInfo::reg_time() const {
  // @@protoc_insertion_point(field_get:ttmall.UserInfo.reg_time)
  return reg_time_;
}
inline void UserInfo::set_reg_time(::google::protobuf::int64 value) {
  
  reg_time_ = value;
  // @@protoc_insertion_point(field_set:ttmall.UserInfo.reg_time)
}

// int32 balance = 10;
inline void UserInfo::clear_balance() {
  balance_ = 0;
}
inline ::google::protobuf::int32 UserInfo::balance() const {
  // @@protoc_insertion_point(field_get:ttmall.UserInfo.balance)
  return balance_;
}
inline void UserInfo::set_balance(::google::protobuf::int32 value) {
  
  balance_ = value;
  // @@protoc_insertion_point(field_set:ttmall.UserInfo.balance)
}

// int32 coupon_num = 11;
inline void UserInfo::clear_coupon_num() {
  coupon_num_ = 0;
}
inline ::google::protobuf::int32 UserInfo::coupon_num() const {
  // @@protoc_insertion_point(field_get:ttmall.UserInfo.coupon_num)
  return coupon_num_;
}
inline void UserInfo::set_coupon_num(::google::protobuf::int32 value) {
  
  coupon_num_ = value;
  // @@protoc_insertion_point(field_set:ttmall.UserInfo.coupon_num)
}

// bool is_pass = 12;
inline void UserInfo::clear_is_pass() {
  is_pass_ = false;
}
inline bool UserInfo::is_pass() const {
  // @@protoc_insertion_point(field_get:ttmall.UserInfo.is_pass)
  return is_pass_;
}
inline void UserInfo::set_is_pass(bool value) {
  
  is_pass_ = value;
  // @@protoc_insertion_point(field_set:ttmall.UserInfo.is_pass)
}

// .ttmall.AddressInfo address = 13;
inline bool UserInfo::has_address() const {
  return this != internal_default_instance() && address_ != NULL;
}
inline void UserInfo::clear_address() {
  if (GetArenaNoVirtual() == NULL && address_ != NULL) delete address_;
  address_ = NULL;
}
inline const ::ttmall::AddressInfo& UserInfo::address() const {
  // @@protoc_insertion_point(field_get:ttmall.UserInfo.address)
  return address_ != NULL ? *address_
                         : *::ttmall::AddressInfo::internal_default_instance();
}
inline ::ttmall::AddressInfo* UserInfo::mutable_address() {
  
  if (address_ == NULL) {
    address_ = new ::ttmall::AddressInfo;
  }
  // @@protoc_insertion_point(field_mutable:ttmall.UserInfo.address)
  return address_;
}
inline ::ttmall::AddressInfo* UserInfo::release_address() {
  // @@protoc_insertion_point(field_release:ttmall.UserInfo.address)
  
  ::ttmall::AddressInfo* temp = address_;
  address_ = NULL;
  return temp;
}
inline void UserInfo::set_allocated_address(::ttmall::AddressInfo* address) {
  delete address_;
  address_ = address;
  if (address) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ttmall.UserInfo.address)
}

// int32 level = 14;
inline void UserInfo::clear_level() {
  level_ = 0;
}
inline ::google::protobuf::int32 UserInfo::level() const {
  // @@protoc_insertion_point(field_get:ttmall.UserInfo.level)
  return level_;
}
inline void UserInfo::set_level(::google::protobuf::int32 value) {
  
  level_ = value;
  // @@protoc_insertion_point(field_set:ttmall.UserInfo.level)
}

// repeated string types = 15;
inline int UserInfo::types_size() const {
  return types_.size();
}
inline void UserInfo::clear_types() {
  types_.Clear();
}
inline const ::std::string& UserInfo::types(int index) const {
  // @@protoc_insertion_point(field_get:ttmall.UserInfo.types)
  return types_.Get(index);
}
inline ::std::string* UserInfo::mutable_types(int index) {
  // @@protoc_insertion_point(field_mutable:ttmall.UserInfo.types)
  return types_.Mutable(index);
}
inline void UserInfo::set_types(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ttmall.UserInfo.types)
  types_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void UserInfo::set_types(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ttmall.UserInfo.types)
  types_.Mutable(index)->assign(std::move(value));
}
#endif
inline void UserInfo::set_types(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  types_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ttmall.UserInfo.types)
}
inline void UserInfo::set_types(int index, const char* value, size_t size) {
  types_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ttmall.UserInfo.types)
}
inline ::std::string* UserInfo::add_types() {
  // @@protoc_insertion_point(field_add_mutable:ttmall.UserInfo.types)
  return types_.Add();
}
inline void UserInfo::add_types(const ::std::string& value) {
  types_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ttmall.UserInfo.types)
}
#if LANG_CXX11
inline void UserInfo::add_types(::std::string&& value) {
  types_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ttmall.UserInfo.types)
}
#endif
inline void UserInfo::add_types(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  types_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ttmall.UserInfo.types)
}
inline void UserInfo::add_types(const char* value, size_t size) {
  types_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ttmall.UserInfo.types)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
UserInfo::types() const {
  // @@protoc_insertion_point(field_list:ttmall.UserInfo.types)
  return types_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
UserInfo::mutable_types() {
  // @@protoc_insertion_point(field_mutable_list:ttmall.UserInfo.types)
  return &types_;
}

// bool disabled = 16;
inline void UserInfo::clear_disabled() {
  disabled_ = false;
}
inline bool UserInfo::disabled() const {
  // @@protoc_insertion_point(field_get:ttmall.UserInfo.disabled)
  return disabled_;
}
inline void UserInfo::set_disabled(bool value) {
  
  disabled_ = value;
  // @@protoc_insertion_point(field_set:ttmall.UserInfo.disabled)
}

// string deliver_time = 17;
inline void UserInfo::clear_deliver_time() {
  deliver_time_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserInfo::deliver_time() const {
  // @@protoc_insertion_point(field_get:ttmall.UserInfo.deliver_time)
  return deliver_time_.GetNoArena();
}
inline void UserInfo::set_deliver_time(const ::std::string& value) {
  
  deliver_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ttmall.UserInfo.deliver_time)
}
#if LANG_CXX11
inline void UserInfo::set_deliver_time(::std::string&& value) {
  
  deliver_time_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ttmall.UserInfo.deliver_time)
}
#endif
inline void UserInfo::set_deliver_time(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  deliver_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ttmall.UserInfo.deliver_time)
}
inline void UserInfo::set_deliver_time(const char* value, size_t size) {
  
  deliver_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ttmall.UserInfo.deliver_time)
}
inline ::std::string* UserInfo::mutable_deliver_time() {
  
  // @@protoc_insertion_point(field_mutable:ttmall.UserInfo.deliver_time)
  return deliver_time_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserInfo::release_deliver_time() {
  // @@protoc_insertion_point(field_release:ttmall.UserInfo.deliver_time)
  
  return deliver_time_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserInfo::set_allocated_deliver_time(::std::string* deliver_time) {
  if (deliver_time != NULL) {
    
  } else {
    
  }
  deliver_time_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), deliver_time);
  // @@protoc_insertion_point(field_set_allocated:ttmall.UserInfo.deliver_time)
}

// string mark = 18;
inline void UserInfo::clear_mark() {
  mark_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserInfo::mark() const {
  // @@protoc_insertion_point(field_get:ttmall.UserInfo.mark)
  return mark_.GetNoArena();
}
inline void UserInfo::set_mark(const ::std::string& value) {
  
  mark_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ttmall.UserInfo.mark)
}
#if LANG_CXX11
inline void UserInfo::set_mark(::std::string&& value) {
  
  mark_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ttmall.UserInfo.mark)
}
#endif
inline void UserInfo::set_mark(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  mark_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ttmall.UserInfo.mark)
}
inline void UserInfo::set_mark(const char* value, size_t size) {
  
  mark_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ttmall.UserInfo.mark)
}
inline ::std::string* UserInfo::mutable_mark() {
  
  // @@protoc_insertion_point(field_mutable:ttmall.UserInfo.mark)
  return mark_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserInfo::release_mark() {
  // @@protoc_insertion_point(field_release:ttmall.UserInfo.mark)
  
  return mark_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserInfo::set_allocated_mark(::std::string* mark) {
  if (mark != NULL) {
    
  } else {
    
  }
  mark_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mark);
  // @@protoc_insertion_point(field_set_allocated:ttmall.UserInfo.mark)
}

// -------------------------------------------------------------------

// IndexReq

// string token = 1;
inline void IndexReq::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& IndexReq::token() const {
  // @@protoc_insertion_point(field_get:ttmall.IndexReq.token)
  return token_.GetNoArena();
}
inline void IndexReq::set_token(const ::std::string& value) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ttmall.IndexReq.token)
}
#if LANG_CXX11
inline void IndexReq::set_token(::std::string&& value) {
  
  token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ttmall.IndexReq.token)
}
#endif
inline void IndexReq::set_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ttmall.IndexReq.token)
}
inline void IndexReq::set_token(const char* value, size_t size) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ttmall.IndexReq.token)
}
inline ::std::string* IndexReq::mutable_token() {
  
  // @@protoc_insertion_point(field_mutable:ttmall.IndexReq.token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IndexReq::release_token() {
  // @@protoc_insertion_point(field_release:ttmall.IndexReq.token)
  
  return token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IndexReq::set_allocated_token(::std::string* token) {
  if (token != NULL) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:ttmall.IndexReq.token)
}

// -------------------------------------------------------------------

// IndexType

// string id = 1;
inline void IndexType::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& IndexType::id() const {
  // @@protoc_insertion_point(field_get:ttmall.IndexType.id)
  return id_.GetNoArena();
}
inline void IndexType::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ttmall.IndexType.id)
}
#if LANG_CXX11
inline void IndexType::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ttmall.IndexType.id)
}
#endif
inline void IndexType::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ttmall.IndexType.id)
}
inline void IndexType::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ttmall.IndexType.id)
}
inline ::std::string* IndexType::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:ttmall.IndexType.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IndexType::release_id() {
  // @@protoc_insertion_point(field_release:ttmall.IndexType.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IndexType::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:ttmall.IndexType.id)
}

// string name = 2;
inline void IndexType::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& IndexType::name() const {
  // @@protoc_insertion_point(field_get:ttmall.IndexType.name)
  return name_.GetNoArena();
}
inline void IndexType::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ttmall.IndexType.name)
}
#if LANG_CXX11
inline void IndexType::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ttmall.IndexType.name)
}
#endif
inline void IndexType::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ttmall.IndexType.name)
}
inline void IndexType::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ttmall.IndexType.name)
}
inline ::std::string* IndexType::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:ttmall.IndexType.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IndexType::release_name() {
  // @@protoc_insertion_point(field_release:ttmall.IndexType.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IndexType::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:ttmall.IndexType.name)
}

// .ttmall.ImageInfo icon_m = 3;
inline bool IndexType::has_icon_m() const {
  return this != internal_default_instance() && icon_m_ != NULL;
}
inline void IndexType::clear_icon_m() {
  if (GetArenaNoVirtual() == NULL && icon_m_ != NULL) delete icon_m_;
  icon_m_ = NULL;
}
inline const ::ttmall::ImageInfo& IndexType::icon_m() const {
  // @@protoc_insertion_point(field_get:ttmall.IndexType.icon_m)
  return icon_m_ != NULL ? *icon_m_
                         : *::ttmall::ImageInfo::internal_default_instance();
}
inline ::ttmall::ImageInfo* IndexType::mutable_icon_m() {
  
  if (icon_m_ == NULL) {
    icon_m_ = new ::ttmall::ImageInfo;
  }
  // @@protoc_insertion_point(field_mutable:ttmall.IndexType.icon_m)
  return icon_m_;
}
inline ::ttmall::ImageInfo* IndexType::release_icon_m() {
  // @@protoc_insertion_point(field_release:ttmall.IndexType.icon_m)
  
  ::ttmall::ImageInfo* temp = icon_m_;
  icon_m_ = NULL;
  return temp;
}
inline void IndexType::set_allocated_icon_m(::ttmall::ImageInfo* icon_m) {
  delete icon_m_;
  icon_m_ = icon_m;
  if (icon_m) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ttmall.IndexType.icon_m)
}

// .ttmall.ImageInfo icon_s = 4;
inline bool IndexType::has_icon_s() const {
  return this != internal_default_instance() && icon_s_ != NULL;
}
inline void IndexType::clear_icon_s() {
  if (GetArenaNoVirtual() == NULL && icon_s_ != NULL) delete icon_s_;
  icon_s_ = NULL;
}
inline const ::ttmall::ImageInfo& IndexType::icon_s() const {
  // @@protoc_insertion_point(field_get:ttmall.IndexType.icon_s)
  return icon_s_ != NULL ? *icon_s_
                         : *::ttmall::ImageInfo::internal_default_instance();
}
inline ::ttmall::ImageInfo* IndexType::mutable_icon_s() {
  
  if (icon_s_ == NULL) {
    icon_s_ = new ::ttmall::ImageInfo;
  }
  // @@protoc_insertion_point(field_mutable:ttmall.IndexType.icon_s)
  return icon_s_;
}
inline ::ttmall::ImageInfo* IndexType::release_icon_s() {
  // @@protoc_insertion_point(field_release:ttmall.IndexType.icon_s)
  
  ::ttmall::ImageInfo* temp = icon_s_;
  icon_s_ = NULL;
  return temp;
}
inline void IndexType::set_allocated_icon_s(::ttmall::ImageInfo* icon_s) {
  delete icon_s_;
  icon_s_ = icon_s;
  if (icon_s) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ttmall.IndexType.icon_s)
}

// -------------------------------------------------------------------

// IndexAd

// string id = 1;
inline void IndexAd::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& IndexAd::id() const {
  // @@protoc_insertion_point(field_get:ttmall.IndexAd.id)
  return id_.GetNoArena();
}
inline void IndexAd::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ttmall.IndexAd.id)
}
#if LANG_CXX11
inline void IndexAd::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ttmall.IndexAd.id)
}
#endif
inline void IndexAd::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ttmall.IndexAd.id)
}
inline void IndexAd::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ttmall.IndexAd.id)
}
inline ::std::string* IndexAd::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:ttmall.IndexAd.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IndexAd::release_id() {
  // @@protoc_insertion_point(field_release:ttmall.IndexAd.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IndexAd::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:ttmall.IndexAd.id)
}

// string title = 2;
inline void IndexAd::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& IndexAd::title() const {
  // @@protoc_insertion_point(field_get:ttmall.IndexAd.title)
  return title_.GetNoArena();
}
inline void IndexAd::set_title(const ::std::string& value) {
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ttmall.IndexAd.title)
}
#if LANG_CXX11
inline void IndexAd::set_title(::std::string&& value) {
  
  title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ttmall.IndexAd.title)
}
#endif
inline void IndexAd::set_title(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ttmall.IndexAd.title)
}
inline void IndexAd::set_title(const char* value, size_t size) {
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ttmall.IndexAd.title)
}
inline ::std::string* IndexAd::mutable_title() {
  
  // @@protoc_insertion_point(field_mutable:ttmall.IndexAd.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IndexAd::release_title() {
  // @@protoc_insertion_point(field_release:ttmall.IndexAd.title)
  
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IndexAd::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    
  } else {
    
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:ttmall.IndexAd.title)
}

// .ttmall.ImageInfo image = 3;
inline bool IndexAd::has_image() const {
  return this != internal_default_instance() && image_ != NULL;
}
inline void IndexAd::clear_image() {
  if (GetArenaNoVirtual() == NULL && image_ != NULL) delete image_;
  image_ = NULL;
}
inline const ::ttmall::ImageInfo& IndexAd::image() const {
  // @@protoc_insertion_point(field_get:ttmall.IndexAd.image)
  return image_ != NULL ? *image_
                         : *::ttmall::ImageInfo::internal_default_instance();
}
inline ::ttmall::ImageInfo* IndexAd::mutable_image() {
  
  if (image_ == NULL) {
    image_ = new ::ttmall::ImageInfo;
  }
  // @@protoc_insertion_point(field_mutable:ttmall.IndexAd.image)
  return image_;
}
inline ::ttmall::ImageInfo* IndexAd::release_image() {
  // @@protoc_insertion_point(field_release:ttmall.IndexAd.image)
  
  ::ttmall::ImageInfo* temp = image_;
  image_ = NULL;
  return temp;
}
inline void IndexAd::set_allocated_image(::ttmall::ImageInfo* image) {
  delete image_;
  image_ = image;
  if (image) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ttmall.IndexAd.image)
}

// -------------------------------------------------------------------

// IndexAdGroup

// .ttmall.AdPosition type = 1;
inline void IndexAdGroup::clear_type() {
  type_ = 0;
}
inline ::ttmall::AdPosition IndexAdGroup::type() const {
  // @@protoc_insertion_point(field_get:ttmall.IndexAdGroup.type)
  return static_cast< ::ttmall::AdPosition >(type_);
}
inline void IndexAdGroup::set_type(::ttmall::AdPosition value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:ttmall.IndexAdGroup.type)
}

// string name = 2;
inline void IndexAdGroup::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& IndexAdGroup::name() const {
  // @@protoc_insertion_point(field_get:ttmall.IndexAdGroup.name)
  return name_.GetNoArena();
}
inline void IndexAdGroup::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ttmall.IndexAdGroup.name)
}
#if LANG_CXX11
inline void IndexAdGroup::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ttmall.IndexAdGroup.name)
}
#endif
inline void IndexAdGroup::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ttmall.IndexAdGroup.name)
}
inline void IndexAdGroup::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ttmall.IndexAdGroup.name)
}
inline ::std::string* IndexAdGroup::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:ttmall.IndexAdGroup.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IndexAdGroup::release_name() {
  // @@protoc_insertion_point(field_release:ttmall.IndexAdGroup.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IndexAdGroup::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:ttmall.IndexAdGroup.name)
}

// string desc = 3;
inline void IndexAdGroup::clear_desc() {
  desc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& IndexAdGroup::desc() const {
  // @@protoc_insertion_point(field_get:ttmall.IndexAdGroup.desc)
  return desc_.GetNoArena();
}
inline void IndexAdGroup::set_desc(const ::std::string& value) {
  
  desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ttmall.IndexAdGroup.desc)
}
#if LANG_CXX11
inline void IndexAdGroup::set_desc(::std::string&& value) {
  
  desc_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ttmall.IndexAdGroup.desc)
}
#endif
inline void IndexAdGroup::set_desc(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ttmall.IndexAdGroup.desc)
}
inline void IndexAdGroup::set_desc(const char* value, size_t size) {
  
  desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ttmall.IndexAdGroup.desc)
}
inline ::std::string* IndexAdGroup::mutable_desc() {
  
  // @@protoc_insertion_point(field_mutable:ttmall.IndexAdGroup.desc)
  return desc_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IndexAdGroup::release_desc() {
  // @@protoc_insertion_point(field_release:ttmall.IndexAdGroup.desc)
  
  return desc_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IndexAdGroup::set_allocated_desc(::std::string* desc) {
  if (desc != NULL) {
    
  } else {
    
  }
  desc_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), desc);
  // @@protoc_insertion_point(field_set_allocated:ttmall.IndexAdGroup.desc)
}

// repeated .ttmall.IndexAd ads = 4;
inline int IndexAdGroup::ads_size() const {
  return ads_.size();
}
inline void IndexAdGroup::clear_ads() {
  ads_.Clear();
}
inline const ::ttmall::IndexAd& IndexAdGroup::ads(int index) const {
  // @@protoc_insertion_point(field_get:ttmall.IndexAdGroup.ads)
  return ads_.Get(index);
}
inline ::ttmall::IndexAd* IndexAdGroup::mutable_ads(int index) {
  // @@protoc_insertion_point(field_mutable:ttmall.IndexAdGroup.ads)
  return ads_.Mutable(index);
}
inline ::ttmall::IndexAd* IndexAdGroup::add_ads() {
  // @@protoc_insertion_point(field_add:ttmall.IndexAdGroup.ads)
  return ads_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ttmall::IndexAd >*
IndexAdGroup::mutable_ads() {
  // @@protoc_insertion_point(field_mutable_list:ttmall.IndexAdGroup.ads)
  return &ads_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ttmall::IndexAd >&
IndexAdGroup::ads() const {
  // @@protoc_insertion_point(field_list:ttmall.IndexAdGroup.ads)
  return ads_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// IndexRep

// repeated .ttmall.IndexType types = 1;
inline int IndexRep::types_size() const {
  return types_.size();
}
inline void IndexRep::clear_types() {
  types_.Clear();
}
inline const ::ttmall::IndexType& IndexRep::types(int index) const {
  // @@protoc_insertion_point(field_get:ttmall.IndexRep.types)
  return types_.Get(index);
}
inline ::ttmall::IndexType* IndexRep::mutable_types(int index) {
  // @@protoc_insertion_point(field_mutable:ttmall.IndexRep.types)
  return types_.Mutable(index);
}
inline ::ttmall::IndexType* IndexRep::add_types() {
  // @@protoc_insertion_point(field_add:ttmall.IndexRep.types)
  return types_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ttmall::IndexType >*
IndexRep::mutable_types() {
  // @@protoc_insertion_point(field_mutable_list:ttmall.IndexRep.types)
  return &types_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ttmall::IndexType >&
IndexRep::types() const {
  // @@protoc_insertion_point(field_list:ttmall.IndexRep.types)
  return types_;
}

// map<int32, .ttmall.IndexAdGroup> groups = 2;
inline int IndexRep::groups_size() const {
  return groups_.size();
}
inline void IndexRep::clear_groups() {
  groups_.Clear();
}
inline const ::google::protobuf::Map< ::google::protobuf::int32, ::ttmall::IndexAdGroup >&
IndexRep::groups() const {
  // @@protoc_insertion_point(field_map:ttmall.IndexRep.groups)
  return groups_.GetMap();
}
inline ::google::protobuf::Map< ::google::protobuf::int32, ::ttmall::IndexAdGroup >*
IndexRep::mutable_groups() {
  // @@protoc_insertion_point(field_mutable_map:ttmall.IndexRep.groups)
  return groups_.MutableMap();
}

// string md5 = 3;
inline void IndexRep::clear_md5() {
  md5_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& IndexRep::md5() const {
  // @@protoc_insertion_point(field_get:ttmall.IndexRep.md5)
  return md5_.GetNoArena();
}
inline void IndexRep::set_md5(const ::std::string& value) {
  
  md5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ttmall.IndexRep.md5)
}
#if LANG_CXX11
inline void IndexRep::set_md5(::std::string&& value) {
  
  md5_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ttmall.IndexRep.md5)
}
#endif
inline void IndexRep::set_md5(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  md5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ttmall.IndexRep.md5)
}
inline void IndexRep::set_md5(const char* value, size_t size) {
  
  md5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ttmall.IndexRep.md5)
}
inline ::std::string* IndexRep::mutable_md5() {
  
  // @@protoc_insertion_point(field_mutable:ttmall.IndexRep.md5)
  return md5_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IndexRep::release_md5() {
  // @@protoc_insertion_point(field_release:ttmall.IndexRep.md5)
  
  return md5_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IndexRep::set_allocated_md5(::std::string* md5) {
  if (md5 != NULL) {
    
  } else {
    
  }
  md5_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), md5);
  // @@protoc_insertion_point(field_set_allocated:ttmall.IndexRep.md5)
}

// -------------------------------------------------------------------

// ListRegionsReq

// string token = 1;
inline void ListRegionsReq::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ListRegionsReq::token() const {
  // @@protoc_insertion_point(field_get:ttmall.ListRegionsReq.token)
  return token_.GetNoArena();
}
inline void ListRegionsReq::set_token(const ::std::string& value) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ttmall.ListRegionsReq.token)
}
#if LANG_CXX11
inline void ListRegionsReq::set_token(::std::string&& value) {
  
  token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ttmall.ListRegionsReq.token)
}
#endif
inline void ListRegionsReq::set_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ttmall.ListRegionsReq.token)
}
inline void ListRegionsReq::set_token(const char* value, size_t size) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ttmall.ListRegionsReq.token)
}
inline ::std::string* ListRegionsReq::mutable_token() {
  
  // @@protoc_insertion_point(field_mutable:ttmall.ListRegionsReq.token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListRegionsReq::release_token() {
  // @@protoc_insertion_point(field_release:ttmall.ListRegionsReq.token)
  
  return token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListRegionsReq::set_allocated_token(::std::string* token) {
  if (token != NULL) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:ttmall.ListRegionsReq.token)
}

// -------------------------------------------------------------------

// ListRegionsRep

// repeated .ttmall.RegionInfo Items = 1;
inline int ListRegionsRep::items_size() const {
  return items_.size();
}
inline void ListRegionsRep::clear_items() {
  items_.Clear();
}
inline const ::ttmall::RegionInfo& ListRegionsRep::items(int index) const {
  // @@protoc_insertion_point(field_get:ttmall.ListRegionsRep.Items)
  return items_.Get(index);
}
inline ::ttmall::RegionInfo* ListRegionsRep::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:ttmall.ListRegionsRep.Items)
  return items_.Mutable(index);
}
inline ::ttmall::RegionInfo* ListRegionsRep::add_items() {
  // @@protoc_insertion_point(field_add:ttmall.ListRegionsRep.Items)
  return items_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ttmall::RegionInfo >*
ListRegionsRep::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:ttmall.ListRegionsRep.Items)
  return &items_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ttmall::RegionInfo >&
ListRegionsRep::items() const {
  // @@protoc_insertion_point(field_list:ttmall.ListRegionsRep.Items)
  return items_;
}

// -------------------------------------------------------------------

// ListCarReq

// string token = 1;
inline void ListCarReq::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ListCarReq::token() const {
  // @@protoc_insertion_point(field_get:ttmall.ListCarReq.token)
  return token_.GetNoArena();
}
inline void ListCarReq::set_token(const ::std::string& value) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ttmall.ListCarReq.token)
}
#if LANG_CXX11
inline void ListCarReq::set_token(::std::string&& value) {
  
  token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ttmall.ListCarReq.token)
}
#endif
inline void ListCarReq::set_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ttmall.ListCarReq.token)
}
inline void ListCarReq::set_token(const char* value, size_t size) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ttmall.ListCarReq.token)
}
inline ::std::string* ListCarReq::mutable_token() {
  
  // @@protoc_insertion_point(field_mutable:ttmall.ListCarReq.token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListCarReq::release_token() {
  // @@protoc_insertion_point(field_release:ttmall.ListCarReq.token)
  
  return token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListCarReq::set_allocated_token(::std::string* token) {
  if (token != NULL) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:ttmall.ListCarReq.token)
}

// -------------------------------------------------------------------

// ListCarRep

// repeated .ttmall.CarInfo Items = 1;
inline int ListCarRep::items_size() const {
  return items_.size();
}
inline void ListCarRep::clear_items() {
  items_.Clear();
}
inline const ::ttmall::CarInfo& ListCarRep::items(int index) const {
  // @@protoc_insertion_point(field_get:ttmall.ListCarRep.Items)
  return items_.Get(index);
}
inline ::ttmall::CarInfo* ListCarRep::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:ttmall.ListCarRep.Items)
  return items_.Mutable(index);
}
inline ::ttmall::CarInfo* ListCarRep::add_items() {
  // @@protoc_insertion_point(field_add:ttmall.ListCarRep.Items)
  return items_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ttmall::CarInfo >*
ListCarRep::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:ttmall.ListCarRep.Items)
  return &items_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ttmall::CarInfo >&
ListCarRep::items() const {
  // @@protoc_insertion_point(field_list:ttmall.ListCarRep.Items)
  return items_;
}

// -------------------------------------------------------------------

// SendAuthReq

// string mobile = 1;
inline void SendAuthReq::clear_mobile() {
  mobile_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SendAuthReq::mobile() const {
  // @@protoc_insertion_point(field_get:ttmall.SendAuthReq.mobile)
  return mobile_.GetNoArena();
}
inline void SendAuthReq::set_mobile(const ::std::string& value) {
  
  mobile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ttmall.SendAuthReq.mobile)
}
#if LANG_CXX11
inline void SendAuthReq::set_mobile(::std::string&& value) {
  
  mobile_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ttmall.SendAuthReq.mobile)
}
#endif
inline void SendAuthReq::set_mobile(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  mobile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ttmall.SendAuthReq.mobile)
}
inline void SendAuthReq::set_mobile(const char* value, size_t size) {
  
  mobile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ttmall.SendAuthReq.mobile)
}
inline ::std::string* SendAuthReq::mutable_mobile() {
  
  // @@protoc_insertion_point(field_mutable:ttmall.SendAuthReq.mobile)
  return mobile_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SendAuthReq::release_mobile() {
  // @@protoc_insertion_point(field_release:ttmall.SendAuthReq.mobile)
  
  return mobile_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SendAuthReq::set_allocated_mobile(::std::string* mobile) {
  if (mobile != NULL) {
    
  } else {
    
  }
  mobile_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mobile);
  // @@protoc_insertion_point(field_set_allocated:ttmall.SendAuthReq.mobile)
}

// -------------------------------------------------------------------

// SendAuthRep

// string token = 1;
inline void SendAuthRep::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SendAuthRep::token() const {
  // @@protoc_insertion_point(field_get:ttmall.SendAuthRep.token)
  return token_.GetNoArena();
}
inline void SendAuthRep::set_token(const ::std::string& value) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ttmall.SendAuthRep.token)
}
#if LANG_CXX11
inline void SendAuthRep::set_token(::std::string&& value) {
  
  token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ttmall.SendAuthRep.token)
}
#endif
inline void SendAuthRep::set_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ttmall.SendAuthRep.token)
}
inline void SendAuthRep::set_token(const char* value, size_t size) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ttmall.SendAuthRep.token)
}
inline ::std::string* SendAuthRep::mutable_token() {
  
  // @@protoc_insertion_point(field_mutable:ttmall.SendAuthRep.token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SendAuthRep::release_token() {
  // @@protoc_insertion_point(field_release:ttmall.SendAuthRep.token)
  
  return token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SendAuthRep::set_allocated_token(::std::string* token) {
  if (token != NULL) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:ttmall.SendAuthRep.token)
}

// -------------------------------------------------------------------

// PublicInfoReq

// string token = 1;
inline void PublicInfoReq::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PublicInfoReq::token() const {
  // @@protoc_insertion_point(field_get:ttmall.PublicInfoReq.token)
  return token_.GetNoArena();
}
inline void PublicInfoReq::set_token(const ::std::string& value) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ttmall.PublicInfoReq.token)
}
#if LANG_CXX11
inline void PublicInfoReq::set_token(::std::string&& value) {
  
  token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ttmall.PublicInfoReq.token)
}
#endif
inline void PublicInfoReq::set_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ttmall.PublicInfoReq.token)
}
inline void PublicInfoReq::set_token(const char* value, size_t size) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ttmall.PublicInfoReq.token)
}
inline ::std::string* PublicInfoReq::mutable_token() {
  
  // @@protoc_insertion_point(field_mutable:ttmall.PublicInfoReq.token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PublicInfoReq::release_token() {
  // @@protoc_insertion_point(field_release:ttmall.PublicInfoReq.token)
  
  return token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PublicInfoReq::set_allocated_token(::std::string* token) {
  if (token != NULL) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:ttmall.PublicInfoReq.token)
}

// -------------------------------------------------------------------

// PublicInfoRep

// repeated string shop_types = 1;
inline int PublicInfoRep::shop_types_size() const {
  return shop_types_.size();
}
inline void PublicInfoRep::clear_shop_types() {
  shop_types_.Clear();
}
inline const ::std::string& PublicInfoRep::shop_types(int index) const {
  // @@protoc_insertion_point(field_get:ttmall.PublicInfoRep.shop_types)
  return shop_types_.Get(index);
}
inline ::std::string* PublicInfoRep::mutable_shop_types(int index) {
  // @@protoc_insertion_point(field_mutable:ttmall.PublicInfoRep.shop_types)
  return shop_types_.Mutable(index);
}
inline void PublicInfoRep::set_shop_types(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ttmall.PublicInfoRep.shop_types)
  shop_types_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void PublicInfoRep::set_shop_types(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ttmall.PublicInfoRep.shop_types)
  shop_types_.Mutable(index)->assign(std::move(value));
}
#endif
inline void PublicInfoRep::set_shop_types(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  shop_types_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ttmall.PublicInfoRep.shop_types)
}
inline void PublicInfoRep::set_shop_types(int index, const char* value, size_t size) {
  shop_types_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ttmall.PublicInfoRep.shop_types)
}
inline ::std::string* PublicInfoRep::add_shop_types() {
  // @@protoc_insertion_point(field_add_mutable:ttmall.PublicInfoRep.shop_types)
  return shop_types_.Add();
}
inline void PublicInfoRep::add_shop_types(const ::std::string& value) {
  shop_types_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ttmall.PublicInfoRep.shop_types)
}
#if LANG_CXX11
inline void PublicInfoRep::add_shop_types(::std::string&& value) {
  shop_types_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ttmall.PublicInfoRep.shop_types)
}
#endif
inline void PublicInfoRep::add_shop_types(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  shop_types_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ttmall.PublicInfoRep.shop_types)
}
inline void PublicInfoRep::add_shop_types(const char* value, size_t size) {
  shop_types_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ttmall.PublicInfoRep.shop_types)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
PublicInfoRep::shop_types() const {
  // @@protoc_insertion_point(field_list:ttmall.PublicInfoRep.shop_types)
  return shop_types_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
PublicInfoRep::mutable_shop_types() {
  // @@protoc_insertion_point(field_mutable_list:ttmall.PublicInfoRep.shop_types)
  return &shop_types_;
}

// repeated string deliver_times = 2;
inline int PublicInfoRep::deliver_times_size() const {
  return deliver_times_.size();
}
inline void PublicInfoRep::clear_deliver_times() {
  deliver_times_.Clear();
}
inline const ::std::string& PublicInfoRep::deliver_times(int index) const {
  // @@protoc_insertion_point(field_get:ttmall.PublicInfoRep.deliver_times)
  return deliver_times_.Get(index);
}
inline ::std::string* PublicInfoRep::mutable_deliver_times(int index) {
  // @@protoc_insertion_point(field_mutable:ttmall.PublicInfoRep.deliver_times)
  return deliver_times_.Mutable(index);
}
inline void PublicInfoRep::set_deliver_times(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ttmall.PublicInfoRep.deliver_times)
  deliver_times_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void PublicInfoRep::set_deliver_times(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ttmall.PublicInfoRep.deliver_times)
  deliver_times_.Mutable(index)->assign(std::move(value));
}
#endif
inline void PublicInfoRep::set_deliver_times(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  deliver_times_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ttmall.PublicInfoRep.deliver_times)
}
inline void PublicInfoRep::set_deliver_times(int index, const char* value, size_t size) {
  deliver_times_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ttmall.PublicInfoRep.deliver_times)
}
inline ::std::string* PublicInfoRep::add_deliver_times() {
  // @@protoc_insertion_point(field_add_mutable:ttmall.PublicInfoRep.deliver_times)
  return deliver_times_.Add();
}
inline void PublicInfoRep::add_deliver_times(const ::std::string& value) {
  deliver_times_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ttmall.PublicInfoRep.deliver_times)
}
#if LANG_CXX11
inline void PublicInfoRep::add_deliver_times(::std::string&& value) {
  deliver_times_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ttmall.PublicInfoRep.deliver_times)
}
#endif
inline void PublicInfoRep::add_deliver_times(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  deliver_times_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ttmall.PublicInfoRep.deliver_times)
}
inline void PublicInfoRep::add_deliver_times(const char* value, size_t size) {
  deliver_times_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ttmall.PublicInfoRep.deliver_times)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
PublicInfoRep::deliver_times() const {
  // @@protoc_insertion_point(field_list:ttmall.PublicInfoRep.deliver_times)
  return deliver_times_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
PublicInfoRep::mutable_deliver_times() {
  // @@protoc_insertion_point(field_mutable_list:ttmall.PublicInfoRep.deliver_times)
  return &deliver_times_;
}

// string clause_url = 3;
inline void PublicInfoRep::clear_clause_url() {
  clause_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PublicInfoRep::clause_url() const {
  // @@protoc_insertion_point(field_get:ttmall.PublicInfoRep.clause_url)
  return clause_url_.GetNoArena();
}
inline void PublicInfoRep::set_clause_url(const ::std::string& value) {
  
  clause_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ttmall.PublicInfoRep.clause_url)
}
#if LANG_CXX11
inline void PublicInfoRep::set_clause_url(::std::string&& value) {
  
  clause_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ttmall.PublicInfoRep.clause_url)
}
#endif
inline void PublicInfoRep::set_clause_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  clause_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ttmall.PublicInfoRep.clause_url)
}
inline void PublicInfoRep::set_clause_url(const char* value, size_t size) {
  
  clause_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ttmall.PublicInfoRep.clause_url)
}
inline ::std::string* PublicInfoRep::mutable_clause_url() {
  
  // @@protoc_insertion_point(field_mutable:ttmall.PublicInfoRep.clause_url)
  return clause_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PublicInfoRep::release_clause_url() {
  // @@protoc_insertion_point(field_release:ttmall.PublicInfoRep.clause_url)
  
  return clause_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PublicInfoRep::set_allocated_clause_url(::std::string* clause_url) {
  if (clause_url != NULL) {
    
  } else {
    
  }
  clause_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), clause_url);
  // @@protoc_insertion_point(field_set_allocated:ttmall.PublicInfoRep.clause_url)
}

// string rule_url = 4;
inline void PublicInfoRep::clear_rule_url() {
  rule_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PublicInfoRep::rule_url() const {
  // @@protoc_insertion_point(field_get:ttmall.PublicInfoRep.rule_url)
  return rule_url_.GetNoArena();
}
inline void PublicInfoRep::set_rule_url(const ::std::string& value) {
  
  rule_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ttmall.PublicInfoRep.rule_url)
}
#if LANG_CXX11
inline void PublicInfoRep::set_rule_url(::std::string&& value) {
  
  rule_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ttmall.PublicInfoRep.rule_url)
}
#endif
inline void PublicInfoRep::set_rule_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  rule_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ttmall.PublicInfoRep.rule_url)
}
inline void PublicInfoRep::set_rule_url(const char* value, size_t size) {
  
  rule_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ttmall.PublicInfoRep.rule_url)
}
inline ::std::string* PublicInfoRep::mutable_rule_url() {
  
  // @@protoc_insertion_point(field_mutable:ttmall.PublicInfoRep.rule_url)
  return rule_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PublicInfoRep::release_rule_url() {
  // @@protoc_insertion_point(field_release:ttmall.PublicInfoRep.rule_url)
  
  return rule_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PublicInfoRep::set_allocated_rule_url(::std::string* rule_url) {
  if (rule_url != NULL) {
    
  } else {
    
  }
  rule_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rule_url);
  // @@protoc_insertion_point(field_set_allocated:ttmall.PublicInfoRep.rule_url)
}

// -------------------------------------------------------------------

// ListUserTypeReq

// string token = 1;
inline void ListUserTypeReq::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ListUserTypeReq::token() const {
  // @@protoc_insertion_point(field_get:ttmall.ListUserTypeReq.token)
  return token_.GetNoArena();
}
inline void ListUserTypeReq::set_token(const ::std::string& value) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ttmall.ListUserTypeReq.token)
}
#if LANG_CXX11
inline void ListUserTypeReq::set_token(::std::string&& value) {
  
  token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ttmall.ListUserTypeReq.token)
}
#endif
inline void ListUserTypeReq::set_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ttmall.ListUserTypeReq.token)
}
inline void ListUserTypeReq::set_token(const char* value, size_t size) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ttmall.ListUserTypeReq.token)
}
inline ::std::string* ListUserTypeReq::mutable_token() {
  
  // @@protoc_insertion_point(field_mutable:ttmall.ListUserTypeReq.token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListUserTypeReq::release_token() {
  // @@protoc_insertion_point(field_release:ttmall.ListUserTypeReq.token)
  
  return token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListUserTypeReq::set_allocated_token(::std::string* token) {
  if (token != NULL) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:ttmall.ListUserTypeReq.token)
}

// -------------------------------------------------------------------

// ListUserTypeRep

// repeated .ttmall.UserType items = 1;
inline int ListUserTypeRep::items_size() const {
  return items_.size();
}
inline void ListUserTypeRep::clear_items() {
  items_.Clear();
}
inline const ::ttmall::UserType& ListUserTypeRep::items(int index) const {
  // @@protoc_insertion_point(field_get:ttmall.ListUserTypeRep.items)
  return items_.Get(index);
}
inline ::ttmall::UserType* ListUserTypeRep::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:ttmall.ListUserTypeRep.items)
  return items_.Mutable(index);
}
inline ::ttmall::UserType* ListUserTypeRep::add_items() {
  // @@protoc_insertion_point(field_add:ttmall.ListUserTypeRep.items)
  return items_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ttmall::UserType >*
ListUserTypeRep::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:ttmall.ListUserTypeRep.items)
  return &items_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ttmall::UserType >&
ListUserTypeRep::items() const {
  // @@protoc_insertion_point(field_list:ttmall.ListUserTypeRep.items)
  return items_;
}

// -------------------------------------------------------------------

// IndexAdInfoReq

// string token = 1;
inline void IndexAdInfoReq::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& IndexAdInfoReq::token() const {
  // @@protoc_insertion_point(field_get:ttmall.IndexAdInfoReq.token)
  return token_.GetNoArena();
}
inline void IndexAdInfoReq::set_token(const ::std::string& value) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ttmall.IndexAdInfoReq.token)
}
#if LANG_CXX11
inline void IndexAdInfoReq::set_token(::std::string&& value) {
  
  token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ttmall.IndexAdInfoReq.token)
}
#endif
inline void IndexAdInfoReq::set_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ttmall.IndexAdInfoReq.token)
}
inline void IndexAdInfoReq::set_token(const char* value, size_t size) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ttmall.IndexAdInfoReq.token)
}
inline ::std::string* IndexAdInfoReq::mutable_token() {
  
  // @@protoc_insertion_point(field_mutable:ttmall.IndexAdInfoReq.token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IndexAdInfoReq::release_token() {
  // @@protoc_insertion_point(field_release:ttmall.IndexAdInfoReq.token)
  
  return token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IndexAdInfoReq::set_allocated_token(::std::string* token) {
  if (token != NULL) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:ttmall.IndexAdInfoReq.token)
}

// string id = 2;
inline void IndexAdInfoReq::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& IndexAdInfoReq::id() const {
  // @@protoc_insertion_point(field_get:ttmall.IndexAdInfoReq.id)
  return id_.GetNoArena();
}
inline void IndexAdInfoReq::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ttmall.IndexAdInfoReq.id)
}
#if LANG_CXX11
inline void IndexAdInfoReq::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ttmall.IndexAdInfoReq.id)
}
#endif
inline void IndexAdInfoReq::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ttmall.IndexAdInfoReq.id)
}
inline void IndexAdInfoReq::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ttmall.IndexAdInfoReq.id)
}
inline ::std::string* IndexAdInfoReq::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:ttmall.IndexAdInfoReq.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IndexAdInfoReq::release_id() {
  // @@protoc_insertion_point(field_release:ttmall.IndexAdInfoReq.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IndexAdInfoReq::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:ttmall.IndexAdInfoReq.id)
}

// -------------------------------------------------------------------

// IndexAdInfoRep

// string id = 1;
inline void IndexAdInfoRep::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& IndexAdInfoRep::id() const {
  // @@protoc_insertion_point(field_get:ttmall.IndexAdInfoRep.id)
  return id_.GetNoArena();
}
inline void IndexAdInfoRep::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ttmall.IndexAdInfoRep.id)
}
#if LANG_CXX11
inline void IndexAdInfoRep::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ttmall.IndexAdInfoRep.id)
}
#endif
inline void IndexAdInfoRep::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ttmall.IndexAdInfoRep.id)
}
inline void IndexAdInfoRep::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ttmall.IndexAdInfoRep.id)
}
inline ::std::string* IndexAdInfoRep::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:ttmall.IndexAdInfoRep.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IndexAdInfoRep::release_id() {
  // @@protoc_insertion_point(field_release:ttmall.IndexAdInfoRep.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IndexAdInfoRep::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:ttmall.IndexAdInfoRep.id)
}

// string title = 2;
inline void IndexAdInfoRep::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& IndexAdInfoRep::title() const {
  // @@protoc_insertion_point(field_get:ttmall.IndexAdInfoRep.title)
  return title_.GetNoArena();
}
inline void IndexAdInfoRep::set_title(const ::std::string& value) {
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ttmall.IndexAdInfoRep.title)
}
#if LANG_CXX11
inline void IndexAdInfoRep::set_title(::std::string&& value) {
  
  title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ttmall.IndexAdInfoRep.title)
}
#endif
inline void IndexAdInfoRep::set_title(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ttmall.IndexAdInfoRep.title)
}
inline void IndexAdInfoRep::set_title(const char* value, size_t size) {
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ttmall.IndexAdInfoRep.title)
}
inline ::std::string* IndexAdInfoRep::mutable_title() {
  
  // @@protoc_insertion_point(field_mutable:ttmall.IndexAdInfoRep.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IndexAdInfoRep::release_title() {
  // @@protoc_insertion_point(field_release:ttmall.IndexAdInfoRep.title)
  
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IndexAdInfoRep::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    
  } else {
    
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:ttmall.IndexAdInfoRep.title)
}

// string desc = 3;
inline void IndexAdInfoRep::clear_desc() {
  desc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& IndexAdInfoRep::desc() const {
  // @@protoc_insertion_point(field_get:ttmall.IndexAdInfoRep.desc)
  return desc_.GetNoArena();
}
inline void IndexAdInfoRep::set_desc(const ::std::string& value) {
  
  desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ttmall.IndexAdInfoRep.desc)
}
#if LANG_CXX11
inline void IndexAdInfoRep::set_desc(::std::string&& value) {
  
  desc_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ttmall.IndexAdInfoRep.desc)
}
#endif
inline void IndexAdInfoRep::set_desc(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ttmall.IndexAdInfoRep.desc)
}
inline void IndexAdInfoRep::set_desc(const char* value, size_t size) {
  
  desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ttmall.IndexAdInfoRep.desc)
}
inline ::std::string* IndexAdInfoRep::mutable_desc() {
  
  // @@protoc_insertion_point(field_mutable:ttmall.IndexAdInfoRep.desc)
  return desc_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IndexAdInfoRep::release_desc() {
  // @@protoc_insertion_point(field_release:ttmall.IndexAdInfoRep.desc)
  
  return desc_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IndexAdInfoRep::set_allocated_desc(::std::string* desc) {
  if (desc != NULL) {
    
  } else {
    
  }
  desc_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), desc);
  // @@protoc_insertion_point(field_set_allocated:ttmall.IndexAdInfoRep.desc)
}

// .ttmall.ImageInfo banner = 4;
inline bool IndexAdInfoRep::has_banner() const {
  return this != internal_default_instance() && banner_ != NULL;
}
inline void IndexAdInfoRep::clear_banner() {
  if (GetArenaNoVirtual() == NULL && banner_ != NULL) delete banner_;
  banner_ = NULL;
}
inline const ::ttmall::ImageInfo& IndexAdInfoRep::banner() const {
  // @@protoc_insertion_point(field_get:ttmall.IndexAdInfoRep.banner)
  return banner_ != NULL ? *banner_
                         : *::ttmall::ImageInfo::internal_default_instance();
}
inline ::ttmall::ImageInfo* IndexAdInfoRep::mutable_banner() {
  
  if (banner_ == NULL) {
    banner_ = new ::ttmall::ImageInfo;
  }
  // @@protoc_insertion_point(field_mutable:ttmall.IndexAdInfoRep.banner)
  return banner_;
}
inline ::ttmall::ImageInfo* IndexAdInfoRep::release_banner() {
  // @@protoc_insertion_point(field_release:ttmall.IndexAdInfoRep.banner)
  
  ::ttmall::ImageInfo* temp = banner_;
  banner_ = NULL;
  return temp;
}
inline void IndexAdInfoRep::set_allocated_banner(::ttmall::ImageInfo* banner) {
  delete banner_;
  banner_ = banner;
  if (banner) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ttmall.IndexAdInfoRep.banner)
}

// repeated .ttmall.GoodsInfo goods = 5;
inline int IndexAdInfoRep::goods_size() const {
  return goods_.size();
}
inline void IndexAdInfoRep::clear_goods() {
  goods_.Clear();
}
inline const ::ttmall::GoodsInfo& IndexAdInfoRep::goods(int index) const {
  // @@protoc_insertion_point(field_get:ttmall.IndexAdInfoRep.goods)
  return goods_.Get(index);
}
inline ::ttmall::GoodsInfo* IndexAdInfoRep::mutable_goods(int index) {
  // @@protoc_insertion_point(field_mutable:ttmall.IndexAdInfoRep.goods)
  return goods_.Mutable(index);
}
inline ::ttmall::GoodsInfo* IndexAdInfoRep::add_goods() {
  // @@protoc_insertion_point(field_add:ttmall.IndexAdInfoRep.goods)
  return goods_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ttmall::GoodsInfo >*
IndexAdInfoRep::mutable_goods() {
  // @@protoc_insertion_point(field_mutable_list:ttmall.IndexAdInfoRep.goods)
  return &goods_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ttmall::GoodsInfo >&
IndexAdInfoRep::goods() const {
  // @@protoc_insertion_point(field_list:ttmall.IndexAdInfoRep.goods)
  return goods_;
}

// -------------------------------------------------------------------

// SetDeviceIdReq

// string token = 1;
inline void SetDeviceIdReq::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SetDeviceIdReq::token() const {
  // @@protoc_insertion_point(field_get:ttmall.SetDeviceIdReq.token)
  return token_.GetNoArena();
}
inline void SetDeviceIdReq::set_token(const ::std::string& value) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ttmall.SetDeviceIdReq.token)
}
#if LANG_CXX11
inline void SetDeviceIdReq::set_token(::std::string&& value) {
  
  token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ttmall.SetDeviceIdReq.token)
}
#endif
inline void SetDeviceIdReq::set_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ttmall.SetDeviceIdReq.token)
}
inline void SetDeviceIdReq::set_token(const char* value, size_t size) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ttmall.SetDeviceIdReq.token)
}
inline ::std::string* SetDeviceIdReq::mutable_token() {
  
  // @@protoc_insertion_point(field_mutable:ttmall.SetDeviceIdReq.token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SetDeviceIdReq::release_token() {
  // @@protoc_insertion_point(field_release:ttmall.SetDeviceIdReq.token)
  
  return token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetDeviceIdReq::set_allocated_token(::std::string* token) {
  if (token != NULL) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:ttmall.SetDeviceIdReq.token)
}

// string device_id = 2;
inline void SetDeviceIdReq::clear_device_id() {
  device_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SetDeviceIdReq::device_id() const {
  // @@protoc_insertion_point(field_get:ttmall.SetDeviceIdReq.device_id)
  return device_id_.GetNoArena();
}
inline void SetDeviceIdReq::set_device_id(const ::std::string& value) {
  
  device_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ttmall.SetDeviceIdReq.device_id)
}
#if LANG_CXX11
inline void SetDeviceIdReq::set_device_id(::std::string&& value) {
  
  device_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ttmall.SetDeviceIdReq.device_id)
}
#endif
inline void SetDeviceIdReq::set_device_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  device_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ttmall.SetDeviceIdReq.device_id)
}
inline void SetDeviceIdReq::set_device_id(const char* value, size_t size) {
  
  device_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ttmall.SetDeviceIdReq.device_id)
}
inline ::std::string* SetDeviceIdReq::mutable_device_id() {
  
  // @@protoc_insertion_point(field_mutable:ttmall.SetDeviceIdReq.device_id)
  return device_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SetDeviceIdReq::release_device_id() {
  // @@protoc_insertion_point(field_release:ttmall.SetDeviceIdReq.device_id)
  
  return device_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetDeviceIdReq::set_allocated_device_id(::std::string* device_id) {
  if (device_id != NULL) {
    
  } else {
    
  }
  device_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), device_id);
  // @@protoc_insertion_point(field_set_allocated:ttmall.SetDeviceIdReq.device_id)
}

// -------------------------------------------------------------------

// SetDeviceIdRep

// -------------------------------------------------------------------

// CheckUpdateReq

// .ttmall.UpdateType type = 1;
inline void CheckUpdateReq::clear_type() {
  type_ = 0;
}
inline ::ttmall::UpdateType CheckUpdateReq::type() const {
  // @@protoc_insertion_point(field_get:ttmall.CheckUpdateReq.type)
  return static_cast< ::ttmall::UpdateType >(type_);
}
inline void CheckUpdateReq::set_type(::ttmall::UpdateType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:ttmall.CheckUpdateReq.type)
}

// int32 version = 2;
inline void CheckUpdateReq::clear_version() {
  version_ = 0;
}
inline ::google::protobuf::int32 CheckUpdateReq::version() const {
  // @@protoc_insertion_point(field_get:ttmall.CheckUpdateReq.version)
  return version_;
}
inline void CheckUpdateReq::set_version(::google::protobuf::int32 value) {
  
  version_ = value;
  // @@protoc_insertion_point(field_set:ttmall.CheckUpdateReq.version)
}

// .ttmall.DevicePlatform platform = 3;
inline void CheckUpdateReq::clear_platform() {
  platform_ = 0;
}
inline ::ttmall::DevicePlatform CheckUpdateReq::platform() const {
  // @@protoc_insertion_point(field_get:ttmall.CheckUpdateReq.platform)
  return static_cast< ::ttmall::DevicePlatform >(platform_);
}
inline void CheckUpdateReq::set_platform(::ttmall::DevicePlatform value) {
  
  platform_ = value;
  // @@protoc_insertion_point(field_set:ttmall.CheckUpdateReq.platform)
}

// -------------------------------------------------------------------

// CheckUpdateRep

// string version = 1;
inline void CheckUpdateRep::clear_version() {
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CheckUpdateRep::version() const {
  // @@protoc_insertion_point(field_get:ttmall.CheckUpdateRep.version)
  return version_.GetNoArena();
}
inline void CheckUpdateRep::set_version(const ::std::string& value) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ttmall.CheckUpdateRep.version)
}
#if LANG_CXX11
inline void CheckUpdateRep::set_version(::std::string&& value) {
  
  version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ttmall.CheckUpdateRep.version)
}
#endif
inline void CheckUpdateRep::set_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ttmall.CheckUpdateRep.version)
}
inline void CheckUpdateRep::set_version(const char* value, size_t size) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ttmall.CheckUpdateRep.version)
}
inline ::std::string* CheckUpdateRep::mutable_version() {
  
  // @@protoc_insertion_point(field_mutable:ttmall.CheckUpdateRep.version)
  return version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CheckUpdateRep::release_version() {
  // @@protoc_insertion_point(field_release:ttmall.CheckUpdateRep.version)
  
  return version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CheckUpdateRep::set_allocated_version(::std::string* version) {
  if (version != NULL) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:ttmall.CheckUpdateRep.version)
}

// string url = 2;
inline void CheckUpdateRep::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CheckUpdateRep::url() const {
  // @@protoc_insertion_point(field_get:ttmall.CheckUpdateRep.url)
  return url_.GetNoArena();
}
inline void CheckUpdateRep::set_url(const ::std::string& value) {
  
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ttmall.CheckUpdateRep.url)
}
#if LANG_CXX11
inline void CheckUpdateRep::set_url(::std::string&& value) {
  
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ttmall.CheckUpdateRep.url)
}
#endif
inline void CheckUpdateRep::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ttmall.CheckUpdateRep.url)
}
inline void CheckUpdateRep::set_url(const char* value, size_t size) {
  
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ttmall.CheckUpdateRep.url)
}
inline ::std::string* CheckUpdateRep::mutable_url() {
  
  // @@protoc_insertion_point(field_mutable:ttmall.CheckUpdateRep.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CheckUpdateRep::release_url() {
  // @@protoc_insertion_point(field_release:ttmall.CheckUpdateRep.url)
  
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CheckUpdateRep::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    
  } else {
    
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:ttmall.CheckUpdateRep.url)
}

// bool has_update = 3;
inline void CheckUpdateRep::clear_has_update() {
  has_update_ = false;
}
inline bool CheckUpdateRep::has_update() const {
  // @@protoc_insertion_point(field_get:ttmall.CheckUpdateRep.has_update)
  return has_update_;
}
inline void CheckUpdateRep::set_has_update(bool value) {
  
  has_update_ = value;
  // @@protoc_insertion_point(field_set:ttmall.CheckUpdateRep.has_update)
}

// bool is_must = 4;
inline void CheckUpdateRep::clear_is_must() {
  is_must_ = false;
}
inline bool CheckUpdateRep::is_must() const {
  // @@protoc_insertion_point(field_get:ttmall.CheckUpdateRep.is_must)
  return is_must_;
}
inline void CheckUpdateRep::set_is_must(bool value) {
  
  is_must_ = value;
  // @@protoc_insertion_point(field_set:ttmall.CheckUpdateRep.is_must)
}

// string desc = 5;
inline void CheckUpdateRep::clear_desc() {
  desc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CheckUpdateRep::desc() const {
  // @@protoc_insertion_point(field_get:ttmall.CheckUpdateRep.desc)
  return desc_.GetNoArena();
}
inline void CheckUpdateRep::set_desc(const ::std::string& value) {
  
  desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ttmall.CheckUpdateRep.desc)
}
#if LANG_CXX11
inline void CheckUpdateRep::set_desc(::std::string&& value) {
  
  desc_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ttmall.CheckUpdateRep.desc)
}
#endif
inline void CheckUpdateRep::set_desc(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ttmall.CheckUpdateRep.desc)
}
inline void CheckUpdateRep::set_desc(const char* value, size_t size) {
  
  desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ttmall.CheckUpdateRep.desc)
}
inline ::std::string* CheckUpdateRep::mutable_desc() {
  
  // @@protoc_insertion_point(field_mutable:ttmall.CheckUpdateRep.desc)
  return desc_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CheckUpdateRep::release_desc() {
  // @@protoc_insertion_point(field_release:ttmall.CheckUpdateRep.desc)
  
  return desc_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CheckUpdateRep::set_allocated_desc(::std::string* desc) {
  if (desc != NULL) {
    
  } else {
    
  }
  desc_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), desc);
  // @@protoc_insertion_point(field_set_allocated:ttmall.CheckUpdateRep.desc)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace ttmall

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::ttmall::DevicePlatform> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ttmall::DevicePlatform>() {
  return ::ttmall::DevicePlatform_descriptor();
}
template <> struct is_proto_enum< ::ttmall::SaleType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ttmall::SaleType>() {
  return ::ttmall::SaleType_descriptor();
}
template <> struct is_proto_enum< ::ttmall::MessageType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ttmall::MessageType>() {
  return ::ttmall::MessageType_descriptor();
}
template <> struct is_proto_enum< ::ttmall::Error> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ttmall::Error>() {
  return ::ttmall::Error_descriptor();
}
template <> struct is_proto_enum< ::ttmall::AdPosition> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ttmall::AdPosition>() {
  return ::ttmall::AdPosition_descriptor();
}
template <> struct is_proto_enum< ::ttmall::UpdateType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ttmall::UpdateType>() {
  return ::ttmall::UpdateType_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_public_2eproto__INCLUDED
